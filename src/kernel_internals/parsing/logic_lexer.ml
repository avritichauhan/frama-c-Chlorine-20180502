# 25 "src/kernel_internals/parsing/logic_lexer.mll"
 

  open Logic_parser
  open Lexing
  open Logic_ptree

  type state = Normal | Test

  let state_stack = Stack.create ()

  let () = Stack.push Normal state_stack

  let get_state () = try Stack.top state_stack with Stack.Empty -> Normal

  let pop_state () = try ignore (Stack.pop state_stack) with Stack.Empty -> ()

  exception Error of (int * int) * string

  let loc lexbuf = (lexeme_start lexbuf, lexeme_end lexbuf)

  let lex_error lexbuf s =
    raise (Error (loc lexbuf, "lexical error, " ^ s))

  let find_utf8 =
    let h = Hashtbl.create 97 in
    List.iter (fun (i,t) -> Hashtbl.add h i t)
      [ Utf8_logic.forall, FORALL;
        Utf8_logic.exists, EXISTS;
        Utf8_logic.eq, EQ;
        Utf8_logic.neq, NE;
        Utf8_logic.le, LE;
        Utf8_logic.ge, GE;
        Utf8_logic.implies,IMPLIES;
        Utf8_logic.iff, IFF;
        Utf8_logic.conj, AND;
        Utf8_logic.disj, OR;
        Utf8_logic.neg, NOT;
        Utf8_logic.x_or, HATHAT;
        Utf8_logic.minus, MINUS;
        Utf8_logic.boolean, BOOLEAN;
        Utf8_logic.integer, INTEGER;
        Utf8_logic.real, REAL;
        Utf8_logic.inset, IN;
        Utf8_logic.pi, PI;
      ];

    fun s -> try Hashtbl.find h s
    with Not_found -> IDENTIFIER s

  let identifier, is_acsl_keyword =
    let all_kw = Hashtbl.create 37 in
    let c_kw = Hashtbl.create 37 in
    let type_kw = Hashtbl.create 3 in
    List.iter
      (fun (i,t,flag) ->
         Hashtbl.add all_kw i t;
         if flag then Hashtbl.add c_kw i t
      )
      [
        "allocates", ALLOCATES, false;
        "assert", ASSERT, false;
        "assigns", ASSIGNS, false;
        "assumes", ASSUMES, false;
        "at", EXT_AT, false;(* ACSL extension for external spec file *)
        "axiom", AXIOM, false;
        "axiomatic", AXIOMATIC, false;
        "behavior", BEHAVIOR, false;
        "behaviors", BEHAVIORS, false;
        "_Bool", BOOL, true;
        "breaks", BREAKS, false;
	"case", CASE, true;
        "char", CHAR, true;
        "complete", COMPLETE, false;
        "const", CONST, true;
        "continues", CONTINUES, false;
        "contract", CONTRACT, false;(* ACSL extension for external spec file *)
	"custom", CUSTOM, false; (* ACSL extension for custom annotations *)
        "decreases", DECREASES, false;
        "disjoint", DISJOINT, false;
        "double", DOUBLE, true;
        "else", ELSE, true;
        "ensures", ENSURES, false ;
        "enum", ENUM, true;
        "exits", EXITS, false;
        "frees", FREES, false;
        "function", FUNCTION, false;(* ACSL extension for external spec file *)
        "float", FLOAT, true;
        "for", FOR, true;
        "global",    GLOBAL, false;
        "if", IF, true;
	"impact", IMPACT, false;
	"inductive", INDUCTIVE, false;
	"include", INCLUDE, false;(* ACSL extension for external spec file *)
        "int", INT, true;
        "invariant", INVARIANT, false;
        "label", LABEL, false;
        "lemma", LEMMA, false;
        "let", EXT_LET, false;(* ACSL extension for external spec file *)
        "logic", LOGIC, false;
        "long", LONG, true;
        "loop", LOOP, false;
        "model", MODEL, false;(* ACSL extension for model fields *)
        "module", MODULE, false;(* ACSL extension for external spec file *)
        "pragma", PRAGMA, false;
        "predicate", PREDICATE, false;
        "reads", READS, false;
        "requires", REQUIRES, false;
        "returns", RETURNS, false;
        "short", SHORT, true;
        "signed", SIGNED, true;
        "sizeof", SIZEOF, true;
        "slice", SLICE, false;
        "struct", STRUCT, true;
        "terminates", TERMINATES, false;
        "type", TYPE, false;
        "union", UNION, true;
        "unsigned", UNSIGNED, true;
        "variant", VARIANT, false;
        "void", VOID, true;
        "volatile", VOLATILE, true;
        "writes", WRITES, false;
      ];
    List.iter (fun (x, y) -> Hashtbl.add type_kw x y)
      ["integer", INTEGER; "real", REAL; "boolean", BOOLEAN; ];
    (fun s ->
      try
        Hashtbl.find (if Logic_utils.is_kw_c_mode () then c_kw else all_kw) s
      with Not_found ->
        if Logic_env.typename_status s then TYPENAME s
        else
          (try
             Hashtbl.find type_kw s
           with Not_found ->
             if Logic_utils.is_rt_type_mode () then TYPENAME s
             else IDENTIFIER s)),
    (fun s -> Hashtbl.mem all_kw s || Hashtbl.mem type_kw s)

  let bs_identifier =
    let h = Hashtbl.create 97 in
    List.iter (fun (i,t) -> Hashtbl.add h i t)
      [
        "\\allocation", ALLOCATION;
        "\\allocable", ALLOCABLE;
        "\\automatic", AUTOMATIC;
        "\\at", AT;
        "\\base_addr", BASE_ADDR;
        "\\block_length", BLOCK_LENGTH;
        "\\dynamic", DYNAMIC;
        "\\empty", EMPTY;
        "\\exists", EXISTS;
        "\\false", FALSE;
        "\\forall", FORALL;
        "\\freeable", FREEABLE;
        "\\fresh", FRESH;
        "\\from", FROM;
        "\\initialized", INITIALIZED;
        "\\dangling", DANGLING;
        "\\in", IN;
        "\\inter", INTER;
        "\\lambda", LAMBDA;
        "\\let", LET;
        "\\nothing", NOTHING;
        "\\null", NULL;
        "\\offset", OFFSET;
        "\\old", OLD;
        "\\pi", PI;
        "\\register", REGISTER;
        "\\result", RESULT;
        "\\separated", SEPARATED;
        "\\static", STATIC;
        "\\true", TRUE;
        "\\type", BSTYPE;
        "\\typeof", TYPEOF;
        "\\unallocated", UNALLOCATED;
        "\\union", BSUNION;
        "\\valid", VALID;
        "\\valid_read", VALID_READ;
        "\\valid_index", VALID_INDEX;
        "\\valid_range", VALID_RANGE;
        "\\valid_function", VALID_FUNCTION;
        "\\with", WITH;
      ];
    fun lexbuf ->
      let s = lexeme lexbuf in
      try Hashtbl.find h s with Not_found ->         
	if Logic_env.typename_status s then TYPENAME s
        else
	  IDENTIFIER s


  let int_of_digit chr =
    match chr with
        '0'..'9' -> (Char.code chr) - (Char.code '0')
      | 'a'..'f' -> (Char.code chr) - (Char.code 'a') + 10
      | 'A'..'F' -> (Char.code chr) - (Char.code 'A') + 10
      | _ -> assert false

  (* Update lexer buffer. *)
  let update_line_loc lexbuf line =
    let pos = lexbuf.Lexing.lex_curr_p in
    lexbuf.Lexing.lex_curr_p <-
      { pos with
	Lexing.pos_lnum = line;
	Lexing.pos_bol = pos.Lexing.pos_cnum;
      }

  let update_newline_loc lexbuf =
    update_line_loc lexbuf (lexbuf.Lexing.lex_curr_p.Lexing.pos_lnum + 1)

  let update_file_loc lexbuf file =
   let pos = lexbuf.Lexing.lex_curr_p in
    lexbuf.Lexing.lex_curr_p <- { pos with Lexing.pos_fname = file }

  let accept_c_comments_into_acsl_spec = ref false


# 219 "src/kernel_internals/parsing/logic_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\188\255\189\255\000\000\197\255\133\000\199\255\200\255\
    \201\255\202\255\197\000\210\255\212\255\166\000\219\255\203\000\
    \226\255\227\255\229\255\230\255\201\000\170\000\226\000\221\000\
    \224\000\206\000\238\255\002\001\224\000\005\001\253\000\035\001\
    \108\001\197\001\255\001\239\000\246\000\254\255\046\001\250\255\
    \032\001\252\255\253\255\217\255\251\255\074\002\187\002\126\002\
    \090\001\127\002\242\255\239\255\092\001\154\002\183\002\211\000\
    \195\002\241\000\009\003\032\003\091\003\233\002\161\003\247\000\
    \129\003\199\003\232\003\008\004\064\003\241\255\018\004\047\004\
    \079\004\089\004\108\004\141\004\173\004\183\004\031\001\027\001\
    \030\001\202\004\212\004\240\255\234\004\244\004\017\005\027\005\
    \056\005\066\005\095\005\245\000\107\005\136\005\146\005\175\005\
    \221\255\233\000\237\255\192\255\194\255\252\000\251\000\251\000\
    \236\255\254\000\234\255\228\255\255\000\235\255\233\255\195\255\
    \232\255\203\255\193\255\224\255\215\255\191\255\206\255\196\255\
    \232\000\251\255\252\255\208\005\253\255\076\001\025\006\048\006\
    \189\001\254\255\234\005\251\255\213\000\224\005\254\255\255\255\
    \210\000\220\000\252\255\035\003\252\255\133\001\254\255\255\255\
    \253\255\001\003\225\001\253\255\254\255\255\255\125\002\252\255\
    \253\255\022\001\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\065\000\255\255\057\000\255\255\255\255\
    \255\255\255\255\047\000\255\255\255\255\041\000\255\255\030\000\
    \255\255\255\255\255\255\255\255\024\000\042\000\039\000\035\000\
    \046\000\051\000\255\255\067\000\032\000\067\000\011\000\011\000\
    \007\000\007\000\067\000\037\000\044\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\014\000\255\255\012\000\
    \010\000\255\255\255\255\255\255\008\000\255\255\255\255\008\000\
    \255\255\255\255\255\255\014\000\255\255\255\255\014\000\255\255\
    \014\000\255\255\255\255\255\255\014\000\255\255\009\000\009\000\
    \010\000\014\000\255\255\255\255\255\255\014\000\255\255\014\000\
    \255\255\014\000\255\255\033\000\014\000\255\255\014\000\255\255\
    \255\255\050\000\255\255\255\255\255\255\255\255\048\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\255\255\001\000\255\255\000\000\
    \001\000\255\255\255\255\255\255\004\000\002\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\255\255\255\255";
  Lexing.lex_default =
   "\003\000\000\000\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\046\000\255\255\049\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \040\000\000\000\000\000\000\000\000\000\255\255\046\000\049\000\
    \049\000\049\000\000\000\000\000\046\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \121\000\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\131\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\255\255\000\000\140\000\000\000\145\000\000\000\000\000\
    \000\000\145\000\147\000\000\000\000\000\000\000\151\000\000\000\
    \000\000\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\038\000\037\000\001\000\038\000\038\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \038\000\020\000\027\000\026\000\019\000\011\000\022\000\029\000\
    \009\000\008\000\035\000\014\000\018\000\023\000\028\000\036\000\
    \031\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\015\000\016\000\024\000\025\000\010\000\017\000\
    \038\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\033\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\005\000\034\000\004\000\013\000\032\000\
    \001\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\007\000\021\000\006\000\012\000\001\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
    \002\000\119\000\118\000\117\000\116\000\115\000\113\000\111\000\
    \110\000\114\000\108\000\097\000\255\255\101\000\091\000\255\255\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\100\000\107\000\099\000\102\000\044\000\055\000\
    \039\000\078\000\078\000\096\000\051\000\040\000\112\000\098\000\
    \055\000\105\000\042\000\053\000\255\255\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\038\000\
    \103\000\104\000\038\000\038\000\106\000\109\000\136\000\055\000\
    \137\000\138\000\054\000\063\000\123\000\155\000\000\000\000\000\
    \055\000\055\000\000\000\000\000\063\000\043\000\038\000\078\000\
    \078\000\053\000\055\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\000\000\052\000\000\000\
    \000\000\048\000\054\000\063\000\255\255\057\000\255\255\079\000\
    \054\000\055\000\080\000\079\000\063\000\000\000\038\000\055\000\
    \079\000\000\000\055\000\080\000\079\000\000\000\000\000\000\000\
    \055\000\000\000\000\000\058\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\000\000\057\000\000\000\079\000\
    \054\000\000\000\080\000\079\000\000\000\000\000\255\255\055\000\
    \079\000\255\255\000\000\080\000\079\000\000\000\000\000\000\000\
    \055\000\000\000\000\000\058\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\144\000\
    \000\000\000\000\000\000\000\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\000\000\032\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\046\000\
    \122\000\000\000\000\000\149\000\047\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \041\000\000\000\000\000\000\000\032\000\000\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\255\255\000\000\255\255\000\000\045\000\000\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\000\000\255\255\000\000\154\000\
    \255\255\255\255\000\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\255\255\050\000\153\000\
    \000\000\045\000\000\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\255\255\000\000\000\000\
    \083\000\000\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\048\000\048\000\000\000\051\000\069\000\084\000\
    \069\000\148\000\082\000\000\000\082\000\000\000\069\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\053\000\000\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\000\000\069\000\084\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
    \054\000\000\000\255\255\000\000\000\000\255\255\000\000\080\000\
    \000\000\000\000\000\000\000\000\073\000\000\000\073\000\052\000\
    \080\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\144\000\000\000\000\000\000\000\000\000\
    \054\000\000\000\000\000\000\000\142\000\143\000\000\000\080\000\
    \142\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
    \080\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\142\000\000\000\141\000\000\000\000\000\
    \000\000\000\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\074\000\074\000\074\000\074\000\074\000\074\000\000\000\
    \000\000\000\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\000\000\000\000\000\000\152\000\255\255\255\255\
    \000\000\074\000\074\000\074\000\074\000\074\000\074\000\000\000\
    \000\000\062\000\000\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\000\000\000\000\000\000\000\000\000\000\063\000\
    \000\000\000\000\000\000\061\000\071\000\000\000\071\000\000\000\
    \063\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\255\255\060\000\060\000\060\000\060\000\
    \060\000\060\000\000\000\000\000\000\000\000\000\000\000\063\000\
    \000\000\000\000\000\000\061\000\000\000\000\000\000\000\000\000\
    \063\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\064\000\000\000\000\000\000\000\000\000\000\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\255\255\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
    \000\000\064\000\000\000\068\000\000\000\068\000\000\000\066\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\069\000\000\000\069\000\000\000\
    \000\000\000\000\000\000\000\000\069\000\000\000\069\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\000\000\000\000\000\000\069\000\000\000\069\000\000\000\
    \000\000\000\000\000\000\000\000\069\000\000\000\069\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\069\000\000\000\069\000\000\000\000\000\
    \000\000\000\000\000\000\069\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\069\000\000\000\069\000\000\000\000\000\
    \077\000\000\000\077\000\069\000\075\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\075\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\069\000\000\000\069\000\000\000\000\000\000\000\000\000\
    \000\000\069\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\069\000\000\000\
    \069\000\069\000\000\000\069\000\000\000\090\000\069\000\090\000\
    \000\000\069\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\069\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
    \069\000\086\000\069\000\000\000\088\000\000\000\088\000\000\000\
    \069\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\000\000\000\000\000\000\
    \069\000\086\000\069\000\000\000\000\000\000\000\000\000\069\000\
    \069\000\069\000\000\000\000\000\000\000\000\000\000\000\069\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\000\000\000\000\000\000\069\000\
    \000\000\069\000\000\000\000\000\000\000\000\000\069\000\069\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\000\000\000\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\000\000\069\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\069\000\
    \093\000\069\000\000\000\095\000\000\000\095\000\000\000\069\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\000\000\000\000\000\000\069\000\
    \093\000\069\000\000\000\000\000\000\000\000\000\069\000\069\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\124\000\134\000\135\000\000\000\069\000\124\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \000\000\000\000\134\000\000\000\000\000\000\000\000\000\124\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
    \133\000\133\000\133\000\133\000\000\000\000\000\000\000\000\000\
    \126\000\000\000\000\000\000\000\124\000\000\000\000\000\000\000\
    \000\000\124\000\124\000\000\000\000\000\000\000\124\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\124\000\000\000\
    \000\000\000\000\124\000\000\000\124\000\000\000\124\000\000\000\
    \126\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\000\000\000\000\000\000\132\000\000\000\
    \000\000\000\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\127\000\127\000\127\000\127\000\127\000\127\000\000\000\
    \000\000\000\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\127\000\127\000\127\000\127\000\127\000\127\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\005\000\010\000\010\000\013\000\015\000\020\000\021\000\
    \022\000\015\000\023\000\025\000\027\000\024\000\028\000\029\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\024\000\023\000\024\000\024\000\035\000\055\000\
    \036\000\057\000\057\000\091\000\027\000\036\000\021\000\097\000\
    \055\000\101\000\040\000\030\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\038\000\
    \102\000\103\000\038\000\038\000\105\000\108\000\132\000\055\000\
    \136\000\137\000\030\000\063\000\120\000\153\000\255\255\255\255\
    \055\000\030\000\255\255\255\255\063\000\035\000\038\000\078\000\
    \078\000\031\000\030\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\255\255\027\000\255\255\
    \255\255\029\000\030\000\063\000\048\000\031\000\052\000\079\000\
    \031\000\030\000\080\000\078\000\063\000\255\255\038\000\031\000\
    \079\000\255\255\030\000\080\000\078\000\255\255\255\255\255\255\
    \031\000\255\255\255\255\031\000\125\000\125\000\125\000\125\000\
    \125\000\125\000\125\000\125\000\255\255\031\000\255\255\079\000\
    \031\000\255\255\080\000\078\000\255\255\255\255\141\000\031\000\
    \079\000\141\000\255\255\080\000\078\000\255\255\255\255\255\255\
    \031\000\255\255\255\255\031\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\255\255\141\000\
    \255\255\255\255\255\255\255\255\255\255\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\255\255\
    \255\255\255\255\255\255\032\000\255\255\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\033\000\
    \120\000\255\255\255\255\146\000\033\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\255\255\
    \255\255\255\255\027\000\255\255\255\255\029\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \040\000\255\255\255\255\255\255\033\000\255\255\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\048\000\255\255\052\000\255\255\034\000\255\255\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\255\255\141\000\255\255\150\000\
    \047\000\049\000\255\255\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\047\000\049\000\150\000\
    \255\255\045\000\255\255\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\046\000\255\255\255\255\
    \053\000\255\255\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\047\000\049\000\255\255\046\000\053\000\053\000\
    \053\000\146\000\054\000\255\255\054\000\255\255\053\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\056\000\255\255\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\255\255\053\000\053\000\
    \053\000\255\255\255\255\255\255\255\255\255\255\053\000\255\255\
    \056\000\255\255\145\000\255\255\255\255\145\000\255\255\056\000\
    \255\255\255\255\255\255\255\255\061\000\255\255\061\000\046\000\
    \056\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\145\000\255\255\255\255\255\255\255\255\
    \056\000\255\255\255\255\255\255\139\000\139\000\255\255\056\000\
    \139\000\255\255\255\255\255\255\255\255\255\255\255\255\058\000\
    \056\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\139\000\255\255\139\000\255\255\255\255\
    \255\255\255\255\058\000\058\000\058\000\058\000\058\000\058\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\059\000\059\000\059\000\059\000\059\000\059\000\255\255\
    \255\255\255\255\058\000\058\000\058\000\058\000\058\000\058\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\255\255\255\255\255\255\150\000\047\000\049\000\
    \255\255\059\000\059\000\059\000\059\000\059\000\059\000\255\255\
    \255\255\060\000\255\255\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\060\000\060\000\060\000\060\000\
    \060\000\060\000\255\255\255\255\255\255\255\255\255\255\060\000\
    \255\255\255\255\255\255\060\000\064\000\255\255\064\000\255\255\
    \060\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\046\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\255\255\255\255\255\255\255\255\255\255\060\000\
    \255\255\255\255\255\255\060\000\255\255\255\255\255\255\255\255\
    \060\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\062\000\062\000\062\000\062\000\062\000\062\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\062\000\255\255\255\255\255\255\255\255\255\255\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\145\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\255\255\255\255\
    \255\255\062\000\255\255\066\000\255\255\066\000\255\255\065\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\255\255\139\000\255\255\255\255\255\255\255\255\
    \065\000\065\000\065\000\065\000\065\000\065\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\065\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\067\000\255\255\067\000\255\255\
    \255\255\255\255\255\255\255\255\067\000\255\255\070\000\255\255\
    \070\000\255\255\255\255\255\255\255\255\255\255\070\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\255\255\255\255\255\255\067\000\255\255\067\000\255\255\
    \255\255\255\255\255\255\255\255\067\000\255\255\070\000\255\255\
    \070\000\255\255\255\255\255\255\255\255\255\255\070\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\072\000\255\255\072\000\255\255\255\255\
    \255\255\255\255\255\255\072\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\074\000\074\000\074\000\
    \074\000\074\000\074\000\072\000\255\255\072\000\255\255\255\255\
    \075\000\255\255\075\000\072\000\074\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\074\000\074\000\074\000\
    \074\000\074\000\074\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\074\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\076\000\255\255\076\000\255\255\255\255\255\255\255\255\
    \255\255\076\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\081\000\255\255\
    \081\000\076\000\255\255\076\000\255\255\084\000\081\000\084\000\
    \255\255\076\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\081\000\255\255\
    \081\000\255\255\255\255\255\255\255\255\255\255\081\000\255\255\
    \085\000\085\000\085\000\255\255\086\000\255\255\086\000\255\255\
    \085\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\255\255\255\255\255\255\
    \085\000\085\000\085\000\255\255\255\255\255\255\255\255\087\000\
    \085\000\087\000\255\255\255\255\255\255\255\255\255\255\087\000\
    \088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\255\255\255\255\255\255\087\000\
    \255\255\087\000\255\255\255\255\255\255\255\255\089\000\087\000\
    \089\000\255\255\255\255\255\255\255\255\255\255\089\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\255\255\255\255\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\255\255\089\000\255\255\
    \089\000\255\255\255\255\255\255\255\255\255\255\089\000\092\000\
    \092\000\092\000\255\255\093\000\255\255\093\000\255\255\092\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\255\255\255\255\255\255\092\000\
    \092\000\092\000\255\255\255\255\255\255\255\255\094\000\092\000\
    \094\000\255\255\255\255\255\255\255\255\255\255\094\000\095\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\123\000\130\000\130\000\255\255\094\000\123\000\
    \094\000\255\255\255\255\255\255\255\255\255\255\094\000\255\255\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \255\255\255\255\130\000\255\255\255\255\255\255\255\255\123\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
    \133\000\133\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\255\255\255\255\255\255\255\255\
    \123\000\255\255\255\255\255\255\123\000\255\255\255\255\255\255\
    \255\255\123\000\123\000\255\255\255\255\255\255\123\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\123\000\255\255\
    \255\255\255\255\123\000\255\255\123\000\255\255\123\000\255\255\
    \123\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\126\000\255\255\255\255\255\255\130\000\255\255\
    \255\255\255\255\126\000\126\000\126\000\126\000\126\000\126\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\127\000\127\000\127\000\127\000\127\000\127\000\255\255\
    \255\255\255\255\126\000\126\000\126\000\126\000\126\000\126\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\127\000\127\000\127\000\127\000\127\000\127\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\130\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\007\000\010\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\001\000\000\000\000\000\000\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\033\000\255\255\255\255\255\255\000\000\
    \033\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_code =
   "\255\001\255\255\002\255\255\000\002\255\000\001\255";
}

let rec token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 3 (-1); __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 265 "src/kernel_internals/parsing/logic_lexer.mll"
           ( token lexbuf )
# 890 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 266 "src/kernel_internals/parsing/logic_lexer.mll"
         ( update_newline_loc lexbuf; token lexbuf )
# 895 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 267 "src/kernel_internals/parsing/logic_lexer.mll"
                      ( update_newline_loc lexbuf; token lexbuf )
# 900 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 268 "src/kernel_internals/parsing/logic_lexer.mll"
                     ( token lexbuf )
# 905 "src/kernel_internals/parsing/logic_lexer.ml"

  | 4 ->
# 269 "src/kernel_internals/parsing/logic_lexer.mll"
         ( lex_error lexbuf "unexpected block-comment closing" )
# 910 "src/kernel_internals/parsing/logic_lexer.ml"

  | 5 ->
# 270 "src/kernel_internals/parsing/logic_lexer.mll"
         ( if !accept_c_comments_into_acsl_spec
           then comment lexbuf
           else lex_error lexbuf "unexpected block-comment opening"
         )
# 918 "src/kernel_internals/parsing/logic_lexer.ml"

  | 6 ->
# 275 "src/kernel_internals/parsing/logic_lexer.mll"
                       ( bs_identifier lexbuf )
# 923 "src/kernel_internals/parsing/logic_lexer.ml"

  | 7 ->
# 276 "src/kernel_internals/parsing/logic_lexer.mll"
                        ( let s = lexeme lexbuf in identifier s )
# 928 "src/kernel_internals/parsing/logic_lexer.ml"

  | 8 ->
# 278 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( CONSTANT (IntConstant (lexeme lexbuf)) )
# 933 "src/kernel_internals/parsing/logic_lexer.ml"

  | 9 ->
# 279 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( CONSTANT (IntConstant (lexeme lexbuf)) )
# 938 "src/kernel_internals/parsing/logic_lexer.ml"

  | 10 ->
# 280 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( CONSTANT (IntConstant (lexeme lexbuf)) )
# 943 "src/kernel_internals/parsing/logic_lexer.ml"

  | 11 ->
# 281 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( CONSTANT10 (lexeme lexbuf) )
# 948 "src/kernel_internals/parsing/logic_lexer.ml"

  | 12 ->
# 282 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( CONSTANT (IntConstant (lexeme lexbuf)) )
# 953 "src/kernel_internals/parsing/logic_lexer.ml"

  | 13 ->
let
# 283 "src/kernel_internals/parsing/logic_lexer.mll"
                 prelude
# 959 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 283 "src/kernel_internals/parsing/logic_lexer.mll"
                                                                   content
# 964 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) (lexbuf.Lexing.lex_curr_pos + -1) in
# 284 "src/kernel_internals/parsing/logic_lexer.mll"
      (
        let b = Buffer.create 5 in
        Buffer.add_string b prelude;
        let lbf = Lexing.from_string content in
        CONSTANT (IntConstant (chr b lbf ^ "'"))
      )
# 973 "src/kernel_internals/parsing/logic_lexer.ml"

  | 14 ->
# 297 "src/kernel_internals/parsing/logic_lexer.mll"
      ( CONSTANT (FloatConstant (lexeme lexbuf)) )
# 978 "src/kernel_internals/parsing/logic_lexer.ml"

  | 15 ->
let
# 300 "src/kernel_internals/parsing/logic_lexer.mll"
            n
# 984 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -2) in
# 300 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 2;
                              CONSTANT (IntConstant n) )
# 989 "src/kernel_internals/parsing/logic_lexer.ml"

  | 16 ->
let
# 303 "src/kernel_internals/parsing/logic_lexer.mll"
                prelude
# 995 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 303 "src/kernel_internals/parsing/logic_lexer.mll"
                                                                content
# 1000 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) (lexbuf.Lexing.lex_curr_pos + -1) in
# 304 "src/kernel_internals/parsing/logic_lexer.mll"
      ( STRING_LITERAL (prelude.[0] = 'L',content) )
# 1004 "src/kernel_internals/parsing/logic_lexer.ml"

  | 17 ->
# 305 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( hash lexbuf )
# 1009 "src/kernel_internals/parsing/logic_lexer.ml"

  | 18 ->
# 306 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( IMPLIES )
# 1014 "src/kernel_internals/parsing/logic_lexer.ml"

  | 19 ->
# 307 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( IFF )
# 1019 "src/kernel_internals/parsing/logic_lexer.ml"

  | 20 ->
# 308 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( BIMPLIES )
# 1024 "src/kernel_internals/parsing/logic_lexer.ml"

  | 21 ->
# 309 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( BIFF )
# 1029 "src/kernel_internals/parsing/logic_lexer.ml"

  | 22 ->
# 310 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( AND )
# 1034 "src/kernel_internals/parsing/logic_lexer.ml"

  | 23 ->
# 311 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( OR )
# 1039 "src/kernel_internals/parsing/logic_lexer.ml"

  | 24 ->
# 312 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( NOT )
# 1044 "src/kernel_internals/parsing/logic_lexer.ml"

  | 25 ->
# 313 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOLLAR )
# 1049 "src/kernel_internals/parsing/logic_lexer.ml"

  | 26 ->
# 314 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( COMMA )
# 1054 "src/kernel_internals/parsing/logic_lexer.ml"

  | 27 ->
# 315 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( ARROW )
# 1059 "src/kernel_internals/parsing/logic_lexer.ml"

  | 28 ->
# 316 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Test state_stack; QUESTION )
# 1064 "src/kernel_internals/parsing/logic_lexer.ml"

  | 29 ->
# 317 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( SEMICOLON )
# 1069 "src/kernel_internals/parsing/logic_lexer.ml"

  | 30 ->
# 318 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( match get_state() with
                                  Normal  -> COLON
                                | Test -> pop_state(); COLON2
                            )
# 1077 "src/kernel_internals/parsing/logic_lexer.ml"

  | 31 ->
# 322 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( COLONCOLON )
# 1082 "src/kernel_internals/parsing/logic_lexer.ml"

  | 32 ->
# 323 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOT )
# 1087 "src/kernel_internals/parsing/logic_lexer.ml"

  | 33 ->
# 324 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOTDOT )
# 1092 "src/kernel_internals/parsing/logic_lexer.ml"

  | 34 ->
# 325 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOTDOTDOT )
# 1097 "src/kernel_internals/parsing/logic_lexer.ml"

  | 35 ->
# 326 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( MINUS )
# 1102 "src/kernel_internals/parsing/logic_lexer.ml"

  | 36 ->
# 327 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( PLUS )
# 1107 "src/kernel_internals/parsing/logic_lexer.ml"

  | 37 ->
# 328 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( STAR )
# 1112 "src/kernel_internals/parsing/logic_lexer.ml"

  | 38 ->
# 329 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( STARHAT )
# 1117 "src/kernel_internals/parsing/logic_lexer.ml"

  | 39 ->
# 330 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( AMP )
# 1122 "src/kernel_internals/parsing/logic_lexer.ml"

  | 40 ->
# 331 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( HATHAT )
# 1127 "src/kernel_internals/parsing/logic_lexer.ml"

  | 41 ->
# 332 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( HAT )
# 1132 "src/kernel_internals/parsing/logic_lexer.ml"

  | 42 ->
# 333 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( PIPE )
# 1137 "src/kernel_internals/parsing/logic_lexer.ml"

  | 43 ->
# 334 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( TILDE )
# 1142 "src/kernel_internals/parsing/logic_lexer.ml"

  | 44 ->
# 335 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( SLASH )
# 1147 "src/kernel_internals/parsing/logic_lexer.ml"

  | 45 ->
# 336 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( PERCENT )
# 1152 "src/kernel_internals/parsing/logic_lexer.ml"

  | 46 ->
# 337 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( LT )
# 1157 "src/kernel_internals/parsing/logic_lexer.ml"

  | 47 ->
# 338 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( GT )
# 1162 "src/kernel_internals/parsing/logic_lexer.ml"

  | 48 ->
# 339 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( LE )
# 1167 "src/kernel_internals/parsing/logic_lexer.ml"

  | 49 ->
# 340 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( GE )
# 1172 "src/kernel_internals/parsing/logic_lexer.ml"

  | 50 ->
# 341 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( EQ )
# 1177 "src/kernel_internals/parsing/logic_lexer.ml"

  | 51 ->
# 342 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( EQUAL )
# 1182 "src/kernel_internals/parsing/logic_lexer.ml"

  | 52 ->
# 343 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( NE )
# 1187 "src/kernel_internals/parsing/logic_lexer.ml"

  | 53 ->
# 344 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LPAR )
# 1192 "src/kernel_internals/parsing/logic_lexer.ml"

  | 54 ->
# 345 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RPAR )
# 1197 "src/kernel_internals/parsing/logic_lexer.ml"

  | 55 ->
# 346 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LBRACE )
# 1202 "src/kernel_internals/parsing/logic_lexer.ml"

  | 56 ->
# 347 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RBRACE )
# 1207 "src/kernel_internals/parsing/logic_lexer.ml"

  | 57 ->
# 348 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LSQUARE )
# 1212 "src/kernel_internals/parsing/logic_lexer.ml"

  | 58 ->
# 349 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RSQUARE )
# 1217 "src/kernel_internals/parsing/logic_lexer.ml"

  | 59 ->
# 350 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LSQUAREPIPE )
# 1222 "src/kernel_internals/parsing/logic_lexer.ml"

  | 60 ->
# 351 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RSQUAREPIPE )
# 1227 "src/kernel_internals/parsing/logic_lexer.ml"

  | 61 ->
# 352 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( LTCOLON )
# 1232 "src/kernel_internals/parsing/logic_lexer.ml"

  | 62 ->
# 353 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( COLONGT )
# 1237 "src/kernel_internals/parsing/logic_lexer.ml"

  | 63 ->
# 354 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( LTLT )
# 1242 "src/kernel_internals/parsing/logic_lexer.ml"

  | 64 ->
# 355 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( GTGT )
# 1247 "src/kernel_internals/parsing/logic_lexer.ml"

  | 65 ->
let
# 356 "src/kernel_internals/parsing/logic_lexer.mll"
                 c
# 1253 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 356 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( find_utf8 c )
# 1257 "src/kernel_internals/parsing/logic_lexer.ml"

  | 66 ->
# 357 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( EOF )
# 1262 "src/kernel_internals/parsing/logic_lexer.ml"

  | 67 ->
# 358 "src/kernel_internals/parsing/logic_lexer.mll"
        ( lex_error lexbuf ("illegal character " ^ lexeme lexbuf) )
# 1267 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and chr buffer lexbuf =
   __ocaml_lex_chr_rec buffer lexbuf 120
and __ocaml_lex_chr_rec buffer lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 362 "src/kernel_internals/parsing/logic_lexer.mll"
      ( let s = lexeme lexbuf in
        let real_s = String.sub s 2 (String.length s - 2) in
        let rec add_one_char s =
          let l = String.length s in
          if l = 0 then ()
          else
          let h = int_of_digit s.[0] in
          let c,s =
            if l = 1 then (h,"")
            else
              (16*h + int_of_digit s.[1],
               String.sub s 2 (String.length s - 2))
          in
          Buffer.add_char buffer (Char.chr c); add_one_char s
        in add_one_char real_s; chr buffer lexbuf
      )
# 1294 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 379 "src/kernel_internals/parsing/logic_lexer.mll"
      ( let s = lexeme lexbuf in
        let real_s = String.sub s 1 (String.length s - 1) in
        let rec value i s =
          if s = "" then i
          else value (8*i+int_of_digit s.[0])
            (String.sub s 1 (String.length s -1))
        in let c = value 0 real_s in
        Buffer.add_char buffer (Char.chr c); chr buffer lexbuf
      )
# 1307 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 389 "src/kernel_internals/parsing/logic_lexer.mll"
      ( Buffer.add_char buffer
          (match (lexeme lexbuf).[1] with
               'a' -> '\007'
             | 'b' -> '\b'
             | 'f' -> '\012'
             | 'n' -> '\n'
             | 'r' -> '\r'
             | 't' -> '\t'
             | '\'' -> '\''
             | '"' -> '"'
             | '?' -> '?'
             | '\\' -> '\\'
             | _ -> assert false
          ); chr buffer lexbuf)
# 1325 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 403 "src/kernel_internals/parsing/logic_lexer.mll"
        ( Buffer.contents buffer )
# 1330 "src/kernel_internals/parsing/logic_lexer.ml"

  | 4 ->
# 404 "src/kernel_internals/parsing/logic_lexer.mll"
       ( Buffer.add_string buffer (lexeme lexbuf); chr buffer lexbuf )
# 1335 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_chr_rec buffer lexbuf __ocaml_lex_state

and hash lexbuf =
   __ocaml_lex_hash_rec lexbuf 130
and __ocaml_lex_hash_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 407 "src/kernel_internals/parsing/logic_lexer.mll"
        ( update_newline_loc lexbuf; token lexbuf)
# 1347 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 408 "src/kernel_internals/parsing/logic_lexer.mll"
             ( hash lexbuf)
# 1352 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 409 "src/kernel_internals/parsing/logic_lexer.mll"
              ( (* We are seeing a line number. This is the number for the
                   * next line *)
                 let s = Lexing.lexeme lexbuf in
                 let lineno =
                   try
                     int_of_string s
                   with Failure _ ->
                     (* the int is too big. *)
                     Kernel.warning
                       ~source:lexbuf.lex_start_p
                       "Bad line number in preprocessed file: %s"  s;
                     (-1)
                 in
                 update_line_loc lexbuf (lineno - 1);
                  (* A file name may follow *)
		  file lexbuf )
# 1372 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 425 "src/kernel_internals/parsing/logic_lexer.mll"
                ( hash lexbuf )
# 1377 "src/kernel_internals/parsing/logic_lexer.ml"

  | 4 ->
# 426 "src/kernel_internals/parsing/logic_lexer.mll"
            ( endline lexbuf)
# 1382 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_hash_rec lexbuf __ocaml_lex_state

and file lexbuf =
   __ocaml_lex_file_rec lexbuf 139
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 429 "src/kernel_internals/parsing/logic_lexer.mll"
                      ( update_newline_loc lexbuf; token lexbuf)
# 1394 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 430 "src/kernel_internals/parsing/logic_lexer.mll"
                  ( file lexbuf)
# 1399 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 432 "src/kernel_internals/parsing/logic_lexer.mll"
            (
              let n = Lexing.lexeme lexbuf in
              let n1 = String.sub n 1
                ((String.length n) - 2) in
              update_file_loc lexbuf n1;
	      endline lexbuf
            )
# 1410 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 440 "src/kernel_internals/parsing/logic_lexer.mll"
      ( endline lexbuf)
# 1415 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
   __ocaml_lex_endline_rec lexbuf 146
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 443 "src/kernel_internals/parsing/logic_lexer.mll"
                ( update_newline_loc lexbuf; token lexbuf)
# 1427 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 444 "src/kernel_internals/parsing/logic_lexer.mll"
                                ( EOF )
# 1432 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 445 "src/kernel_internals/parsing/logic_lexer.mll"
      ( endline lexbuf)
# 1437 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 150
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 448 "src/kernel_internals/parsing/logic_lexer.mll"
         ( update_newline_loc lexbuf; comment lexbuf)
# 1449 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 449 "src/kernel_internals/parsing/logic_lexer.mll"
         ( token lexbuf)
# 1454 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 450 "src/kernel_internals/parsing/logic_lexer.mll"
         ( lex_error lexbuf "non-terminating block-comment" )
# 1459 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 451 "src/kernel_internals/parsing/logic_lexer.mll"
         ( comment lexbuf)
# 1464 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 453 "src/kernel_internals/parsing/logic_lexer.mll"
 
  let set_initial_location dest_lexbuf src_loc =
    Lexing.(
      dest_lexbuf.lex_curr_p <- 
        { src_loc with
          pos_bol = src_loc.pos_bol - src_loc.pos_cnum;
          pos_cnum = 0; };
    )

  let parse_from_location f (loc, s : Lexing.position * string) =
    let emitwith _ = Logic_utils.exit_kw_c_mode () in
    let output = Kernel.warning ~wkey:Kernel.wkey_annot_error ~emitwith in
    let lb = from_string s in
    set_initial_location lb loc;
    try
      let res = f token lb in
      Some (lb.Lexing.lex_curr_p, res)
    with
      | Failure s -> (* raised by the lexer itself, through [f] *)
          output ~source:lb.lex_curr_p "lexing error: %s" s; None
      | Parsing.Parse_error ->
        output ~source:lb.lex_curr_p "unexpected token '%s'" (Lexing.lexeme lb);
        None
      | Error (_, m) -> output ~source:lb.lex_curr_p "%s" m; None
      | Logic_utils.Not_well_formed (loc, m) ->
        output ~source:(fst loc) "%s" m;
        None
      | Log.FeatureRequest(_,msg) ->
        output ~source:lb.lex_curr_p "unimplemented ACSL feature: %s" msg; None
      | exn ->
        Kernel.fatal ~source:lb.lex_curr_p "Unknown error (%s)"
          (Printexc.to_string exn)

  let lexpr = parse_from_location Logic_parser.lexpr_eof

  let annot = parse_from_location Logic_parser.annot

  let spec = parse_from_location Logic_parser.spec

  let ext_spec lexbuf = try
      accept_c_comments_into_acsl_spec := true ;
      let r = Logic_parser.ext_spec token lexbuf in
      accept_c_comments_into_acsl_spec := false ;
      r
    with exn ->
      accept_c_comments_into_acsl_spec := false ;
      raise exn

  type 'a parse = Lexing.position * string -> (Lexing.position * 'a) option

  let chr lexbuf =
    let buf = Buffer.create 16 in
    chr buf lexbuf

# 1526 "src/kernel_internals/parsing/logic_lexer.ml"
