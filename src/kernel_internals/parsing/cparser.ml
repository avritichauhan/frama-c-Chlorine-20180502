type token =
  | SPEC of (Lexing.position * string)
  | DECL of (Logic_ptree.decl list)
  | CODE_ANNOT of (Logic_ptree.code_annot * Cabs.cabsloc)
  | LOOP_ANNOT of (Logic_ptree.code_annot list * Cabs.cabsloc)
  | ATTRIBUTE_ANNOT of (string * Cabs.cabsloc)
  | CUSTOM_ANNOT of (Logic_ptree.custom_tree  * string * Cabs.cabsloc)
  | IDENT of (string)
  | CST_CHAR of (int64 list * Cabs.cabsloc)
  | CST_WCHAR of (int64 list * Cabs.cabsloc)
  | CST_INT of (string * Cabs.cabsloc)
  | CST_FLOAT of (string * Cabs.cabsloc)
  | NAMED_TYPE of (string)
  | CST_STRING of (int64 list * Cabs.cabsloc)
  | CST_WSTRING of (int64 list * Cabs.cabsloc)
  | EOF
  | BOOL of (Cabs.cabsloc)
  | CHAR of (Cabs.cabsloc)
  | INT of (Cabs.cabsloc)
  | DOUBLE of (Cabs.cabsloc)
  | FLOAT of (Cabs.cabsloc)
  | VOID of (Cabs.cabsloc)
  | INT64 of (Cabs.cabsloc)
  | ENUM of (Cabs.cabsloc)
  | STRUCT of (Cabs.cabsloc)
  | TYPEDEF of (Cabs.cabsloc)
  | UNION of (Cabs.cabsloc)
  | SIGNED of (Cabs.cabsloc)
  | UNSIGNED of (Cabs.cabsloc)
  | LONG of (Cabs.cabsloc)
  | SHORT of (Cabs.cabsloc)
  | VOLATILE of (Cabs.cabsloc)
  | EXTERN of (Cabs.cabsloc)
  | STATIC of (Cabs.cabsloc)
  | CONST of (Cabs.cabsloc)
  | RESTRICT of (Cabs.cabsloc)
  | AUTO of (Cabs.cabsloc)
  | REGISTER of (Cabs.cabsloc)
  | THREAD of (Cabs.cabsloc)
  | SIZEOF of (Cabs.cabsloc)
  | ALIGNOF of (Cabs.cabsloc)
  | EQ
  | PLUS_EQ
  | MINUS_EQ
  | STAR_EQ
  | SLASH_EQ
  | PERCENT_EQ
  | AND_EQ
  | PIPE_EQ
  | CIRC_EQ
  | INF_INF_EQ
  | SUP_SUP_EQ
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS of (Cabs.cabsloc)
  | MINUS of (Cabs.cabsloc)
  | STAR of (Cabs.cabsloc)
  | SLASH
  | PERCENT
  | TILDE of (Cabs.cabsloc)
  | AND of (Cabs.cabsloc)
  | PIPE
  | CIRC
  | EXCLAM of (Cabs.cabsloc)
  | AND_AND of (Cabs.cabsloc)
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS of (Cabs.cabsloc)
  | MINUS_MINUS of (Cabs.cabsloc)
  | RPAREN
  | LPAREN of (Cabs.cabsloc)
  | RBRACE of (Cabs.cabsloc)
  | LBRACE of (Cabs.cabsloc)
  | LBRACKET
  | RBRACKET
  | COLON
  | COLON2
  | SEMICOLON of (Cabs.cabsloc)
  | COMMA
  | ELLIPSIS
  | QUEST
  | BREAK of (Cabs.cabsloc)
  | CONTINUE of (Cabs.cabsloc)
  | GOTO of (Cabs.cabsloc)
  | RETURN of (Cabs.cabsloc)
  | SWITCH of (Cabs.cabsloc)
  | CASE of (Cabs.cabsloc)
  | DEFAULT of (Cabs.cabsloc)
  | WHILE of (Cabs.cabsloc)
  | DO of (Cabs.cabsloc)
  | FOR of (Cabs.cabsloc)
  | IF of (Cabs.cabsloc)
  | TRY of (Cabs.cabsloc)
  | EXCEPT of (Cabs.cabsloc)
  | FINALLY of (Cabs.cabsloc)
  | ELSE
  | ATTRIBUTE of (Cabs.cabsloc)
  | INLINE of (Cabs.cabsloc)
  | ASM of (Cabs.cabsloc)
  | TYPEOF of (Cabs.cabsloc)
  | FUNCTION__ of (Cabs.cabsloc)
  | PRETTY_FUNCTION__ of (Cabs.cabsloc)
  | LABEL__
  | BUILTIN_VA_ARG of (Cabs.cabsloc)
  | BLOCKATTRIBUTE
  | BUILTIN_TYPES_COMPAT of (Cabs.cabsloc)
  | BUILTIN_OFFSETOF of (Cabs.cabsloc)
  | DECLSPEC of (Cabs.cabsloc)
  | MSASM of (string * Cabs.cabsloc)
  | MSATTR of (string * Cabs.cabsloc)
  | PRAGMA_LINE of (string * Cabs.cabsloc)
  | PRAGMA of (Cabs.cabsloc)
  | PRAGMA_EOL
  | LGHOST
  | RGHOST

open Parsing;;
let _ = parse_error;;
# 50 "src/kernel_internals/parsing/cparser.mly"

open Cabs
open Cabshelper
(* This function is used by the parsing engine generated by Ocamlyacc itself,
   and requires a string as argument. *)
let parse_error msg = Errorloc.parse_error "%s" msg

(*
** Expression building
*)
let smooth_expression lst =
  match lst with
    [] -> { expr_loc = cabslu; expr_node = NOTHING }
  | [expr] -> expr
  | _ ->
      let beg_loc = fst (List.hd lst).expr_loc in
      let end_loc = snd (Extlib.last lst).expr_loc in
      { expr_loc = (beg_loc,end_loc); expr_node = COMMA (lst) }

let merge_string (c1,(b1,_)) (c2,(_,e2)) = c1 @ c2, (b1,e2)

(* To be called only inside a grammar rule. *)
let make_expr e =
  { expr_loc = symbol_start_pos (), symbol_end_pos ();
    expr_node = e }

let currentFunctionName = ref "<outside any function>"

exception NoProto

(* Go through all the parameter names and mark them as identifiers *)
let rec findProto = function
    PROTO (d, args, _) when isJUSTBASE d ->
      List.iter (fun (_, (an, _, _, _)) -> !Lexerhack.add_identifier an) args
  | PROTO (d, _, _) -> findProto d
  | PARENTYPE (_, d, _) -> findProto d
  | PTR (_, d) -> findProto d
  | ARRAY (d, _, _) -> findProto d
  | _ -> raise NoProto

and isJUSTBASE = function
    JUSTBASE -> true
  | PARENTYPE (_, d, _) -> isJUSTBASE d
  | _ -> false

let announceFunctionName ((n, decl, _, _):name) =
  !Lexerhack.add_identifier n;
  (* Start a context that includes the parameter names and the whole body.
   * Will pop when we finish parsing the function body *)
  !Lexerhack.push_context ();
  (try findProto decl
   with NoProto ->
     Errorloc.parse_error "Cannot find the prototype in a function definition");
  currentFunctionName := n

let check_funspec_abrupt_clauses fname spec =
  List.iter
    (fun bhv ->
      List.iter
	(function
	| (Cil_types.Normal | Cil_types.Exits),_ -> ()
	| (Cil_types.Breaks | Cil_types.Continues | Cil_types.Returns),
          {Logic_ptree.lexpr_loc = (loc,_)} ->
          Errorloc.parse_error ~source:loc
            "Specification of function %s can only contain ensures or \
                 exits post-conditions" fname)
	bhv.Logic_ptree.b_post_cond)
    spec.Logic_ptree.spec_behavior

let applyPointer (ptspecs: attribute list list) (dt: decl_type)
       : decl_type =
  (* Outer specification first *)
  let rec loop = function
      [] -> dt
    | attrs :: rest -> PTR(attrs, loop rest)
  in
  loop ptspecs

let doDeclaration logic_spec (loc: cabsloc) (specs: spec_elem list) (nl: init_name list)  =
  if isTypedef specs then begin
    (* Tell the lexer about the new type names *)
    List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_type n) nl;
    TYPEDEF ((specs, List.map (fun (n, _) -> n) nl), loc)
  end else
    if nl = [] then
      ONLYTYPEDEF (specs, loc)
    else begin
      (* Tell the lexer about the new variable names *)
      List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_identifier n) nl;
      !Lexerhack.push_context ();
      List.iter
        (fun ((_,t,_,_),_) ->
           try findProto t with NoProto -> ())
        nl;
      let logic_spec =
        match logic_spec with
        | None -> None
        | Some (loc, _ as ls) -> begin
            Extlib.opt_map
              (fun (loc', spec) ->
                 let name =
                   match nl with
                   | [ (n,_,_,_),_ ] -> n
                   | _ -> "unknown function"
                 in
                 check_funspec_abrupt_clauses name spec;
                 (spec, (loc, loc')))
              (Logic_lexer.spec ls)
          end
      in
      !Lexerhack.pop_context ();
      DECDEF (logic_spec, (specs, nl), loc)
    end


let doFunctionDef spec (loc: cabsloc)
                  (lend: cabsloc)
                  (specs: spec_elem list)
                  (n: name)
                  (b: block) : definition =
  let fname = (specs, n) in
  let name = match n with (n,_,_,_) -> n in
  Extlib.may (fun (spec, _) -> check_funspec_abrupt_clauses name spec) spec;
  FUNDEF (spec, fname, b, loc, lend)

let doOldParDecl (names: string list)
                 ((pardefs: name_group list), (isva: bool))
    : single_name list * bool =
  let findOneName n =
    (* Search in pardefs for the definition for this parameter *)
    let rec loopGroups = function
        [] -> ([SpecType Tint], (n, JUSTBASE, [], cabslu))
      | (specs, names) :: restgroups ->
          let rec loopNames = function
              [] -> loopGroups restgroups
            | ((n',_, _, _) as sn) :: _ when n' = n -> (specs, sn)
            | _ :: restnames -> loopNames restnames
          in
          loopNames names
    in
    loopGroups pardefs
  in
  let args = List.map findOneName names in
  (args, isva)

let int64_to_char value =
  if (Int64.compare value (Int64.of_int 255) > 0) ||
    (Int64.compare value Int64.zero < 0) then
    Errorloc.parse_error "integral literal 0x%Lx too big" value
  else
    Char.chr (Int64.to_int value)

(* takes a not-nul-terminated list, and converts it to a string. *)
let intlist_to_string (str: int64 list):string =
  let buffer = Buffer.create (List.length str) in
  let add_char c =
    Buffer.add_char buffer (int64_to_char c)
  in
  List.iter add_char str ;
  Buffer.contents buffer

let fst3 (result, _, _) = result
let trd3 (_, _, result) = result

let fourth4 (_,_,_,result) = result

(*
   transform:  __builtin_offsetof(type, member)
   into     :  (size_t) (&(type * ) 0)->member
 *)

let sizeofType () =
  let findSpecifier name =
    let convert_one_specifier s =
      if s = "int" then Cabs.Tint
      else if s = "unsigned" then Cabs.Tunsigned
      else if s = "long" then Cabs.Tlong
      else if s = "short" then Cabs.Tshort
      else if s = "char" then Cabs.Tchar
      else
        Kernel.fatal
          ~current:true
          "initCIL: cannot find the right specifier for type %s" name
    in
    let add_one_specifier s acc =
      (Cabs.SpecType (convert_one_specifier s)) :: acc
    in
    let specs = Str.split (Str.regexp " +") name in
    List.fold_right add_one_specifier specs []
  in
  findSpecifier Cil.theMachine.Cil.theMachine.Cil_types.size_t


let transformOffsetOf (speclist, dtype) member =
  let mk_expr e = { expr_loc = member.expr_loc; expr_node = e } in
  let rec addPointer = function
    | JUSTBASE ->
	PTR([], JUSTBASE)
    | PARENTYPE (attrs1, dtype, attrs2) ->
	PARENTYPE (attrs1, addPointer dtype, attrs2)
    | ARRAY (dtype, attrs, expr) ->
	ARRAY (addPointer dtype, attrs, expr)
    | PTR (attrs, dtype) ->
	PTR (attrs, addPointer dtype)
    | PROTO (dtype, names, variadic) ->
	PROTO (addPointer dtype, names, variadic)
  in
  let nullType = (speclist, addPointer dtype) in
  let nullExpr = mk_expr (CONSTANT (CONST_INT "0")) in
  let castExpr = mk_expr (CAST (nullType, SINGLE_INIT nullExpr)) in

  let rec replaceBase e =
    let node = match e.expr_node with
      | VARIABLE field ->
	  MEMBEROFPTR (castExpr, field)
      | MEMBEROF (base, field) ->
	  MEMBEROF (replaceBase base, field)
      | INDEX (base, index) ->
	  INDEX (replaceBase base, index)
      | _ ->
	Errorloc.parse_error "malformed offset expression in __builtin_offsetof"
    in { e with expr_node = node }
  in
  let memberExpr = replaceBase member in
  let addrExpr = { memberExpr with expr_node = UNARY (ADDROF, memberExpr)} in
  let sizeofType = sizeofType(), JUSTBASE in
  { addrExpr with expr_node = CAST (sizeofType, SINGLE_INIT addrExpr)}

let no_ghost_stmt s = {stmt_ghost = false ; stmt_node = s}

let no_ghost = List.map no_ghost_stmt

let in_ghost =
  let ghost_me = object
    inherit Cabsvisit.nopCabsVisitor
    method! vstmt s =
      s.stmt_ghost <- true;
      Cil.DoChildren
  end
  in
  List.map
    (fun s -> ignore (Cabsvisit.visitCabsStatement ghost_me s); s)

let in_block l =
  match l with
      [] -> no_ghost_stmt (NOP cabslu)
    | [s] -> s
    | _::_ ->
        no_ghost_stmt (BLOCK ({ blabels = []; battrs = []; bstmts = l},
                              get_statementloc (List.hd l),
                              get_statementloc (Extlib.last l)))

# 380 "src/kernel_internals/parsing/cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  296 (* EQ *);
  297 (* PLUS_EQ *);
  298 (* MINUS_EQ *);
  299 (* STAR_EQ *);
  300 (* SLASH_EQ *);
  301 (* PERCENT_EQ *);
  302 (* AND_EQ *);
  303 (* PIPE_EQ *);
  304 (* CIRC_EQ *);
  305 (* INF_INF_EQ *);
  306 (* SUP_SUP_EQ *);
  307 (* ARROW *);
  308 (* DOT *);
  309 (* EQ_EQ *);
  310 (* EXCLAM_EQ *);
  311 (* INF *);
  312 (* SUP *);
  313 (* INF_EQ *);
  314 (* SUP_EQ *);
  318 (* SLASH *);
  319 (* PERCENT *);
  322 (* PIPE *);
  323 (* CIRC *);
  326 (* PIPE_PIPE *);
  327 (* INF_INF *);
  328 (* SUP_SUP *);
  331 (* RPAREN *);
  335 (* LBRACKET *);
  336 (* RBRACKET *);
  337 (* COLON *);
  338 (* COLON2 *);
  340 (* COMMA *);
  341 (* ELLIPSIS *);
  342 (* QUEST *);
  357 (* ELSE *);
  364 (* LABEL__ *);
  366 (* BLOCKATTRIBUTE *);
  374 (* PRAGMA_EOL *);
  375 (* LGHOST *);
  376 (* RGHOST *);
    0|]

let yytransl_block = [|
  257 (* SPEC *);
  258 (* DECL *);
  259 (* CODE_ANNOT *);
  260 (* LOOP_ANNOT *);
  261 (* ATTRIBUTE_ANNOT *);
  262 (* CUSTOM_ANNOT *);
  263 (* IDENT *);
  264 (* CST_CHAR *);
  265 (* CST_WCHAR *);
  266 (* CST_INT *);
  267 (* CST_FLOAT *);
  268 (* NAMED_TYPE *);
  269 (* CST_STRING *);
  270 (* CST_WSTRING *);
  271 (* BOOL *);
  272 (* CHAR *);
  273 (* INT *);
  274 (* DOUBLE *);
  275 (* FLOAT *);
  276 (* VOID *);
  277 (* INT64 *);
  278 (* ENUM *);
  279 (* STRUCT *);
  280 (* TYPEDEF *);
  281 (* UNION *);
  282 (* SIGNED *);
  283 (* UNSIGNED *);
  284 (* LONG *);
  285 (* SHORT *);
  286 (* VOLATILE *);
  287 (* EXTERN *);
  288 (* STATIC *);
  289 (* CONST *);
  290 (* RESTRICT *);
  291 (* AUTO *);
  292 (* REGISTER *);
  293 (* THREAD *);
  294 (* SIZEOF *);
  295 (* ALIGNOF *);
  315 (* PLUS *);
  316 (* MINUS *);
  317 (* STAR *);
  320 (* TILDE *);
  321 (* AND *);
  324 (* EXCLAM *);
  325 (* AND_AND *);
  329 (* PLUS_PLUS *);
  330 (* MINUS_MINUS *);
  332 (* LPAREN *);
  333 (* RBRACE *);
  334 (* LBRACE *);
  339 (* SEMICOLON *);
  343 (* BREAK *);
  344 (* CONTINUE *);
  345 (* GOTO *);
  346 (* RETURN *);
  347 (* SWITCH *);
  348 (* CASE *);
  349 (* DEFAULT *);
  350 (* WHILE *);
  351 (* DO *);
  352 (* FOR *);
  353 (* IF *);
  354 (* TRY *);
  355 (* EXCEPT *);
  356 (* FINALLY *);
  358 (* ATTRIBUTE *);
  359 (* INLINE *);
  360 (* ASM *);
  361 (* TYPEOF *);
  362 (* FUNCTION__ *);
  363 (* PRETTY_FUNCTION__ *);
  365 (* BUILTIN_VA_ARG *);
  367 (* BUILTIN_TYPES_COMPAT *);
  368 (* BUILTIN_OFFSETOF *);
  369 (* DECLSPEC *);
  370 (* MSASM *);
  371 (* MSATTR *);
  372 (* PRAGMA_LINE *);
  373 (* PRAGMA *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\003\000\051\000\051\000\
\051\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\054\000\054\000\055\000\056\000\056\000\
\057\000\057\000\057\000\057\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\059\000\
\059\000\059\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\062\000\062\000\063\000\063\000\063\000\063\000\064\000\064\000\
\064\000\065\000\065\000\065\000\066\000\066\000\066\000\066\000\
\066\000\067\000\067\000\067\000\068\000\068\000\069\000\069\000\
\070\000\070\000\071\000\071\000\072\000\072\000\073\000\073\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\010\000\008\000\008\000\008\000\
\008\000\008\000\008\000\009\000\075\000\017\000\017\000\018\000\
\018\000\018\000\018\000\076\000\076\000\076\000\012\000\012\000\
\020\000\020\000\060\000\060\000\019\000\019\000\019\000\077\000\
\077\000\021\000\021\000\021\000\022\000\022\000\078\000\015\000\
\015\000\011\000\011\000\013\000\013\000\079\000\079\000\014\000\
\016\000\034\000\080\000\081\000\081\000\035\000\035\000\035\000\
\035\000\035\000\083\000\083\000\085\000\085\000\036\000\036\000\
\037\000\037\000\086\000\086\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\087\000\087\000\092\000\
\093\000\088\000\088\000\030\000\030\000\030\000\030\000\040\000\
\040\000\039\000\039\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\023\000\023\000\098\000\098\000\096\000\
\096\000\097\000\097\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\025\000\025\000\025\000\025\000\025\000\043\000\043\000\
\042\000\042\000\042\000\029\000\029\000\028\000\028\000\041\000\
\100\000\100\000\100\000\044\000\044\000\044\000\044\000\044\000\
\102\000\103\000\104\000\104\000\104\000\027\000\027\000\027\000\
\027\000\026\000\105\000\038\000\038\000\053\000\053\000\053\000\
\106\000\106\000\048\000\049\000\049\000\033\000\033\000\047\000\
\047\000\045\000\045\000\045\000\045\000\046\000\046\000\031\000\
\031\000\032\000\032\000\032\000\032\000\032\000\050\000\050\000\
\050\000\050\000\005\000\005\000\006\000\006\000\006\000\095\000\
\095\000\095\000\095\000\089\000\089\000\101\000\101\000\101\000\
\101\000\101\000\108\000\108\000\099\000\099\000\052\000\052\000\
\052\000\052\000\110\000\110\000\110\000\110\000\110\000\110\000\
\111\000\111\000\111\000\112\000\112\000\113\000\113\000\113\000\
\114\000\114\000\115\000\115\000\115\000\116\000\116\000\116\000\
\116\000\116\000\116\000\116\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\118\000\
\119\000\119\000\119\000\119\000\120\000\120\000\120\000\121\000\
\121\000\121\000\122\000\122\000\122\000\122\000\122\000\123\000\
\123\000\123\000\124\000\124\000\125\000\125\000\126\000\126\000\
\127\000\127\000\128\000\128\000\129\000\129\000\131\000\131\000\
\130\000\109\000\132\000\132\000\133\000\133\000\082\000\107\000\
\007\000\007\000\007\000\090\000\090\000\091\000\091\000\134\000\
\134\000\136\000\136\000\137\000\135\000\135\000\138\000\138\000\
\139\000\139\000\139\000\141\000\141\000\140\000\140\000\000\000\
\000\000"

let yylen = "\002\000\
\001\000\002\000\000\000\002\000\003\000\002\000\002\000\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\005\000\005\000\
\001\000\006\000\004\000\001\000\001\000\001\000\000\000\001\000\
\001\000\001\000\001\000\003\000\001\000\002\000\004\000\006\000\
\006\000\006\000\003\000\003\000\002\000\002\000\006\000\001\000\
\003\000\002\000\001\000\002\000\002\000\002\000\004\000\002\000\
\004\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\001\000\004\000\001\000\003\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\005\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\001\000\
\002\000\002\000\002\000\001\000\001\000\001\000\001\000\003\000\
\001\000\003\000\000\000\001\000\003\000\002\000\001\000\001\000\
\000\000\003\000\004\000\005\000\000\000\001\000\002\000\000\000\
\001\000\000\000\001\000\001\000\003\000\000\000\001\000\003\000\
\003\000\005\000\001\000\000\000\002\000\001\000\003\000\003\000\
\003\000\003\000\000\000\001\000\002\000\004\000\000\000\004\000\
\001\000\003\000\001\000\002\000\001\000\002\000\002\000\001\000\
\003\000\005\000\003\000\004\000\006\000\009\000\004\000\004\000\
\006\000\003\000\002\000\003\000\002\000\002\000\003\000\004\000\
\008\000\007\000\001\000\005\000\004\000\000\000\001\000\001\000\
\001\000\002\000\001\000\003\000\002\000\004\000\003\000\001\000\
\003\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\000\000\
\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\003\000\
\005\000\004\000\006\000\005\000\002\000\005\000\004\000\006\000\
\005\000\002\000\006\000\005\000\007\000\006\000\001\000\004\000\
\004\000\000\000\003\000\002\000\004\000\002\000\001\000\003\000\
\001\000\004\000\002\000\001\000\003\000\001\000\003\000\003\000\
\002\000\004\000\003\000\001\000\004\000\004\000\003\000\004\000\
\001\000\002\000\000\000\002\000\003\000\002\000\002\000\001\000\
\003\000\002\000\005\000\001\000\003\000\000\000\004\000\004\000\
\001\000\003\000\003\000\000\000\001\000\002\000\001\000\003\000\
\001\000\004\000\004\000\004\000\003\000\001\000\000\000\003\000\
\002\000\002\000\002\000\004\000\005\000\003\000\001\000\001\000\
\001\000\001\000\000\000\002\000\000\000\002\000\005\000\004\000\
\002\000\001\000\001\000\000\000\002\000\001\000\001\000\001\000\
\001\000\001\000\004\000\002\000\001\000\002\000\002\000\003\000\
\004\000\001\000\001\000\001\000\003\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\002\000\001\000\002\000\003\000\
\001\000\001\000\001\000\003\000\001\000\001\000\002\000\003\000\
\002\000\003\000\003\000\004\000\001\000\002\000\004\000\002\000\
\004\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\003\000\003\000\003\000\001\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\003\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\006\000\001\000\003\000\
\000\000\001\000\001\000\003\000\000\000\001\000\003\000\003\000\
\000\000\002\000\002\000\001\000\002\000\000\000\003\000\000\000\
\001\000\001\000\003\000\005\000\000\000\003\000\000\000\003\000\
\000\000\002\000\003\000\001\000\003\000\000\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\010\000\058\001\011\000\000\000\
\247\000\222\000\221\000\224\000\228\000\227\000\220\000\226\000\
\000\000\000\000\204\000\000\000\229\000\230\000\225\000\223\000\
\056\001\000\000\206\000\055\001\057\001\207\000\208\000\067\001\
\000\000\000\000\209\000\000\000\000\000\000\000\066\001\082\001\
\000\000\000\000\184\001\001\000\000\000\000\000\000\000\000\000\
\012\000\013\000\000\000\210\000\017\000\000\000\211\000\185\001\
\000\000\205\000\000\000\000\000\000\000\000\000\020\000\021\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\116\000\117\000\118\000\
\000\000\000\000\110\000\006\000\000\000\000\000\000\000\000\000\
\065\001\000\000\000\000\090\001\000\000\087\001\086\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\079\001\101\001\000\000\000\000\091\001\000\000\102\001\
\000\000\120\001\121\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\154\001\009\000\
\000\000\000\000\000\000\002\000\004\000\000\000\197\000\051\001\
\000\000\000\000\000\000\037\001\000\000\000\000\000\000\213\000\
\219\000\147\000\049\001\000\000\217\000\212\000\000\000\199\000\
\000\000\048\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\001\000\000\000\000\076\001\000\000\000\000\
\000\000\078\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\111\000\000\000\000\000\000\000\025\000\104\000\105\000\
\102\000\103\000\112\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\106\000\000\000\027\000\000\000\000\000\
\000\000\000\000\029\000\000\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\089\000\101\000\000\000\000\000\000\000\000\000\110\001\000\000\
\112\001\114\001\115\001\116\001\119\001\117\001\118\001\000\000\
\000\000\000\000\103\001\000\000\080\001\083\001\084\001\098\001\
\000\000\000\000\097\001\105\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\153\001\000\000\007\000\008\000\005\000\074\001\073\001\
\071\001\072\001\000\000\070\001\000\000\000\000\196\000\000\000\
\000\000\000\000\012\001\026\001\215\000\214\000\000\000\000\000\
\054\001\000\000\198\000\000\000\019\000\000\000\000\000\022\001\
\023\001\000\000\000\000\000\000\018\001\052\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\252\000\000\000\000\000\
\000\000\000\000\000\000\000\000\234\000\254\000\000\000\000\000\
\000\000\239\000\000\000\000\000\000\000\000\000\000\000\000\000\
\158\001\000\000\064\001\000\000\000\000\046\000\000\000\048\000\
\050\000\051\000\052\000\055\000\053\000\054\000\056\000\000\000\
\044\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\248\000\115\000\114\000\113\000\038\001\000\000\249\000\
\000\000\000\000\037\000\038\000\000\000\000\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\159\001\088\001\
\000\000\000\000\100\001\085\001\104\001\081\001\093\001\000\000\
\106\001\107\001\000\000\122\001\123\001\124\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\152\001\035\001\
\060\001\201\000\000\000\119\000\203\000\000\000\000\000\000\000\
\000\000\008\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\001\000\000\000\000\025\001\000\000\000\000\000\000\
\000\000\020\001\000\000\007\001\005\001\244\000\075\001\000\000\
\000\000\000\000\003\001\251\000\000\000\000\000\000\000\233\000\
\236\000\000\000\238\000\241\000\000\000\015\000\160\001\016\000\
\000\000\000\000\000\000\000\000\144\000\000\000\028\000\000\000\
\000\000\000\000\000\000\036\000\035\000\137\000\000\000\000\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\060\000\061\000\062\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\139\000\
\156\001\000\000\000\000\096\001\108\001\000\000\000\000\000\000\
\000\000\127\000\000\000\124\000\000\000\000\000\000\000\000\000\
\000\000\015\001\000\000\000\000\000\000\000\000\000\000\000\000\
\062\001\000\000\000\000\000\000\149\000\000\000\000\000\000\000\
\000\000\156\000\053\001\000\000\000\000\018\000\000\000\000\000\
\000\000\040\001\000\000\000\000\021\001\243\000\246\000\000\000\
\000\000\000\001\253\000\235\000\240\000\000\000\000\000\000\000\
\141\000\000\000\058\000\000\000\000\000\000\000\000\000\031\000\
\145\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\
\135\000\120\000\126\000\013\001\000\000\000\000\143\000\009\001\
\014\001\000\000\000\000\016\001\160\000\162\000\157\000\000\000\
\146\000\000\000\193\000\000\000\165\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\187\000\
\000\000\000\000\168\000\000\000\000\000\000\000\000\000\191\000\
\192\000\000\000\000\000\000\000\045\001\000\000\000\000\245\000\
\002\001\000\000\000\000\000\000\040\000\000\000\088\000\150\001\
\134\000\130\000\000\000\000\000\122\000\125\000\027\001\011\001\
\000\000\000\000\000\000\000\000\000\000\163\000\000\000\166\000\
\181\000\182\000\000\000\000\000\179\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\167\000\151\000\153\000\000\000\152\000\000\000\000\000\000\000\
\034\001\031\001\032\001\042\001\044\001\043\001\039\000\032\000\
\033\000\000\000\034\000\042\000\131\000\000\000\010\001\063\001\
\158\000\000\000\164\000\000\000\183\000\180\000\171\000\000\000\
\000\000\178\000\000\000\000\000\000\000\162\001\163\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\132\000\
\184\000\176\000\000\000\000\000\000\000\189\000\000\000\109\000\
\000\000\000\000\175\000\069\001\172\000\000\000\000\000\195\000\
\000\000\000\000\170\000\188\000\000\000\165\001\000\000\000\000\
\000\000\194\000\000\000\177\000\000\000\000\000\000\000\000\000\
\170\001\000\000\000\000\173\000\000\000\000\000\000\000\000\000\
\167\001\000\000\000\000\186\000\000\000\185\000\176\001\000\000\
\171\001\000\000\000\000\000\000\174\001\000\000\174\000\000\000\
\000\000\178\001\000\000\172\001\183\001\000\000\179\001\181\001"

let yydgoto = "\003\000\
\043\000\044\000\045\000\046\000\035\001\202\001\192\002\211\000\
\212\000\107\001\031\002\042\002\137\002\214\000\255\001\127\001\
\215\000\216\000\043\002\044\002\045\002\162\002\172\000\048\000\
\173\000\136\000\160\000\163\000\164\000\049\000\050\000\051\000\
\218\000\139\002\064\002\048\001\205\001\157\000\137\000\138\000\
\088\001\074\001\075\001\215\001\216\001\217\001\148\002\140\000\
\076\001\052\000\131\000\174\000\212\001\108\000\043\001\065\001\
\219\000\220\000\158\002\047\002\221\000\222\000\223\000\224\000\
\225\000\226\000\227\000\228\000\229\000\230\000\231\000\232\000\
\233\000\234\000\249\002\083\000\104\002\048\002\112\002\148\000\
\208\001\089\000\065\002\174\002\175\002\176\002\143\002\001\003\
\234\002\250\002\008\003\144\002\145\002\054\000\055\000\150\000\
\144\000\145\000\070\000\054\002\037\001\062\000\161\000\061\001\
\044\001\069\002\188\000\071\000\235\000\110\000\111\000\002\001\
\003\001\004\001\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\190\001\127\000\236\000\090\001\015\003\025\003\016\003\
\017\003\018\003\037\003\042\003\043\003"

let yysindex = "\188\001\
\232\006\232\006\000\000\204\016\000\000\000\000\000\000\015\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\255\089\255\000\000\116\255\000\000\000\000\000\000\000\000\
\000\000\019\255\000\000\000\000\000\000\000\000\000\000\000\000\
\232\006\029\255\000\000\101\255\149\255\197\255\000\000\000\000\
\190\012\057\002\000\000\000\000\048\001\232\006\231\255\244\008\
\000\000\000\000\019\000\000\000\000\000\220\018\000\000\000\000\
\043\000\000\000\108\000\019\000\054\255\050\017\000\000\000\000\
\116\000\058\000\197\255\000\000\065\000\205\255\120\255\133\011\
\073\000\106\000\133\011\077\000\140\000\000\000\000\000\000\000\
\035\009\019\255\000\000\000\000\086\000\019\255\155\013\249\027\
\000\000\000\000\122\000\000\000\000\000\000\000\000\000\196\025\
\015\026\249\027\249\027\249\027\249\027\249\027\249\027\249\027\
\136\000\000\000\000\000\152\000\231\254\000\000\168\002\000\000\
\107\000\000\000\000\000\026\001\148\000\044\001\023\001\084\001\
\159\000\165\000\174\000\176\000\143\000\243\000\000\000\000\000\
\057\002\057\002\232\006\000\000\000\000\017\001\000\000\000\000\
\209\000\218\000\009\001\000\000\096\255\244\008\244\008\000\000\
\000\000\000\000\000\000\211\000\000\000\000\000\091\255\000\000\
\008\001\000\000\029\001\035\001\050\001\050\017\066\001\049\001\
\069\001\113\001\000\000\073\001\086\000\000\000\116\000\116\000\
\083\001\000\000\133\011\034\000\089\001\133\011\133\011\133\011\
\090\001\100\001\133\011\133\011\107\001\220\018\232\006\231\255\
\000\000\000\000\249\027\112\001\116\001\000\000\000\000\000\000\
\000\000\000\000\000\000\090\026\165\026\240\026\240\026\240\026\
\240\026\240\026\240\026\110\255\059\027\059\027\046\013\123\001\
\133\001\136\001\000\000\000\000\141\001\000\000\041\255\190\255\
\066\001\143\001\000\000\071\003\000\000\183\003\039\001\121\001\
\130\001\010\002\167\001\158\001\177\001\182\001\194\001\150\000\
\000\000\000\000\187\001\200\001\012\002\046\013\000\000\046\013\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\232\001\
\020\002\209\027\000\000\193\001\000\000\000\000\000\000\000\000\
\005\001\019\255\000\000\000\000\110\255\110\255\249\027\249\027\
\249\027\249\027\249\027\249\027\249\027\249\027\249\027\249\027\
\249\027\249\027\249\027\249\027\249\027\249\027\249\027\249\027\
\249\027\000\000\249\027\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\001\000\000\017\001\066\001\000\000\000\024\
\017\001\026\012\000\000\000\000\000\000\000\000\110\255\203\001\
\000\000\242\001\000\000\063\002\000\000\220\018\025\002\000\000\
\000\000\000\000\027\000\171\016\000\000\000\000\240\026\116\000\
\028\002\027\002\073\001\073\001\116\000\000\000\240\026\133\011\
\035\002\045\002\037\002\096\255\000\000\000\000\059\002\065\002\
\133\011\000\000\069\002\072\002\133\011\108\000\078\002\009\001\
\000\000\094\002\000\000\090\002\046\013\000\000\046\013\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\013\
\000\000\000\000\103\002\114\002\125\002\127\002\240\026\220\018\
\220\018\000\000\000\000\000\000\000\000\000\000\130\002\000\000\
\110\255\110\255\000\000\000\000\240\026\240\026\000\000\240\026\
\240\026\240\026\240\026\240\026\240\026\240\026\240\026\240\026\
\240\026\240\026\240\026\240\026\240\026\240\026\240\026\240\026\
\240\026\240\026\240\026\240\026\240\026\240\026\240\026\240\026\
\240\026\240\026\240\026\240\026\240\026\249\027\000\000\000\000\
\169\002\171\002\000\000\000\000\000\000\000\000\000\000\005\001\
\000\000\000\000\167\002\000\000\000\000\000\000\026\001\026\001\
\148\000\148\000\044\001\044\001\044\001\044\001\023\001\023\001\
\084\001\159\000\165\000\174\000\176\000\249\027\000\000\000\000\
\000\000\000\000\030\023\000\000\000\000\066\001\133\255\131\000\
\173\002\000\000\182\000\050\017\174\002\175\002\197\255\027\255\
\220\018\000\000\066\001\193\002\000\000\017\001\180\012\229\003\
\176\002\000\000\049\001\000\000\000\000\000\000\000\000\179\002\
\181\002\073\001\000\000\000\000\240\026\243\254\133\011\000\000\
\000\000\189\002\000\000\000\000\202\002\000\000\000\000\000\000\
\185\002\208\002\209\002\240\026\000\000\075\024\000\000\201\002\
\205\002\219\002\017\001\000\000\000\000\000\000\211\002\224\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\001\
\039\001\121\001\121\001\130\001\130\001\130\001\130\001\010\002\
\010\002\167\001\158\001\177\001\182\001\194\001\231\002\000\000\
\000\000\236\002\236\002\000\000\000\000\023\003\000\000\110\255\
\240\026\000\000\024\003\000\000\067\003\029\003\034\003\000\024\
\038\003\000\000\041\003\017\001\240\026\037\003\017\001\019\255\
\000\000\043\003\211\000\110\255\000\000\027\255\027\255\042\003\
\065\008\000\000\000\000\036\003\044\003\000\000\066\001\046\003\
\053\003\000\000\050\017\240\026\000\000\000\000\000\000\054\003\
\017\001\000\000\000\000\000\000\000\000\236\002\236\002\236\002\
\000\000\030\023\000\000\220\018\220\018\110\255\066\001\000\000\
\000\000\240\026\249\027\059\000\090\000\030\023\000\000\000\024\
\000\000\000\000\000\000\000\000\220\018\240\026\000\000\000\000\
\000\000\100\003\060\003\000\000\000\000\000\000\000\000\131\002\
\000\000\142\005\000\000\000\000\000\000\057\003\063\003\118\000\
\150\024\061\003\240\026\055\003\061\003\019\000\186\255\000\000\
\066\003\027\255\000\000\027\255\070\003\027\255\077\001\000\000\
\000\000\066\001\083\017\089\003\000\000\090\003\086\003\000\000\
\000\000\096\003\109\003\113\003\000\000\248\254\000\000\000\000\
\000\000\000\000\059\000\240\026\000\000\000\000\000\000\000\000\
\240\026\017\001\027\255\117\006\094\003\000\000\030\011\000\000\
\000\000\000\000\240\026\139\003\000\000\152\003\240\026\117\006\
\220\255\117\006\117\006\126\001\234\000\234\000\234\000\160\003\
\000\000\000\000\000\000\005\255\000\000\061\003\117\006\161\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\231\003\000\000\000\000\000\000\159\003\000\000\000\000\
\000\000\005\255\000\000\157\003\000\000\000\000\000\000\117\006\
\240\026\000\000\143\003\061\003\019\000\000\000\000\000\169\003\
\235\003\117\006\005\255\117\006\155\003\182\008\000\000\000\000\
\000\000\000\000\171\003\117\006\019\000\000\000\235\003\000\000\
\235\003\172\003\000\000\000\000\000\000\061\003\174\003\000\000\
\240\026\117\006\000\000\000\000\172\003\000\000\175\003\186\003\
\181\003\000\000\184\003\000\000\193\003\018\004\201\003\199\003\
\000\000\019\255\207\003\000\000\240\026\209\003\220\003\175\003\
\000\000\175\003\250\003\000\000\252\003\000\000\000\000\247\003\
\000\000\240\026\117\006\119\255\000\000\254\003\000\000\110\255\
\246\003\000\000\253\003\000\000\000\000\235\003\000\000\000\000"

let yyrindex = "\000\000\
\081\005\081\005\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\016\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\138\000\176\001\
\000\000\000\000\000\000\000\000\000\000\189\001\000\000\000\000\
\000\000\000\000\138\000\000\000\185\017\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\014\000\000\046\001\007\004\
\110\014\000\000\007\004\212\014\000\000\000\000\000\000\000\000\
\000\000\089\007\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\200\011\112\012\000\000\028\012\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\241\006\000\000\
\079\006\000\000\000\000\180\028\193\017\068\002\206\029\163\001\
\010\004\237\013\252\010\200\006\170\002\187\002\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\092\002\000\000\000\000\
\004\004\000\000\224\255\000\000\000\000\176\001\176\001\000\000\
\000\000\000\000\000\000\164\004\000\000\000\000\185\017\000\000\
\000\000\000\000\014\004\013\004\000\000\000\000\120\000\020\004\
\000\000\219\254\000\000\021\004\000\000\000\000\000\000\000\000\
\000\000\000\000\007\004\138\000\000\000\007\004\007\004\007\004\
\058\015\000\000\007\004\007\004\000\000\000\000\022\004\138\000\
\000\000\000\000\025\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\112\009\198\009\
\075\001\000\000\000\000\028\010\000\000\069\016\248\017\229\018\
\176\019\172\000\030\021\144\021\180\016\026\002\022\022\075\014\
\000\000\000\000\026\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\205\022\022\028\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\186\000\000\000\141\022\138\000\000\000\000\000\
\014\001\088\000\000\000\000\000\000\000\000\000\000\000\025\005\
\000\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\000\000\201\001\023\004\000\000\000\000\000\000\000\000\029\004\
\000\000\000\000\021\004\021\004\000\000\000\000\000\000\007\004\
\152\001\024\004\000\000\000\000\000\000\000\000\000\000\000\000\
\007\004\000\000\000\000\000\000\007\004\138\000\000\000\170\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\159\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\004\000\000\
\000\000\000\000\000\000\000\000\035\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\028\
\000\000\000\000\000\000\000\000\000\000\000\000\217\028\254\028\
\035\029\072\029\225\005\109\029\146\029\183\029\230\029\253\029\
\106\011\159\011\186\014\157\013\003\009\000\000\000\000\000\000\
\000\000\000\000\034\004\000\000\000\000\138\000\185\017\227\024\
\000\000\000\000\107\002\000\000\000\000\148\255\000\000\204\007\
\036\004\000\000\138\000\037\004\000\000\066\255\240\000\056\001\
\000\000\000\000\020\004\000\000\000\000\000\000\000\000\000\000\
\000\000\021\004\000\000\000\000\000\000\138\000\007\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\018\
\118\018\050\019\113\019\239\019\046\020\109\020\172\020\109\001\
\229\020\087\021\201\021\059\017\221\021\061\022\000\000\000\000\
\000\000\104\028\143\028\000\000\000\000\000\000\076\030\000\000\
\000\000\000\000\039\004\000\000\046\025\000\000\000\000\000\000\
\000\000\000\000\000\000\134\027\043\004\000\000\106\023\000\000\
\000\000\000\000\164\004\000\000\000\000\065\003\182\003\000\000\
\036\002\000\000\000\000\041\004\000\000\000\000\017\000\185\017\
\185\017\000\000\000\000\043\004\000\000\000\000\000\000\000\000\
\183\001\000\000\000\000\000\000\000\000\114\010\200\010\000\000\
\000\000\034\004\000\000\000\000\000\000\000\000\237\000\000\000\
\000\000\000\000\000\000\181\023\000\000\034\004\000\000\000\000\
\000\000\000\000\000\000\000\000\036\004\000\000\000\000\000\000\
\000\000\121\025\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\001\000\000\160\015\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\004\000\000\
\000\000\065\003\000\000\065\003\000\000\065\003\000\000\000\000\
\000\000\138\000\102\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\023\000\000\000\000\000\000\000\000\000\000\
\000\000\031\003\065\003\110\001\000\000\000\000\110\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\110\001\
\000\000\110\001\110\001\000\000\049\004\049\004\049\004\000\000\
\000\000\000\000\000\000\044\004\000\000\000\000\110\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\006\000\000\000\000\000\000\000\000\000\000\110\001\
\000\000\000\000\204\002\000\000\000\000\000\000\000\000\000\000\
\000\000\110\001\003\006\110\001\000\000\046\004\000\000\000\000\
\000\000\000\000\000\000\110\001\000\000\000\000\000\000\000\000\
\124\255\051\004\000\000\000\000\000\000\000\000\000\000\000\000\
\046\004\110\001\000\000\000\000\051\004\000\000\042\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\004\191\255\
\000\000\000\000\000\000\000\000\068\004\000\000\000\000\042\001\
\000\000\043\255\000\000\000\000\000\000\000\000\000\000\069\004\
\000\000\000\000\110\001\070\004\000\000\000\000\000\000\000\000\
\179\000\000\000\070\004\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\117\005\030\000\000\000\232\254\200\003\093\000\000\000\
\240\255\228\255\098\253\234\254\031\000\223\253\000\000\244\002\
\053\000\000\000\000\000\000\000\107\254\242\002\052\001\244\255\
\035\000\000\000\125\255\088\004\104\255\216\255\039\000\150\005\
\036\000\242\255\097\254\098\003\201\253\144\255\000\000\006\000\
\218\255\000\000\185\003\019\005\000\000\000\000\172\255\105\255\
\015\000\000\000\180\002\005\000\073\254\239\255\032\000\211\254\
\000\000\000\000\000\000\002\254\025\001\150\001\211\001\226\001\
\017\002\224\001\009\004\017\004\008\004\011\004\048\004\000\000\
\107\003\187\003\063\254\203\255\000\000\000\000\130\003\000\000\
\000\000\193\255\229\253\224\253\226\254\064\255\000\000\000\000\
\228\002\078\255\203\002\000\000\000\000\251\255\142\255\000\000\
\015\003\000\000\210\000\000\000\242\254\238\254\083\254\248\003\
\000\000\064\003\044\005\000\000\229\255\000\000\179\255\211\004\
\045\004\000\000\000\000\000\000\000\000\013\000\172\002\183\002\
\177\002\184\002\193\004\194\004\192\004\195\004\196\004\000\000\
\241\254\000\000\000\000\088\255\000\000\194\002\000\000\000\000\
\191\002\000\000\000\000\188\002\190\002"

let yytablesize = 8098
let yytable = "\068\000\
\068\000\129\000\068\000\166\000\118\002\053\000\053\000\058\001\
\139\000\081\000\003\000\191\001\193\001\109\000\067\001\068\001\
\198\001\197\001\089\001\036\001\139\000\224\001\225\001\204\001\
\107\000\067\002\055\001\203\001\186\000\062\002\058\002\078\000\
\142\002\001\001\119\002\142\000\147\000\053\000\050\001\006\001\
\185\000\032\000\143\000\210\002\251\000\154\000\006\001\134\000\
\069\000\073\000\053\000\076\000\068\000\078\000\115\001\175\001\
\068\000\252\000\213\000\068\000\155\000\141\000\084\000\063\000\
\153\000\058\001\211\002\071\001\064\000\189\000\126\001\107\000\
\059\001\141\000\057\001\133\000\248\000\059\001\082\000\255\002\
\130\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\129\000\129\000\061\000\154\002\253\000\082\000\000\001\063\000\
\184\002\155\000\011\003\187\002\064\000\169\000\063\000\165\002\
\085\000\177\000\034\000\064\000\181\000\178\000\242\000\243\000\
\244\000\245\000\246\000\247\000\063\000\038\000\029\003\039\000\
\056\001\064\000\063\000\068\000\079\000\080\000\059\001\064\000\
\156\000\142\000\142\000\248\002\118\001\073\001\065\000\053\000\
\143\000\143\000\082\000\155\000\082\000\059\001\219\002\217\002\
\059\001\063\002\079\000\080\000\175\001\175\001\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\150\002\066\000\120\002\
\030\001\186\000\117\001\082\000\236\002\049\001\072\000\130\000\
\130\000\067\000\107\000\041\001\226\001\059\001\038\002\053\002\
\086\000\066\002\036\001\001\001\080\002\167\002\036\001\036\001\
\219\001\055\002\103\001\053\000\203\001\071\002\066\000\074\002\
\110\001\075\000\245\002\210\001\204\001\075\002\164\001\040\003\
\203\001\067\000\078\000\116\001\164\001\070\001\161\002\050\002\
\078\001\079\001\080\001\063\000\087\001\083\001\084\001\189\002\
\064\000\066\000\190\002\203\002\009\003\066\000\161\000\110\001\
\087\000\110\001\095\002\074\000\067\000\077\000\161\000\119\001\
\067\000\107\000\194\002\171\001\195\002\108\001\197\002\082\000\
\045\003\168\001\109\001\068\000\068\000\033\002\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\169\001\107\000\196\001\108\001\161\002\108\001\169\001\
\088\000\161\001\191\002\162\001\172\001\173\001\174\001\036\001\
\170\000\107\002\168\000\110\002\036\001\206\001\114\002\066\002\
\066\002\063\000\220\001\134\000\169\001\170\001\064\000\079\000\
\080\000\068\000\227\001\194\001\224\002\050\001\082\000\132\000\
\225\002\192\001\202\000\202\000\047\000\047\000\082\000\059\000\
\153\002\135\000\068\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\110\001\082\000\
\110\001\166\002\248\001\160\002\047\000\036\001\051\002\003\000\
\036\001\110\001\001\001\153\000\036\001\047\000\134\000\036\001\
\146\000\047\000\041\003\036\001\036\001\036\001\214\001\068\000\
\068\000\149\000\228\001\066\002\041\003\066\002\040\002\066\002\
\063\000\159\000\071\001\234\001\072\001\064\000\151\000\237\001\
\239\000\241\000\162\000\108\001\063\000\108\001\036\001\061\001\
\241\001\064\000\242\001\036\001\184\000\165\000\108\001\031\001\
\036\001\041\002\217\000\243\001\066\002\107\000\167\000\061\002\
\036\001\216\002\063\000\249\001\250\001\036\001\175\000\064\000\
\252\001\253\001\179\000\254\001\000\002\005\001\006\001\049\002\
\032\001\187\000\052\002\033\001\034\001\061\001\196\001\032\000\
\134\000\163\002\061\001\061\001\068\002\107\000\164\002\058\001\
\074\000\068\000\179\002\030\001\047\000\047\000\047\000\176\000\
\030\001\007\001\031\001\032\002\001\000\002\000\152\000\073\001\
\036\001\036\001\024\001\036\001\036\001\036\001\036\001\058\001\
\081\002\074\000\237\000\024\001\074\000\074\000\011\001\012\001\
\074\000\159\000\082\000\032\001\025\001\036\001\033\001\034\001\
\249\000\180\000\032\000\156\001\094\001\096\001\036\001\021\001\
\074\000\074\000\046\002\250\000\026\001\105\001\106\001\022\001\
\034\000\086\001\047\000\157\001\074\000\074\000\074\000\023\001\
\074\000\074\000\082\000\038\000\024\001\039\000\074\000\223\002\
\074\000\226\002\227\002\074\000\074\000\180\001\074\000\074\000\
\074\000\074\000\217\000\180\001\036\001\036\001\237\002\189\002\
\036\001\083\002\190\002\254\000\101\002\036\001\091\000\092\000\
\255\000\074\000\089\002\196\001\059\001\031\001\068\000\061\001\
\138\002\059\001\027\001\034\000\074\000\201\001\074\000\242\002\
\049\002\217\000\094\000\217\000\038\001\095\000\038\000\115\002\
\039\000\251\002\206\001\253\002\039\001\059\001\032\001\141\002\
\040\001\033\001\034\001\003\003\077\001\032\000\175\001\036\001\
\036\001\077\001\061\001\036\001\059\001\196\001\047\001\059\001\
\061\001\012\003\061\001\061\001\005\003\140\002\006\003\100\002\
\068\000\196\001\059\001\196\001\068\000\015\001\016\001\017\001\
\018\001\235\002\107\000\111\002\068\000\059\001\008\001\009\001\
\010\001\059\001\051\001\097\001\098\001\099\001\100\001\101\001\
\102\001\105\000\039\003\139\001\140\001\141\001\185\002\235\002\
\173\002\211\001\111\002\068\002\082\000\119\001\180\002\159\000\
\052\001\075\000\013\001\014\001\168\001\053\001\034\000\188\002\
\235\002\046\002\168\001\077\001\054\001\157\002\134\000\155\002\
\156\002\038\000\059\001\039\000\060\001\046\002\046\001\214\002\
\019\001\020\001\075\000\059\001\168\002\075\000\075\000\062\001\
\217\000\075\000\217\000\175\001\175\001\039\001\036\001\082\000\
\063\001\036\001\173\002\217\000\064\001\173\002\039\001\182\002\
\069\001\075\000\075\000\217\000\217\000\077\001\173\002\081\001\
\173\002\173\002\198\002\199\002\200\002\075\000\075\000\075\000\
\082\001\075\000\075\000\142\001\143\001\173\002\218\000\075\000\
\085\001\075\000\091\001\218\000\075\000\075\000\092\001\075\000\
\075\000\075\000\075\000\216\000\243\002\000\003\111\001\215\002\
\144\001\145\001\139\001\190\000\190\000\190\000\173\002\037\001\
\112\001\220\002\075\000\113\001\037\001\108\001\246\002\114\001\
\173\002\120\001\173\002\150\001\151\001\075\000\152\001\075\000\
\228\002\229\002\173\002\139\001\139\001\139\001\004\003\139\001\
\139\001\140\000\001\001\001\001\218\000\139\001\140\000\140\000\
\173\002\140\000\139\001\153\001\139\001\139\001\139\001\154\001\
\139\001\216\000\218\000\218\000\202\000\202\000\218\000\159\000\
\218\000\027\003\218\000\218\000\211\001\038\003\155\001\216\000\
\216\000\059\001\059\001\216\000\032\002\216\000\158\001\216\000\
\216\000\173\002\159\001\041\001\037\001\160\001\206\001\037\001\
\139\001\230\002\231\002\232\002\041\001\164\001\083\000\032\002\
\012\002\013\002\014\002\015\002\015\002\015\002\015\002\015\002\
\015\002\015\002\015\002\015\002\015\002\015\002\015\002\015\002\
\015\002\015\002\163\001\032\002\028\001\029\001\166\001\083\000\
\207\001\004\000\083\000\083\000\209\001\006\000\083\000\057\000\
\146\001\147\001\148\001\149\001\009\000\155\000\082\000\010\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\058\000\
\027\000\028\000\029\000\030\000\031\000\032\000\083\000\083\000\
\016\002\017\002\059\001\213\001\083\000\223\001\083\000\059\001\
\222\001\083\000\083\000\131\001\083\000\083\000\083\000\083\000\
\150\000\018\002\019\002\229\001\184\000\024\002\025\002\231\001\
\131\001\131\001\131\001\131\001\131\001\131\001\159\000\083\000\
\230\001\190\000\190\000\190\000\131\001\131\001\131\001\232\001\
\131\001\131\001\083\000\091\002\083\000\233\001\131\001\217\000\
\217\000\235\001\061\001\131\001\236\001\131\001\131\001\131\001\
\059\001\131\001\238\001\150\000\045\001\046\001\034\000\035\000\
\211\001\037\000\020\002\021\002\022\002\023\002\059\001\059\001\
\239\001\038\000\059\001\039\000\240\001\086\001\254\000\059\001\
\128\000\091\000\092\000\255\000\078\000\061\001\175\001\176\001\
\061\001\131\001\244\001\061\001\245\001\061\001\061\001\179\001\
\180\001\181\001\182\001\177\001\178\001\094\000\211\001\246\001\
\095\000\247\001\183\001\184\001\169\000\251\001\169\000\169\000\
\169\000\149\001\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\169\000\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\169\000\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\169\000\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\169\000\169\000\034\002\149\001\035\002\037\002\015\002\
\056\002\149\001\171\002\149\001\149\001\149\001\076\002\078\002\
\059\002\079\002\060\002\086\002\105\000\151\001\169\000\169\000\
\169\000\084\002\151\001\169\000\169\000\151\001\151\001\169\000\
\169\000\079\000\080\000\070\002\169\000\169\000\085\002\169\000\
\169\000\169\000\087\002\088\002\092\002\096\002\169\000\149\001\
\093\002\184\000\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\169\000\169\000\169\000\169\000\169\000\094\002\097\002\
\151\001\169\000\169\000\169\000\169\000\169\000\169\000\098\002\
\169\000\090\002\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\155\000\169\000\169\000\155\000\155\000\059\001\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\099\002\059\001\103\002\102\002\059\001\105\002\106\002\059\001\
\108\002\059\001\059\001\109\002\113\002\116\002\121\002\146\002\
\050\002\121\001\122\001\155\000\155\000\155\000\147\002\149\002\
\155\000\155\000\152\002\169\002\155\000\155\000\170\002\186\002\
\183\002\155\000\155\000\177\002\155\000\155\000\155\000\123\001\
\124\001\178\002\125\001\155\000\193\002\126\001\196\002\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\204\002\205\002\206\002\155\000\155\000\
\155\000\155\000\155\000\155\000\207\002\155\000\218\002\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\208\002\
\155\000\155\000\155\000\209\002\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\221\002\128\001\129\001\
\130\001\131\001\132\001\133\001\134\001\135\001\136\001\137\001\
\138\001\031\001\222\002\233\002\238\002\239\002\240\002\241\002\
\155\000\155\000\155\000\244\002\247\002\155\000\155\000\248\002\
\254\002\155\000\155\000\002\003\007\003\014\003\155\000\155\000\
\010\003\155\000\032\001\155\000\019\003\033\001\034\001\020\003\
\155\000\032\000\021\003\022\003\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\023\003\024\003\026\003\155\000\155\000\155\000\155\000\155\000\
\155\000\028\003\155\000\030\003\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\031\003\068\001\155\000\068\001\068\001\
\073\002\141\001\068\001\068\001\068\001\068\001\068\001\068\001\
\068\001\068\001\001\002\002\002\003\002\004\002\005\002\006\002\
\007\002\008\002\009\002\010\002\011\002\034\003\035\003\036\003\
\044\003\046\003\034\000\141\001\141\001\040\003\141\001\141\001\
\003\000\068\001\068\001\250\000\141\001\038\000\200\000\039\000\
\028\001\141\001\054\001\141\001\141\001\141\001\019\001\141\001\
\138\000\023\000\003\000\157\001\155\001\047\001\068\001\068\001\
\068\001\024\000\255\000\068\001\068\001\136\000\123\000\068\001\
\068\001\030\001\053\001\121\000\068\001\068\001\056\000\068\001\
\154\000\068\001\142\000\033\001\161\001\166\001\068\001\141\001\
\138\000\173\001\068\001\068\001\068\001\068\001\068\001\068\001\
\068\001\068\001\068\001\068\001\068\001\068\001\138\000\177\001\
\182\001\212\002\057\002\068\001\213\002\068\001\068\001\221\001\
\068\001\060\000\068\001\068\001\117\002\068\001\082\002\042\001\
\026\002\028\002\068\001\154\000\159\000\029\002\159\000\159\000\
\159\000\027\002\159\000\159\000\159\000\159\000\159\000\159\000\
\159\000\159\000\159\000\159\000\159\000\159\000\159\000\159\000\
\159\000\159\000\159\000\159\000\159\000\159\000\159\000\159\000\
\159\000\159\000\159\000\159\000\159\000\159\000\159\000\159\000\
\159\000\159\000\159\000\030\002\159\002\151\002\252\002\013\003\
\066\001\201\002\077\002\167\001\036\002\185\001\187\001\186\001\
\033\003\032\003\188\001\000\000\189\001\000\000\159\000\159\000\
\159\000\000\000\000\000\159\000\159\000\000\000\047\003\159\000\
\159\000\000\000\000\000\048\003\159\000\159\000\000\000\159\000\
\159\000\159\000\000\000\000\000\000\000\000\000\159\000\000\000\
\000\000\000\000\159\000\159\000\159\000\159\000\159\000\159\000\
\159\000\159\000\159\000\159\000\159\000\159\000\000\000\000\000\
\000\000\159\000\159\000\159\000\159\000\159\000\159\000\000\000\
\159\000\159\000\159\000\159\000\159\000\159\000\159\000\159\000\
\159\000\148\000\159\000\148\000\148\000\148\000\000\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\148\000\148\000\148\000\000\000\000\000\
\148\000\148\000\000\000\000\000\148\000\148\000\000\000\000\000\
\000\000\148\000\148\000\000\000\148\000\148\000\148\000\000\000\
\000\000\000\000\000\000\148\000\000\000\000\000\000\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
\148\000\148\000\148\000\000\000\000\000\000\000\148\000\148\000\
\148\000\148\000\148\000\148\000\000\000\148\000\000\000\148\000\
\148\000\148\000\148\000\148\000\148\000\148\000\172\002\148\000\
\062\002\123\002\006\000\000\000\039\002\191\000\192\000\193\000\
\194\000\124\002\078\000\195\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\058\000\027\000\028\000\029\000\
\030\000\031\000\032\000\196\000\197\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\199\000\200\000\000\000\000\000\201\000\202\000\000\000\
\000\000\203\000\204\000\000\000\000\000\000\000\205\000\206\000\
\000\000\207\000\000\000\146\000\000\000\000\000\000\000\000\000\
\125\002\000\000\000\000\000\000\126\002\127\002\128\002\129\002\
\130\002\131\002\132\002\000\000\000\000\000\000\133\002\134\002\
\000\000\000\000\000\000\034\000\035\000\135\002\037\000\079\000\
\080\000\000\000\208\000\000\000\209\000\210\000\038\000\136\002\
\039\000\000\000\000\000\068\001\063\002\068\001\068\001\000\000\
\132\001\068\001\068\001\068\001\068\001\068\001\068\001\068\001\
\068\001\000\000\000\000\000\000\000\000\132\001\132\001\132\001\
\132\001\132\001\132\001\000\000\000\000\000\000\000\000\000\000\
\000\000\132\001\132\001\132\001\000\000\132\001\132\001\000\000\
\068\001\068\001\000\000\132\001\000\000\000\000\000\000\000\000\
\132\001\000\000\132\001\132\001\132\001\000\000\132\001\000\000\
\000\000\000\000\000\000\000\000\000\000\068\001\068\001\068\001\
\000\000\000\000\068\001\068\001\000\000\000\000\068\001\068\001\
\000\000\000\000\000\000\068\001\068\001\000\000\068\001\000\000\
\068\001\000\000\000\000\000\000\000\000\068\001\132\001\000\000\
\000\000\068\001\068\001\068\001\068\001\068\001\068\001\068\001\
\068\001\068\001\068\001\068\001\068\001\000\000\000\000\000\000\
\000\000\000\000\068\001\000\000\068\001\068\001\000\000\068\001\
\000\000\068\001\068\001\000\000\068\001\172\002\109\001\062\002\
\123\002\068\001\000\000\039\002\191\000\192\000\193\000\194\000\
\064\000\078\000\195\000\109\001\109\001\109\001\109\001\109\001\
\109\001\109\001\109\001\109\001\109\001\109\001\000\000\109\001\
\109\001\109\001\000\000\109\001\109\001\109\001\109\001\000\000\
\000\000\109\001\196\000\197\000\000\000\000\000\109\001\000\000\
\109\001\109\001\109\001\000\000\109\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\000\
\199\000\200\000\000\000\000\000\201\000\202\000\000\000\000\000\
\203\000\204\000\000\000\000\000\000\000\205\000\206\000\000\000\
\207\000\000\000\146\000\000\000\109\001\000\000\000\000\125\002\
\000\000\000\000\000\000\126\002\127\002\128\002\129\002\130\002\
\131\002\132\002\000\000\000\000\000\000\133\002\134\002\000\000\
\000\000\000\000\000\000\000\000\135\002\000\000\079\000\080\000\
\000\000\208\000\000\000\209\000\210\000\000\000\136\002\000\000\
\004\000\005\000\000\000\063\002\006\000\007\000\008\000\147\001\
\000\000\000\000\000\000\009\000\000\000\000\000\010\000\011\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\147\001\000\000\000\000\
\000\000\000\000\147\001\000\000\000\000\000\000\000\000\147\001\
\099\001\147\001\147\001\147\001\000\000\147\001\000\000\000\000\
\000\000\000\000\000\000\099\001\099\001\099\001\099\001\099\001\
\099\001\099\001\099\001\099\001\099\001\099\001\099\001\099\001\
\000\000\099\001\099\001\099\001\000\000\099\001\099\001\099\001\
\099\001\000\000\033\000\099\001\000\000\147\001\000\000\099\001\
\099\001\000\000\099\001\099\001\099\001\000\000\099\001\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\035\000\036\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\108\000\039\000\040\000\041\000\108\000\042\000\108\000\
\000\000\000\000\108\000\108\000\108\000\000\000\099\001\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\000\000\000\000\
\108\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\000\000\108\000\108\000\108\000\000\000\108\000\108\000\108\000\
\108\000\000\000\000\000\108\000\108\000\000\000\108\000\108\000\
\108\000\000\000\108\000\108\000\108\000\000\000\108\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\108\000\108\000\
\000\000\108\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\000\000\000\108\000\155\000\000\000\108\000\155\000\
\155\000\000\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\155\000\155\000\
\155\000\000\000\000\000\155\000\155\000\000\000\000\000\155\000\
\155\000\000\000\000\000\000\000\155\000\155\000\000\000\155\000\
\155\000\155\000\000\000\000\000\000\000\000\000\155\000\000\000\
\000\000\000\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\155\000\155\000\155\000\155\000\155\000\000\000\000\000\
\000\000\155\000\155\000\155\000\155\000\155\000\155\000\000\000\
\155\000\000\000\155\000\155\000\155\000\155\000\155\000\155\000\
\155\000\122\002\000\000\000\000\123\002\006\000\000\000\039\002\
\191\000\192\000\193\000\194\000\124\002\078\000\195\000\010\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\058\000\
\027\000\028\000\029\000\030\000\031\000\032\000\196\000\197\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\198\000\199\000\200\000\000\000\000\000\
\201\000\202\000\000\000\000\000\203\000\204\000\000\000\000\000\
\000\000\205\000\206\000\000\000\207\000\000\000\146\000\000\000\
\000\000\000\000\000\000\125\002\000\000\000\000\000\000\126\002\
\127\002\128\002\129\002\130\002\131\002\132\002\000\000\000\000\
\000\000\133\002\134\002\000\000\000\000\000\000\034\000\035\000\
\135\002\037\000\079\000\080\000\000\000\208\000\000\000\209\000\
\210\000\038\000\136\002\039\000\040\000\041\000\182\000\000\000\
\000\000\000\000\006\000\000\000\190\000\191\000\192\000\193\000\
\194\000\009\000\078\000\195\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\058\000\027\000\028\000\029\000\
\030\000\031\000\032\000\196\000\197\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\199\000\200\000\000\000\000\000\201\000\202\000\000\000\
\006\000\203\000\204\000\000\000\000\000\000\000\205\000\206\000\
\000\000\207\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\058\000\027\000\028\000\029\000\030\000\031\000\
\032\000\000\000\000\000\034\000\035\000\000\000\037\000\079\000\
\080\000\000\000\208\000\182\000\209\000\210\000\038\000\006\000\
\039\000\000\000\148\001\000\000\000\000\000\000\009\000\000\000\
\000\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\058\000\027\000\028\000\029\000\030\000\031\000\032\000\
\148\001\000\000\000\000\000\000\000\000\148\001\000\000\000\000\
\000\000\000\000\148\001\000\000\148\001\148\001\148\001\000\000\
\148\001\034\000\035\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\183\000\000\000\000\000\000\000\108\000\000\000\000\000\000\000\
\148\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\037\000\000\000\108\000\000\000\000\000\
\108\000\108\000\000\000\038\000\108\000\039\000\000\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\000\000\
\108\000\108\000\108\000\000\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\000\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\000\000\000\000\
\000\000\000\000\107\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\108\000\000\000\108\000\107\000\000\000\108\000\107\000\107\000\
\000\000\000\000\107\000\000\000\000\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\000\000\107\000\107\000\
\107\000\000\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\000\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\107\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\107\000\000\000\
\107\000\043\000\000\000\107\000\043\000\043\000\000\000\000\000\
\043\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\000\000\043\000\043\000\043\000\000\000\
\043\000\043\000\043\000\043\000\000\000\000\000\043\000\000\000\
\043\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\043\000\047\000\
\000\000\043\000\047\000\047\000\000\000\000\000\047\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\047\000\047\000\047\000\000\000\047\000\047\000\
\047\000\047\000\000\000\000\000\047\000\000\000\047\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\047\000\049\000\000\000\047\000\
\049\000\049\000\000\000\000\000\049\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\049\000\049\000\000\000\049\000\049\000\049\000\049\000\
\000\000\000\000\049\000\000\000\049\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\172\002\000\000\
\000\000\123\002\000\000\145\001\039\002\191\000\192\000\193\000\
\194\000\064\000\078\000\195\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\000\000\000\000\049\000\000\000\000\000\
\145\001\145\001\000\000\196\000\197\000\000\000\145\001\000\000\
\000\000\000\000\000\000\145\001\000\000\145\001\145\001\145\001\
\000\000\145\001\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\199\000\200\000\000\000\000\000\201\000\202\000\000\000\
\000\000\203\000\204\000\000\000\000\000\000\000\205\000\206\000\
\000\000\207\000\000\000\146\000\000\000\000\000\000\000\000\000\
\125\002\145\001\000\000\000\000\126\002\127\002\128\002\129\002\
\130\002\131\002\132\002\000\000\000\000\000\000\133\002\134\002\
\000\000\000\000\000\000\000\000\000\000\135\002\000\000\079\000\
\080\000\006\000\208\000\000\000\209\000\210\000\000\000\136\002\
\009\000\140\001\000\000\010\000\011\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\058\000\027\000\028\000\029\000\030\000\
\031\000\032\000\140\001\140\001\140\001\000\000\140\001\140\001\
\000\000\000\000\000\000\000\000\140\001\000\000\000\000\000\000\
\000\000\140\001\000\000\140\001\140\001\140\001\000\000\140\001\
\000\000\000\000\000\000\000\000\000\000\000\000\142\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\083\001\000\000\
\000\000\083\001\083\001\083\001\083\001\000\000\000\000\171\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\001\
\142\001\142\001\000\000\142\001\142\001\083\001\000\000\000\000\
\083\001\142\001\034\000\035\000\000\000\037\000\142\001\083\001\
\142\001\142\001\142\001\000\000\142\001\038\000\000\000\039\000\
\040\000\041\000\083\001\083\001\083\001\083\001\083\001\083\001\
\083\001\083\001\083\001\083\001\083\001\083\001\083\001\000\000\
\083\001\083\001\083\001\000\000\083\001\083\001\083\001\083\001\
\000\000\000\000\083\001\020\000\142\001\000\000\083\001\083\001\
\000\000\083\001\083\001\083\001\000\000\083\001\031\001\000\000\
\000\000\000\000\084\001\000\000\083\001\084\001\084\001\084\001\
\084\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\001\083\001\000\000\000\000\000\000\000\000\032\001\
\000\000\084\001\033\001\034\001\084\001\083\001\032\000\000\000\
\000\000\000\000\000\000\084\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\001\084\001\
\084\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
\084\001\084\001\084\001\000\000\084\001\084\001\084\001\000\000\
\084\001\084\001\084\001\084\001\000\000\199\001\084\001\021\000\
\200\001\000\000\084\001\084\001\000\000\084\001\084\001\084\001\
\000\000\084\001\000\000\000\000\000\000\000\000\089\001\000\000\
\084\001\089\001\089\001\089\001\089\001\000\000\000\000\034\000\
\000\000\201\001\000\000\000\000\000\000\084\001\084\001\000\000\
\000\000\000\000\038\000\000\000\039\000\089\001\000\000\000\000\
\089\001\084\001\000\000\000\000\000\000\000\000\000\000\089\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\001\089\001\089\001\089\001\089\001\089\001\
\089\001\089\001\089\001\089\001\089\001\089\001\089\001\000\000\
\089\001\089\001\089\001\000\000\089\001\089\001\089\001\089\001\
\031\001\000\000\089\001\000\000\000\000\000\000\089\001\089\001\
\000\000\089\001\089\001\089\001\090\000\089\001\000\000\091\000\
\092\000\093\000\078\000\000\000\089\001\000\000\000\000\000\000\
\000\000\032\001\000\000\000\000\033\001\034\001\000\000\000\000\
\032\000\089\001\089\001\094\000\000\000\000\000\095\000\000\000\
\000\000\000\000\000\000\096\000\097\000\089\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\000\099\000\100\000\000\000\000\000\101\000\102\000\072\002\
\000\000\103\000\200\001\000\000\000\000\000\000\000\000\000\000\
\000\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\105\000\201\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\039\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\106\000\190\000\191\000\192\000\193\000\
\194\000\009\000\078\000\195\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\058\000\027\000\028\000\029\000\
\030\000\031\000\032\000\196\000\197\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\199\000\200\000\000\000\000\000\201\000\202\000\000\000\
\000\000\203\000\204\000\000\000\000\000\000\000\205\000\206\000\
\000\000\207\000\000\000\146\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\035\000\000\000\037\000\079\000\
\080\000\000\000\208\000\000\000\209\000\210\000\038\000\006\000\
\039\000\190\000\191\000\192\000\193\000\194\000\009\000\078\000\
\195\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\058\000\027\000\028\000\029\000\030\000\031\000\032\000\
\196\000\197\000\000\000\000\000\146\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\198\000\199\000\200\000\
\000\000\000\000\201\000\202\000\000\000\000\000\203\000\204\000\
\000\000\146\001\146\001\205\000\206\000\000\000\207\000\146\001\
\000\000\000\000\000\000\000\000\146\001\000\000\146\001\146\001\
\146\001\000\000\146\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\037\000\079\000\080\000\000\000\208\000\
\000\000\209\000\210\000\038\000\242\000\039\000\242\000\000\000\
\000\000\000\000\146\001\242\000\143\001\000\000\242\000\242\000\
\242\000\242\000\242\000\242\000\242\000\242\000\242\000\242\000\
\242\000\242\000\242\000\242\000\242\000\242\000\242\000\242\000\
\242\000\242\000\242\000\242\000\242\000\000\000\143\001\000\000\
\000\000\143\001\143\001\000\000\000\000\000\000\000\000\143\001\
\000\000\000\000\000\000\000\000\143\001\000\000\143\001\143\001\
\143\001\000\000\143\001\000\000\242\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\000\000\000\000\242\000\242\000\000\000\000\000\242\000\000\000\
\242\000\000\000\242\000\242\000\000\000\000\000\000\000\000\000\
\000\000\000\000\143\001\000\000\000\000\000\000\000\000\000\000\
\087\000\000\000\000\000\087\000\087\000\242\000\242\000\087\000\
\242\000\000\000\231\000\000\000\231\000\000\000\000\000\000\000\
\242\000\231\000\242\000\000\000\231\000\231\000\231\000\231\000\
\231\000\231\000\231\000\231\000\231\000\231\000\231\000\231\000\
\231\000\231\000\231\000\231\000\231\000\231\000\231\000\231\000\
\231\000\231\000\231\000\000\000\000\000\087\000\000\000\087\000\
\000\000\000\000\087\000\087\000\000\000\087\000\087\000\087\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\231\000\000\000\000\000\000\000\000\000\000\000\
\087\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\231\000\231\000\000\000\087\000\231\000\087\000\231\000\000\000\
\231\000\231\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\231\000\231\000\000\000\231\000\000\000\
\237\000\000\000\237\000\000\000\000\000\000\000\231\000\237\000\
\231\000\144\001\237\000\237\000\237\000\237\000\237\000\237\000\
\237\000\237\000\237\000\237\000\237\000\237\000\237\000\237\000\
\237\000\237\000\237\000\237\000\237\000\237\000\237\000\237\000\
\237\000\000\000\000\000\144\001\000\000\000\000\144\001\144\001\
\000\000\000\000\000\000\000\000\144\001\000\000\000\000\000\000\
\000\000\144\001\000\000\144\001\144\001\144\001\000\000\144\001\
\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\237\000\237\000\
\000\000\000\000\237\000\000\000\237\000\000\000\237\000\237\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\237\000\237\000\000\000\237\000\000\000\232\000\000\000\
\232\000\000\000\000\000\000\000\237\000\232\000\237\000\000\000\
\232\000\232\000\232\000\232\000\232\000\232\000\232\000\232\000\
\232\000\232\000\232\000\232\000\232\000\232\000\232\000\232\000\
\232\000\232\000\232\000\232\000\232\000\232\000\232\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\232\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\232\000\232\000\000\000\000\000\
\232\000\000\000\232\000\000\000\232\000\232\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\232\000\
\232\000\000\000\232\000\000\000\247\000\000\000\247\000\000\000\
\000\000\000\000\232\000\247\000\232\000\000\000\247\000\247\000\
\247\000\247\000\247\000\247\000\247\000\247\000\247\000\247\000\
\247\000\247\000\247\000\247\000\247\000\247\000\247\000\247\000\
\247\000\247\000\247\000\247\000\247\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\247\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\247\000\000\000\000\000\000\000\000\000\
\021\000\000\000\247\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\247\000\247\000\000\000\
\247\000\000\000\205\000\000\000\205\000\000\000\000\000\000\000\
\247\000\205\000\247\000\000\000\205\000\205\000\205\000\205\000\
\205\000\205\000\205\000\205\000\205\000\205\000\205\000\205\000\
\205\000\205\000\205\000\205\000\205\000\205\000\205\000\205\000\
\205\000\205\000\205\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\205\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\205\000\000\000\000\000\000\000\000\000\000\000\000\000\
\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\000\000\000\000\059\000\059\000\000\000\
\000\000\059\000\000\000\205\000\205\000\000\000\205\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\205\000\000\000\
\205\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\059\000\059\000\059\000\
\000\000\059\000\059\000\059\000\059\000\000\000\000\000\059\000\
\000\000\059\000\000\000\000\000\059\000\059\000\000\000\059\000\
\059\000\059\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\059\000\009\000\059\000\
\081\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\058\000\027\000\028\000\029\000\030\000\031\000\032\000\
\006\000\081\000\057\000\000\000\081\000\081\000\000\000\009\000\
\081\000\000\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\058\000\027\000\028\000\029\000\030\000\031\000\
\032\000\000\000\000\000\000\000\000\000\081\000\158\000\000\000\
\081\000\081\000\000\000\000\000\000\000\000\000\081\000\218\001\
\081\000\000\000\000\000\081\000\081\000\000\000\081\000\081\000\
\081\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\038\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\035\000\000\000\037\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\038\000\009\000\039\000\082\000\
\010\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\058\000\027\000\028\000\029\000\030\000\031\000\032\000\006\000\
\082\000\000\000\000\000\082\000\082\000\000\000\009\000\082\000\
\000\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\058\000\027\000\028\000\029\000\030\000\031\000\032\000\
\000\000\000\000\000\000\000\000\082\000\158\000\000\000\082\000\
\082\000\000\000\000\000\000\000\000\000\082\000\000\000\082\000\
\000\000\000\000\082\000\082\000\000\000\082\000\082\000\082\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\035\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\038\000\000\000\039\000\000\000\000\000\202\002\
\000\000\000\000\000\000\082\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\037\000\000\000\017\001\000\000\000\000\
\000\000\000\000\000\000\038\000\017\001\039\000\000\000\017\001\
\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\
\017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\
\017\001\017\001\017\001\017\001\017\001\017\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\001\128\001\128\001\
\128\001\128\001\128\001\000\000\063\000\000\000\000\000\000\000\
\000\000\128\001\128\001\128\001\017\001\128\001\128\001\128\001\
\128\001\000\000\000\000\128\001\000\000\000\000\000\000\000\000\
\128\001\000\000\128\001\128\001\128\001\063\000\128\001\000\000\
\063\000\063\000\000\000\000\000\063\000\000\000\017\001\017\001\
\000\000\017\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\001\000\000\017\001\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\000\000\000\000\128\001\000\000\
\063\000\063\000\063\000\064\000\063\000\063\000\063\000\063\000\
\000\000\000\000\063\000\000\000\063\000\000\000\000\000\063\000\
\063\000\000\000\063\000\063\000\063\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\000\000\000\000\064\000\
\064\000\000\000\000\000\064\000\000\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\063\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\000\000\000\000\000\000\000\000\064\000\
\064\000\064\000\065\000\064\000\064\000\064\000\064\000\000\000\
\000\000\064\000\000\000\064\000\000\000\000\000\064\000\064\000\
\000\000\064\000\064\000\064\000\064\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\000\000\000\000\065\000\065\000\
\000\000\000\000\065\000\000\000\064\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\064\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\000\000\000\000\000\000\000\000\065\000\065\000\
\065\000\000\000\065\000\065\000\065\000\065\000\000\000\000\000\
\065\000\000\000\065\000\000\000\000\000\065\000\065\000\000\000\
\065\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\065\000\009\000\
\065\000\066\000\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\058\000\027\000\028\000\029\000\030\000\031\000\
\032\000\000\000\066\000\000\000\000\000\066\000\066\000\000\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\066\000\066\000\
\000\000\066\000\066\000\066\000\066\000\000\000\000\000\066\000\
\000\000\066\000\000\000\000\000\066\000\066\000\067\000\066\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\035\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\066\000\000\000\038\000\000\000\039\000\067\000\
\000\000\000\000\067\000\067\000\000\000\066\000\067\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\067\000\
\067\000\067\000\067\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\067\000\067\000\068\000\067\000\067\000\
\067\000\067\000\000\000\000\000\067\000\000\000\067\000\000\000\
\000\000\067\000\067\000\000\000\067\000\067\000\067\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\000\000\068\000\068\000\000\000\000\000\068\000\000\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\000\000\067\000\068\000\068\000\068\000\
\068\000\068\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\068\000\068\000\069\000\068\000\068\000\068\000\
\068\000\000\000\000\000\068\000\000\000\068\000\000\000\000\000\
\068\000\068\000\000\000\068\000\068\000\068\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\069\000\069\000\000\000\000\000\069\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\000\000\068\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\069\000\069\000\070\000\069\000\069\000\000\000\000\000\
\000\000\000\000\069\000\000\000\069\000\000\000\000\000\069\000\
\069\000\000\000\069\000\069\000\069\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\000\000\000\000\070\000\
\070\000\000\000\000\000\070\000\000\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\069\000\070\000\070\000\070\000\070\000\070\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\070\000\070\000\071\000\070\000\070\000\000\000\000\000\000\000\
\000\000\070\000\000\000\070\000\000\000\000\000\070\000\070\000\
\000\000\070\000\070\000\070\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\000\000\071\000\071\000\
\000\000\000\000\071\000\000\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\000\000\070\000\071\000\071\000\071\000\071\000\071\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\071\000\
\071\000\072\000\071\000\071\000\000\000\000\000\000\000\000\000\
\071\000\000\000\071\000\000\000\000\000\071\000\071\000\000\000\
\071\000\071\000\071\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\000\000\072\000\072\000\000\000\
\000\000\072\000\000\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\071\000\072\000\072\000\072\000\072\000\072\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\072\000\072\000\
\073\000\072\000\072\000\000\000\000\000\000\000\000\000\072\000\
\000\000\072\000\000\000\000\000\072\000\072\000\000\000\072\000\
\072\000\072\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\000\000\000\000\073\000\073\000\000\000\000\000\
\073\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\072\000\
\073\000\073\000\073\000\073\000\073\000\073\000\000\000\000\000\
\000\000\076\000\000\000\000\000\073\000\073\000\073\000\000\000\
\073\000\073\000\000\000\000\000\000\000\000\000\073\000\000\000\
\073\000\000\000\000\000\073\000\073\000\000\000\073\000\073\000\
\073\000\073\000\076\000\000\000\000\000\076\000\076\000\000\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\076\000\000\000\073\000\000\000\073\000\000\000\
\000\000\000\000\077\000\000\000\000\000\076\000\076\000\076\000\
\000\000\076\000\076\000\000\000\000\000\000\000\000\000\076\000\
\000\000\076\000\000\000\000\000\076\000\076\000\000\000\076\000\
\076\000\076\000\076\000\077\000\000\000\000\000\077\000\077\000\
\000\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\000\000\000\076\000\
\000\000\000\000\000\000\078\000\000\000\000\000\077\000\077\000\
\077\000\000\000\077\000\077\000\000\000\000\000\000\000\000\000\
\077\000\000\000\077\000\000\000\000\000\077\000\077\000\000\000\
\077\000\077\000\077\000\077\000\078\000\000\000\000\000\078\000\
\078\000\000\000\000\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\000\
\077\000\000\000\000\000\000\000\079\000\000\000\000\000\078\000\
\078\000\078\000\000\000\078\000\078\000\000\000\000\000\000\000\
\000\000\078\000\000\000\078\000\000\000\000\000\078\000\078\000\
\000\000\078\000\078\000\078\000\078\000\079\000\000\000\000\000\
\079\000\079\000\000\000\000\000\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
\000\000\078\000\000\000\000\000\000\000\080\000\000\000\000\000\
\000\000\079\000\079\000\000\000\079\000\079\000\000\000\000\000\
\000\000\000\000\079\000\000\000\079\000\000\000\000\000\079\000\
\079\000\084\000\079\000\079\000\079\000\079\000\080\000\000\000\
\000\000\080\000\080\000\000\000\000\000\080\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\079\000\000\000\000\000\
\000\000\000\000\084\000\000\000\000\000\084\000\084\000\000\000\
\079\000\084\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\080\000\080\000\000\000\080\000\080\000\000\000\
\000\000\000\000\000\000\080\000\000\000\080\000\000\000\000\000\
\080\000\080\000\085\000\080\000\080\000\080\000\080\000\000\000\
\000\000\084\000\084\000\000\000\000\000\000\000\000\000\084\000\
\000\000\084\000\000\000\000\000\084\000\084\000\080\000\084\000\
\084\000\084\000\084\000\085\000\000\000\000\000\085\000\085\000\
\000\000\080\000\085\000\080\000\000\000\000\000\000\000\000\000\
\000\000\086\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\000\000\000\084\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\085\000\000\000\086\000\086\000\000\000\
\085\000\086\000\085\000\000\000\000\000\085\000\085\000\000\000\
\085\000\085\000\085\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\000\000\000\000\000\000\085\000\086\000\
\085\000\086\000\000\000\000\000\086\000\086\000\000\000\086\000\
\086\000\086\000\086\000\059\001\059\001\059\001\059\001\059\001\
\059\001\059\001\059\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\001\086\000\000\000\086\000\
\000\000\000\000\059\001\059\001\059\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\001\
\059\001\059\001\000\000\000\000\059\001\059\001\000\000\000\000\
\059\001\059\001\000\000\000\000\000\000\059\001\059\001\059\001\
\059\001\092\001\059\001\059\001\059\001\059\001\000\000\059\001\
\059\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\092\001\000\000\059\001\059\001\
\000\000\059\001\000\000\059\001\059\001\000\000\000\000\092\001\
\092\001\092\001\092\001\092\001\092\001\092\001\092\001\092\001\
\092\001\092\001\092\001\092\001\000\000\092\001\092\001\092\001\
\000\000\092\001\092\001\092\001\092\001\000\000\000\000\092\001\
\000\000\000\000\000\000\092\001\092\001\000\000\092\001\092\001\
\092\001\000\000\092\001\000\000\039\002\191\000\192\000\193\000\
\194\000\064\000\078\000\195\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\092\001\092\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\092\001\196\000\197\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\002\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\199\000\200\000\000\000\000\000\201\000\202\000\000\000\
\000\000\203\000\204\000\000\000\000\000\000\000\205\000\206\000\
\000\000\207\000\000\000\195\001\041\002\000\000\000\000\000\000\
\059\001\059\001\059\001\059\001\059\001\000\000\059\001\059\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\080\000\059\001\208\000\000\000\209\000\210\000\000\000\059\001\
\059\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\001\059\001\059\001\000\000\
\000\000\059\001\059\001\000\000\000\000\059\001\059\001\000\000\
\000\000\000\000\059\001\059\001\000\000\059\001\000\000\000\000\
\000\000\059\001\000\000\133\000\133\000\133\000\133\000\133\000\
\000\000\133\000\133\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\001\059\001\000\000\059\001\000\000\
\059\001\059\001\133\000\133\000\133\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\
\133\000\133\000\000\000\000\000\133\000\133\000\000\000\000\000\
\133\000\133\000\000\000\000\000\000\000\133\000\133\000\000\000\
\133\000\000\000\133\000\000\000\000\000\000\000\190\000\191\000\
\192\000\193\000\194\000\000\000\078\000\195\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\133\000\
\000\000\133\000\000\000\133\000\133\000\196\000\197\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\198\000\199\000\200\000\000\000\000\000\201\000\
\202\000\000\000\000\000\203\000\204\000\000\000\000\000\000\000\
\205\000\206\000\000\000\207\000\000\000\195\001\000\000\000\000\
\000\000\190\000\191\000\192\000\193\000\194\000\000\000\078\000\
\195\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\079\000\080\000\000\000\208\000\000\000\209\000\210\000\
\196\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\198\000\199\000\200\000\
\000\000\000\000\201\000\202\000\000\000\000\000\203\000\204\000\
\000\000\000\000\000\000\205\000\206\000\000\000\207\000\000\000\
\090\002\000\000\000\000\000\000\190\000\191\000\192\000\193\000\
\194\000\000\000\078\000\195\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\000\080\000\000\000\208\000\
\000\000\209\000\210\000\196\000\197\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\199\000\200\000\000\000\000\000\201\000\202\000\000\000\
\000\000\203\000\204\000\000\000\000\000\000\000\205\000\206\000\
\000\000\207\000\000\000\000\000\000\000\000\000\000\000\000\000\
\181\002\059\001\059\001\059\001\059\001\059\001\000\000\059\001\
\059\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\080\000\000\000\208\000\000\000\209\000\210\000\000\000\000\000\
\059\001\059\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\001\059\001\059\001\
\000\000\000\000\059\001\059\001\000\000\000\000\059\001\059\001\
\000\000\000\000\000\000\059\001\059\001\000\000\059\001\000\000\
\000\000\000\000\059\001\000\000\129\000\129\000\129\000\129\000\
\129\000\000\000\129\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\001\059\001\000\000\059\001\
\000\000\059\001\059\001\129\000\129\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\129\000\129\000\129\000\000\000\000\000\129\000\129\000\000\000\
\000\000\129\000\129\000\000\000\000\000\000\000\129\000\129\000\
\000\000\129\000\000\000\129\000\000\000\000\000\000\000\060\001\
\060\001\060\001\060\001\060\001\000\000\060\001\060\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000\
\129\000\000\000\129\000\000\000\129\000\129\000\060\001\060\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\001\060\001\060\001\000\000\000\000\
\060\001\060\001\000\000\000\000\060\001\060\001\000\000\000\000\
\000\000\060\001\060\001\000\000\060\001\000\000\000\000\000\000\
\060\001\000\000\190\000\191\000\192\000\193\000\194\000\000\000\
\078\000\195\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\001\060\001\000\000\060\001\000\000\060\001\
\060\001\196\000\197\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\198\000\199\000\
\200\000\000\000\000\000\201\000\202\000\000\000\000\000\203\000\
\204\000\000\000\000\000\000\000\205\000\206\000\000\000\238\000\
\000\000\000\000\000\000\000\000\000\000\190\000\191\000\192\000\
\193\000\194\000\000\000\078\000\195\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\079\000\080\000\000\000\
\208\000\000\000\209\000\210\000\196\000\197\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\198\000\199\000\200\000\000\000\000\000\201\000\202\000\
\000\000\000\000\203\000\204\000\000\000\000\000\000\000\205\000\
\206\000\000\000\240\000\000\000\000\000\000\000\000\000\000\000\
\190\000\191\000\192\000\193\000\194\000\000\000\078\000\195\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\000\080\000\000\000\208\000\000\000\209\000\210\000\196\000\
\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\198\000\199\000\200\000\000\000\
\000\000\201\000\202\000\000\000\000\000\203\000\204\000\000\000\
\000\000\000\000\205\000\206\000\000\000\093\001\000\000\000\000\
\000\000\000\000\000\000\190\000\191\000\192\000\193\000\194\000\
\000\000\078\000\195\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\080\000\000\000\208\000\000\000\
\209\000\210\000\196\000\197\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\000\
\199\000\200\000\000\000\000\000\201\000\202\000\000\000\000\000\
\203\000\204\000\000\000\000\000\000\000\205\000\206\000\000\000\
\095\001\000\000\000\000\000\000\000\000\000\000\190\000\191\000\
\192\000\193\000\194\000\000\000\078\000\195\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\000\080\000\
\000\000\208\000\000\000\209\000\210\000\196\000\197\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\198\000\199\000\200\000\000\000\000\000\201\000\
\202\000\000\000\000\000\203\000\204\000\000\000\000\000\000\000\
\205\000\206\000\000\000\207\000\000\000\000\000\000\000\000\000\
\000\000\190\000\191\000\192\000\193\000\194\000\000\000\078\000\
\195\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\079\000\080\000\000\000\208\000\000\000\209\000\210\000\
\196\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\198\000\199\000\200\000\
\000\000\000\000\201\000\202\000\000\000\000\000\203\000\204\000\
\000\000\000\000\000\000\205\000\206\000\000\000\104\001\000\000\
\000\000\000\000\000\000\000\000\059\001\059\001\059\001\059\001\
\059\001\000\000\059\001\059\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\000\080\000\000\000\208\000\
\000\000\209\000\210\000\059\001\059\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\001\059\001\059\001\000\000\000\000\059\001\059\001\000\000\
\000\000\059\001\059\001\000\000\000\000\000\000\059\001\059\001\
\000\000\059\001\000\000\000\000\000\000\000\000\000\000\090\000\
\000\000\000\000\091\000\092\000\093\000\078\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\094\000\059\001\
\059\001\095\000\059\001\000\000\059\001\059\001\096\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\
\000\000\000\000\091\000\092\000\093\000\078\000\000\000\000\000\
\000\000\000\000\000\000\098\000\099\000\100\000\000\000\000\000\
\101\000\102\000\000\000\000\000\103\000\000\000\094\000\000\000\
\000\000\095\000\000\000\165\001\104\000\000\000\096\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\098\000\099\000\100\000\000\000\000\000\
\101\000\102\000\079\000\080\000\103\000\094\001\000\000\000\000\
\000\000\000\000\000\000\000\000\104\000\000\000\000\000\000\000\
\094\001\094\001\094\001\094\001\094\001\094\001\094\001\094\001\
\094\001\094\001\094\001\094\001\094\001\105\000\094\001\094\001\
\094\001\000\000\094\001\094\001\094\001\094\001\000\000\000\000\
\094\001\000\000\079\000\080\000\094\001\094\001\095\001\094\001\
\094\001\094\001\000\000\094\001\000\000\000\000\000\000\000\000\
\000\000\095\001\095\001\095\001\095\001\095\001\095\001\095\001\
\095\001\095\001\095\001\095\001\095\001\095\001\000\000\095\001\
\095\001\095\001\000\000\095\001\095\001\095\001\095\001\000\000\
\000\000\095\001\000\000\094\001\000\000\095\001\095\001\111\001\
\095\001\095\001\095\001\000\000\095\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\111\001\111\001\111\001\111\001\
\111\001\111\001\111\001\111\001\111\001\111\001\111\001\000\000\
\111\001\111\001\111\001\000\000\111\001\111\001\111\001\111\001\
\000\000\000\000\111\001\000\000\095\001\000\000\113\001\111\001\
\000\000\111\001\111\001\111\001\000\000\111\001\000\000\000\000\
\000\000\000\000\000\000\113\001\113\001\113\001\113\001\113\001\
\113\001\113\001\113\001\113\001\113\001\113\001\000\000\113\001\
\113\001\113\001\000\000\113\001\113\001\113\001\113\001\000\000\
\000\000\113\001\000\000\125\001\000\000\111\001\113\001\000\000\
\113\001\113\001\113\001\000\000\113\001\000\000\000\000\000\000\
\125\001\125\001\125\001\125\001\125\001\125\001\125\001\125\001\
\000\000\000\000\000\000\000\000\125\001\125\001\125\001\000\000\
\125\001\125\001\125\001\125\001\000\000\000\000\125\001\000\000\
\126\001\000\000\000\000\125\001\113\001\125\001\125\001\125\001\
\000\000\125\001\000\000\000\000\000\000\126\001\126\001\126\001\
\126\001\126\001\126\001\126\001\126\001\000\000\000\000\000\000\
\000\000\126\001\126\001\126\001\000\000\126\001\126\001\126\001\
\126\001\000\000\000\000\126\001\000\000\127\001\000\000\000\000\
\126\001\125\001\126\001\126\001\126\001\000\000\126\001\000\000\
\000\000\000\000\127\001\127\001\127\001\127\001\127\001\127\001\
\127\001\127\001\000\000\000\000\000\000\000\000\127\001\127\001\
\127\001\000\000\127\001\127\001\127\001\127\001\000\000\000\000\
\127\001\000\000\129\001\000\000\000\000\127\001\126\001\127\001\
\127\001\127\001\000\000\127\001\000\000\000\000\000\000\129\001\
\129\001\129\001\129\001\129\001\129\001\000\000\000\000\000\000\
\000\000\000\000\000\000\129\001\129\001\129\001\000\000\129\001\
\129\001\129\001\129\001\000\000\000\000\129\001\000\000\130\001\
\000\000\000\000\129\001\127\001\129\001\129\001\129\001\000\000\
\129\001\000\000\000\000\000\000\130\001\130\001\130\001\130\001\
\130\001\130\001\000\000\000\000\000\000\000\000\000\000\000\000\
\130\001\130\001\130\001\000\000\130\001\130\001\130\001\130\001\
\000\000\000\000\130\001\000\000\133\001\000\000\000\000\130\001\
\129\001\130\001\130\001\130\001\000\000\130\001\000\000\000\000\
\000\000\133\001\133\001\133\001\133\001\133\001\133\001\000\000\
\000\000\000\000\000\000\000\000\000\000\133\001\133\001\133\001\
\000\000\133\001\133\001\000\000\000\000\000\000\000\000\133\001\
\000\000\134\001\000\000\000\000\133\001\130\001\133\001\133\001\
\133\001\000\000\133\001\000\000\000\000\000\000\134\001\134\001\
\134\001\134\001\134\001\134\001\000\000\000\000\000\000\000\000\
\000\000\000\000\134\001\134\001\134\001\000\000\134\001\134\001\
\000\000\000\000\000\000\000\000\134\001\000\000\135\001\000\000\
\000\000\134\001\133\001\134\001\134\001\134\001\000\000\134\001\
\000\000\000\000\000\000\135\001\135\001\135\001\135\001\135\001\
\135\001\000\000\000\000\000\000\000\000\136\001\000\000\135\001\
\135\001\135\001\000\000\135\001\135\001\000\000\000\000\000\000\
\000\000\135\001\136\001\136\001\000\000\000\000\135\001\134\001\
\135\001\135\001\135\001\000\000\135\001\137\001\136\001\136\001\
\136\001\000\000\136\001\136\001\000\000\000\000\000\000\000\000\
\136\001\000\000\137\001\137\001\000\000\136\001\000\000\136\001\
\136\001\136\001\000\000\136\001\138\001\000\000\137\001\137\001\
\137\001\000\000\137\001\137\001\135\001\000\000\000\000\000\000\
\137\001\138\001\138\001\000\000\000\000\137\001\000\000\137\001\
\137\001\137\001\000\000\137\001\000\000\138\001\138\001\138\001\
\000\000\138\001\138\001\136\001\000\000\000\000\000\000\138\001\
\000\000\000\000\000\000\000\000\138\001\000\000\138\001\138\001\
\138\001\000\000\138\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\137\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\138\001\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\000\000\025\000\025\000\025\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\025\000\
\025\000\000\000\025\000\000\000\020\000\000\000\025\000\025\000\
\000\000\025\000"

let yycheck = "\017\000\
\018\000\042\000\020\000\067\000\060\002\001\000\002\000\159\000\
\047\000\026\000\000\000\027\001\037\001\041\000\167\000\168\000\
\041\001\040\001\187\000\134\000\059\000\067\001\068\001\042\001\
\041\000\209\001\158\000\042\001\082\000\003\001\204\001\013\001\
\065\002\111\000\062\002\048\000\051\000\033\000\151\000\077\001\
\081\000\037\001\048\000\052\001\108\000\060\000\084\001\061\001\
\017\000\018\000\046\000\020\000\070\000\013\001\014\001\013\001\
\074\000\083\001\087\000\077\000\007\001\047\000\033\000\007\001\
\059\000\217\000\075\001\081\001\012\001\086\000\079\001\088\000\
\007\001\059\000\159\000\046\000\104\000\012\001\026\000\238\002\
\042\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\129\000\130\000\076\001\090\002\118\001\041\000\111\000\007\001\
\130\002\007\001\001\003\133\002\012\001\070\000\007\001\102\002\
\076\001\074\000\102\001\012\001\077\000\075\000\098\000\099\000\
\100\000\101\000\102\000\103\000\007\001\113\001\021\003\115\001\
\159\000\012\001\007\001\141\000\106\001\107\001\061\001\012\001\
\075\001\142\000\143\000\013\001\217\000\172\000\078\001\131\000\
\142\000\143\000\086\000\007\001\088\000\076\001\175\002\171\002\
\079\001\119\001\106\001\107\001\106\001\107\001\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\075\002\102\001\063\002\
\131\000\215\000\216\000\111\000\198\002\075\001\078\001\129\000\
\130\000\113\001\187\000\076\001\069\001\159\000\190\001\200\001\
\076\001\208\001\037\001\001\001\226\001\109\002\041\001\042\001\
\060\001\200\001\204\000\183\000\203\001\214\001\102\001\216\001\
\207\000\078\001\228\002\052\001\215\001\216\001\075\001\081\001\
\215\001\113\001\013\001\014\001\081\001\171\000\100\002\075\001\
\174\000\175\000\176\000\007\001\183\000\179\000\180\000\030\001\
\012\001\102\001\033\001\147\002\254\002\102\001\075\001\238\000\
\076\001\240\000\251\001\018\000\113\001\020\000\083\001\217\000\
\113\001\250\000\138\002\007\001\140\002\207\000\142\002\187\000\
\040\003\002\001\207\000\005\001\006\001\158\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\075\001\027\001\040\001\238\000\163\002\240\000\081\001\
\076\001\238\000\089\001\240\000\008\001\009\001\010\001\007\001\
\071\000\048\002\078\001\052\002\012\001\047\001\055\002\062\002\
\063\002\007\001\063\001\061\001\005\001\006\001\012\001\106\001\
\107\001\059\001\071\001\038\001\081\001\078\001\250\000\000\000\
\085\001\035\001\083\001\084\001\001\000\002\000\002\001\004\000\
\081\002\083\001\076\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\093\001\027\001\
\095\001\104\002\111\001\099\002\033\000\200\001\199\001\077\001\
\203\001\104\001\168\001\086\001\076\001\042\000\061\001\079\001\
\078\001\046\000\036\003\214\001\215\001\216\001\076\001\121\001\
\122\001\054\000\072\001\138\002\046\003\140\002\052\001\142\002\
\007\001\062\000\081\001\081\001\083\001\012\001\076\001\085\001\
\096\000\097\000\007\001\093\001\007\001\095\001\007\001\040\001\
\093\001\012\001\095\001\012\001\081\000\076\001\104\001\005\001\
\251\001\079\001\087\000\104\001\171\002\158\001\078\001\207\001\
\007\001\170\002\007\001\112\001\113\001\012\001\078\001\012\001\
\121\001\122\001\078\001\125\001\126\001\051\001\052\001\198\001\
\030\001\076\001\032\001\033\001\034\001\078\001\195\001\037\001\
\061\001\080\001\083\001\084\001\211\001\190\001\085\001\071\002\
\005\001\195\001\061\001\078\001\129\000\130\000\131\000\078\001\
\083\001\079\001\005\001\157\001\001\000\002\000\083\001\230\001\
\007\001\052\002\075\001\076\001\055\002\012\001\079\001\095\002\
\229\001\030\001\081\001\084\001\033\001\034\001\059\001\060\001\
\037\001\158\000\158\001\030\001\070\001\076\001\033\001\034\001\
\081\001\078\001\037\001\070\001\196\000\197\000\081\002\065\001\
\053\001\054\001\195\001\076\001\086\001\205\000\206\000\067\001\
\102\001\182\000\183\000\086\001\065\001\066\001\067\001\066\001\
\069\001\070\001\190\001\113\001\069\001\115\001\075\001\184\002\
\077\001\186\002\187\002\080\001\081\001\075\001\083\001\084\001\
\085\001\086\001\207\000\081\001\075\001\076\001\199\002\030\001\
\079\001\231\001\033\001\007\001\041\002\084\001\010\001\011\001\
\012\001\102\001\244\001\048\002\007\001\005\001\040\002\040\001\
\065\002\012\001\040\001\102\001\113\001\104\001\115\001\224\002\
\071\002\238\000\030\001\240\000\084\001\033\001\113\001\056\002\
\115\001\234\002\060\002\236\002\083\001\061\001\030\001\065\002\
\040\001\033\001\034\001\244\002\007\001\037\001\013\001\170\002\
\076\001\012\001\075\001\079\001\076\001\090\002\108\001\079\001\
\081\001\002\003\083\001\084\001\247\002\065\002\249\002\040\002\
\090\002\102\002\061\001\104\002\094\002\055\001\056\001\057\001\
\058\001\196\002\099\002\053\002\102\002\071\002\061\001\062\001\
\063\001\076\001\083\001\198\000\199\000\200\000\201\000\202\000\
\203\000\093\001\035\003\061\001\062\001\063\001\131\002\218\002\
\122\002\054\001\076\002\146\002\056\002\095\002\128\002\060\001\
\084\001\005\001\071\001\072\001\075\001\083\001\102\001\134\002\
\235\002\090\002\081\001\078\001\075\001\094\002\061\001\092\002\
\093\002\113\001\075\001\115\001\084\001\102\002\079\001\164\002\
\053\001\054\001\030\001\084\001\110\002\033\001\034\001\075\001\
\093\001\037\001\095\001\106\001\107\001\075\001\076\001\099\002\
\040\001\079\001\172\002\104\001\084\001\175\002\084\001\129\002\
\078\001\053\001\054\001\112\001\113\001\077\001\184\002\078\001\
\186\002\187\002\094\001\095\001\096\001\065\001\066\001\067\001\
\077\001\069\001\070\001\059\001\060\001\199\002\007\001\075\001\
\078\001\077\001\075\001\012\001\080\001\081\001\075\001\083\001\
\084\001\085\001\086\001\007\001\225\002\238\002\076\001\169\002\
\071\001\072\001\040\001\094\001\095\001\096\001\224\002\007\001\
\076\001\179\002\102\001\076\001\012\001\183\002\229\002\075\001\
\234\002\075\001\236\002\053\001\054\001\113\001\065\001\115\001\
\099\001\100\001\244\002\065\001\066\001\067\001\245\002\069\001\
\070\001\075\001\083\001\084\001\061\001\075\001\080\001\081\001\
\002\003\083\001\080\001\067\001\082\001\083\001\084\001\066\001\
\086\001\061\001\075\001\076\001\083\001\084\001\079\001\204\001\
\081\001\018\003\083\001\084\001\209\001\034\003\069\001\075\001\
\076\001\083\001\084\001\079\001\238\002\081\001\084\001\083\001\
\084\001\035\003\075\001\075\001\076\001\010\001\040\003\079\001\
\118\001\189\002\190\002\191\002\084\001\010\001\005\001\001\003\
\139\001\140\001\141\001\142\001\143\001\144\001\145\001\146\001\
\147\001\148\001\149\001\150\001\151\001\152\001\153\001\154\001\
\155\001\156\001\075\001\021\003\129\000\130\000\118\001\030\001\
\110\001\001\001\033\001\034\001\075\001\005\001\037\001\007\001\
\055\001\056\001\057\001\058\001\012\001\007\001\018\003\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\069\001\070\001\
\142\001\143\001\007\001\075\001\075\001\075\001\077\001\012\001\
\077\001\080\001\081\001\040\001\083\001\084\001\085\001\086\001\
\077\001\144\001\145\001\081\001\065\002\150\001\151\001\083\001\
\053\001\054\001\055\001\056\001\057\001\058\001\075\002\102\001\
\084\001\094\001\095\001\096\001\065\001\066\001\067\001\077\001\
\069\001\070\001\113\001\246\001\115\001\077\001\075\001\092\002\
\093\002\077\001\040\001\080\001\077\001\082\001\083\001\084\001\
\061\001\086\001\077\001\120\001\142\000\143\000\102\001\103\001\
\109\002\105\001\146\001\147\001\148\001\149\001\075\001\076\001\
\075\001\113\001\079\001\115\001\083\001\122\002\007\001\084\001\
\120\001\010\001\011\001\012\001\013\001\075\001\011\001\012\001\
\078\001\118\001\084\001\081\001\075\001\083\001\084\001\015\001\
\016\001\017\001\018\001\013\001\014\001\030\001\147\002\075\001\
\033\001\075\001\019\001\020\001\001\001\076\001\003\001\004\001\
\005\001\040\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\075\001\075\001\075\001\080\001\098\002\
\076\001\080\001\120\001\082\001\083\001\084\001\079\001\077\001\
\083\001\077\001\084\001\075\001\093\001\075\001\059\001\060\001\
\061\001\077\001\080\001\064\001\065\001\083\001\084\001\068\001\
\069\001\106\001\107\001\083\001\073\001\074\001\077\001\076\001\
\077\001\078\001\075\001\075\001\084\001\075\001\083\001\118\001\
\084\001\238\002\087\001\088\001\089\001\090\001\091\001\092\001\
\093\001\094\001\095\001\096\001\097\001\098\001\084\001\080\001\
\118\001\102\001\103\001\104\001\105\001\106\001\107\001\081\001\
\109\001\078\001\111\001\112\001\113\001\114\001\115\001\116\001\
\117\001\001\001\119\001\120\001\004\001\005\001\040\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\082\001\075\001\040\001\084\001\078\001\081\001\077\001\081\001\
\075\001\083\001\084\001\075\001\080\001\075\001\077\001\084\001\
\075\001\051\001\052\001\059\001\060\001\061\001\083\001\075\001\
\064\001\065\001\077\001\032\001\068\001\069\001\075\001\081\001\
\076\001\073\001\074\001\083\001\076\001\077\001\078\001\073\001\
\074\001\083\001\076\001\083\001\083\001\079\001\081\001\087\001\
\088\001\089\001\090\001\091\001\092\001\093\001\094\001\095\001\
\096\001\097\001\098\001\075\001\075\001\080\001\102\001\103\001\
\104\001\105\001\106\001\107\001\077\001\109\001\081\001\111\001\
\112\001\113\001\114\001\115\001\116\001\117\001\001\001\075\001\
\120\001\004\001\005\001\075\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\083\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\005\001\083\001\076\001\076\001\007\001\080\001\083\001\
\059\001\060\001\061\001\101\001\076\001\064\001\065\001\013\001\
\094\001\068\001\069\001\081\001\081\001\079\001\073\001\074\001\
\083\001\076\001\030\001\078\001\075\001\033\001\034\001\083\001\
\083\001\037\001\083\001\075\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\094\001\095\001\096\001\097\001\098\001\
\007\001\081\001\084\001\102\001\103\001\104\001\105\001\106\001\
\107\001\083\001\109\001\083\001\111\001\112\001\113\001\114\001\
\115\001\116\001\117\001\080\001\001\001\120\001\003\001\004\001\
\076\001\040\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\128\001\129\001\130\001\131\001\132\001\133\001\
\134\001\135\001\136\001\137\001\138\001\076\001\075\001\081\001\
\075\001\084\001\102\001\066\001\067\001\081\001\069\001\070\001\
\000\000\038\001\039\001\077\001\075\001\113\001\083\001\115\001\
\075\001\080\001\078\001\082\001\083\001\084\001\075\001\086\001\
\081\001\077\001\077\001\075\001\075\001\079\001\059\001\060\001\
\061\001\077\001\083\001\064\001\065\001\075\001\077\001\068\001\
\069\001\078\001\078\001\077\001\073\001\074\001\002\000\076\001\
\077\001\078\001\080\001\083\001\076\001\075\001\083\001\118\001\
\083\001\075\001\087\001\088\001\089\001\090\001\091\001\092\001\
\093\001\094\001\095\001\096\001\097\001\098\001\075\001\075\001\
\075\001\158\002\203\001\104\001\163\002\106\001\107\001\064\001\
\109\001\004\000\111\001\112\001\059\002\114\001\230\001\141\000\
\152\001\154\001\119\001\120\001\001\001\155\001\003\001\004\001\
\005\001\153\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\156\001\098\002\076\002\235\002\005\003\
\165\000\146\002\219\001\001\001\168\001\021\001\023\001\022\001\
\026\003\024\003\024\001\255\255\025\001\255\255\059\001\060\001\
\061\001\255\255\255\255\064\001\065\001\255\255\043\003\068\001\
\069\001\255\255\255\255\046\003\073\001\074\001\255\255\076\001\
\077\001\078\001\255\255\255\255\255\255\255\255\083\001\255\255\
\255\255\255\255\087\001\088\001\089\001\090\001\091\001\092\001\
\093\001\094\001\095\001\096\001\097\001\098\001\255\255\255\255\
\255\255\102\001\103\001\104\001\105\001\106\001\107\001\255\255\
\109\001\110\001\111\001\112\001\113\001\114\001\115\001\116\001\
\117\001\001\001\119\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\255\255\
\064\001\065\001\255\255\255\255\068\001\069\001\255\255\255\255\
\255\255\073\001\074\001\255\255\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\083\001\255\255\255\255\255\255\087\001\
\088\001\089\001\090\001\091\001\092\001\093\001\094\001\095\001\
\096\001\097\001\098\001\255\255\255\255\255\255\102\001\103\001\
\104\001\105\001\106\001\107\001\255\255\109\001\255\255\111\001\
\112\001\113\001\114\001\115\001\116\001\117\001\001\001\119\001\
\003\001\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\255\255\078\001\255\255\255\255\255\255\255\255\
\083\001\255\255\255\255\255\255\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\255\255\255\255\255\255\097\001\098\001\
\255\255\255\255\255\255\102\001\103\001\104\001\105\001\106\001\
\107\001\255\255\109\001\255\255\111\001\112\001\113\001\114\001\
\115\001\255\255\255\255\001\001\119\001\003\001\004\001\255\255\
\040\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\255\255\255\255\255\255\255\255\
\255\255\065\001\066\001\067\001\255\255\069\001\070\001\255\255\
\038\001\039\001\255\255\075\001\255\255\255\255\255\255\255\255\
\080\001\255\255\082\001\083\001\084\001\255\255\086\001\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\074\001\255\255\076\001\255\255\
\078\001\255\255\255\255\255\255\255\255\083\001\118\001\255\255\
\255\255\087\001\088\001\089\001\090\001\091\001\092\001\093\001\
\094\001\095\001\096\001\097\001\098\001\255\255\255\255\255\255\
\255\255\255\255\104\001\255\255\106\001\107\001\255\255\109\001\
\255\255\111\001\112\001\255\255\114\001\001\001\040\001\003\001\
\004\001\119\001\255\255\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\255\255\065\001\
\066\001\067\001\255\255\069\001\070\001\071\001\072\001\255\255\
\255\255\075\001\038\001\039\001\255\255\255\255\080\001\255\255\
\082\001\083\001\084\001\255\255\086\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\255\255\064\001\065\001\255\255\255\255\
\068\001\069\001\255\255\255\255\255\255\073\001\074\001\255\255\
\076\001\255\255\078\001\255\255\118\001\255\255\255\255\083\001\
\255\255\255\255\255\255\087\001\088\001\089\001\090\001\091\001\
\092\001\093\001\255\255\255\255\255\255\097\001\098\001\255\255\
\255\255\255\255\255\255\255\255\104\001\255\255\106\001\107\001\
\255\255\109\001\255\255\111\001\112\001\255\255\114\001\255\255\
\001\001\002\001\255\255\119\001\005\001\006\001\007\001\040\001\
\255\255\255\255\255\255\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\070\001\255\255\255\255\
\255\255\255\255\075\001\255\255\255\255\255\255\255\255\080\001\
\040\001\082\001\083\001\084\001\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\255\255\065\001\066\001\067\001\255\255\069\001\070\001\071\001\
\072\001\255\255\083\001\075\001\255\255\118\001\255\255\079\001\
\080\001\255\255\082\001\083\001\084\001\255\255\086\001\255\255\
\255\255\255\255\255\255\255\255\255\255\102\001\103\001\104\001\
\105\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\113\001\001\001\115\001\116\001\117\001\005\001\119\001\007\001\
\255\255\255\255\010\001\011\001\012\001\255\255\118\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\255\255\065\001\066\001\067\001\255\255\069\001\070\001\071\001\
\072\001\255\255\255\255\075\001\076\001\255\255\078\001\079\001\
\080\001\255\255\082\001\083\001\084\001\255\255\086\001\255\255\
\255\255\255\255\255\255\255\255\255\255\093\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\102\001\103\001\
\255\255\105\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\113\001\255\255\115\001\001\001\255\255\118\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\255\255\255\255\064\001\065\001\255\255\255\255\068\001\
\069\001\255\255\255\255\255\255\073\001\074\001\255\255\076\001\
\077\001\078\001\255\255\255\255\255\255\255\255\083\001\255\255\
\255\255\255\255\087\001\088\001\089\001\090\001\091\001\092\001\
\093\001\094\001\095\001\096\001\097\001\098\001\255\255\255\255\
\255\255\102\001\103\001\104\001\105\001\106\001\107\001\255\255\
\109\001\255\255\111\001\112\001\113\001\114\001\115\001\116\001\
\117\001\001\001\255\255\255\255\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\255\255\
\064\001\065\001\255\255\255\255\068\001\069\001\255\255\255\255\
\255\255\073\001\074\001\255\255\076\001\255\255\078\001\255\255\
\255\255\255\255\255\255\083\001\255\255\255\255\255\255\087\001\
\088\001\089\001\090\001\091\001\092\001\093\001\255\255\255\255\
\255\255\097\001\098\001\255\255\255\255\255\255\102\001\103\001\
\104\001\105\001\106\001\107\001\255\255\109\001\255\255\111\001\
\112\001\113\001\114\001\115\001\116\001\117\001\001\001\255\255\
\255\255\255\255\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\005\001\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\102\001\103\001\255\255\105\001\106\001\
\107\001\255\255\109\001\001\001\111\001\112\001\113\001\005\001\
\115\001\255\255\040\001\255\255\255\255\255\255\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\070\001\255\255\255\255\255\255\255\255\075\001\255\255\255\255\
\255\255\255\255\080\001\255\255\082\001\083\001\084\001\255\255\
\086\001\102\001\103\001\255\255\105\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\113\001\255\255\115\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\078\001\255\255\255\255\255\255\005\001\255\255\255\255\255\255\
\118\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\102\001\103\001\255\255\105\001\255\255\030\001\255\255\255\255\
\033\001\034\001\255\255\113\001\037\001\115\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\255\255\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\255\255\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\255\255\255\255\
\255\255\255\255\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\102\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\113\001\255\255\115\001\030\001\255\255\118\001\033\001\034\001\
\255\255\255\255\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\255\255\065\001\066\001\
\067\001\255\255\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\255\255\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\255\255\255\255\255\255\255\255\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\102\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\030\001\255\255\118\001\033\001\034\001\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\255\255\065\001\066\001\067\001\255\255\
\069\001\070\001\071\001\072\001\255\255\255\255\075\001\255\255\
\077\001\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\255\255\255\255\255\255\255\255\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\113\001\255\255\115\001\030\001\
\255\255\118\001\033\001\034\001\255\255\255\255\037\001\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\255\255\065\001\066\001\067\001\255\255\069\001\070\001\
\071\001\072\001\255\255\255\255\075\001\255\255\077\001\255\255\
\255\255\080\001\081\001\082\001\083\001\084\001\085\001\086\001\
\255\255\255\255\255\255\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\102\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\113\001\255\255\115\001\030\001\255\255\118\001\
\033\001\034\001\255\255\255\255\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\255\255\069\001\070\001\071\001\072\001\
\255\255\255\255\075\001\255\255\077\001\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\001\001\255\255\
\255\255\004\001\255\255\040\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\102\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\113\001\255\255\115\001\255\255\255\255\118\001\255\255\255\255\
\069\001\070\001\255\255\038\001\039\001\255\255\075\001\255\255\
\255\255\255\255\255\255\080\001\255\255\082\001\083\001\084\001\
\255\255\086\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\255\255\078\001\255\255\255\255\255\255\255\255\
\083\001\118\001\255\255\255\255\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\255\255\255\255\255\255\097\001\098\001\
\255\255\255\255\255\255\255\255\255\255\104\001\255\255\106\001\
\107\001\005\001\109\001\255\255\111\001\112\001\255\255\114\001\
\012\001\040\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\065\001\066\001\067\001\255\255\069\001\070\001\
\255\255\255\255\255\255\255\255\075\001\255\255\255\255\255\255\
\255\255\080\001\255\255\082\001\083\001\084\001\255\255\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\007\001\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\083\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\118\001\
\066\001\067\001\255\255\069\001\070\001\030\001\255\255\255\255\
\033\001\075\001\102\001\103\001\255\255\105\001\080\001\040\001\
\082\001\083\001\084\001\255\255\086\001\113\001\255\255\115\001\
\116\001\117\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\255\255\069\001\070\001\071\001\072\001\
\255\255\255\255\075\001\076\001\118\001\255\255\079\001\080\001\
\255\255\082\001\083\001\084\001\255\255\086\001\005\001\255\255\
\255\255\255\255\007\001\255\255\093\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\106\001\107\001\255\255\255\255\255\255\255\255\030\001\
\255\255\030\001\033\001\034\001\033\001\118\001\037\001\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\255\255\065\001\066\001\067\001\255\255\
\069\001\070\001\071\001\072\001\255\255\076\001\075\001\076\001\
\079\001\255\255\079\001\080\001\255\255\082\001\083\001\084\001\
\255\255\086\001\255\255\255\255\255\255\255\255\007\001\255\255\
\093\001\010\001\011\001\012\001\013\001\255\255\255\255\102\001\
\255\255\104\001\255\255\255\255\255\255\106\001\107\001\255\255\
\255\255\255\255\113\001\255\255\115\001\030\001\255\255\255\255\
\033\001\118\001\255\255\255\255\255\255\255\255\255\255\040\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\255\255\069\001\070\001\071\001\072\001\
\005\001\255\255\075\001\255\255\255\255\255\255\079\001\080\001\
\255\255\082\001\083\001\084\001\007\001\086\001\255\255\010\001\
\011\001\012\001\013\001\255\255\093\001\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\033\001\034\001\255\255\255\255\
\037\001\106\001\107\001\030\001\255\255\255\255\033\001\255\255\
\255\255\255\255\255\255\038\001\039\001\118\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\076\001\
\255\255\068\001\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\076\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\093\001\104\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\113\001\255\255\115\001\106\001\
\107\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\005\001\118\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\255\255\078\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\102\001\103\001\255\255\105\001\106\001\
\107\001\255\255\109\001\255\255\111\001\112\001\113\001\005\001\
\115\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\255\255\040\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\068\001\069\001\
\255\255\069\001\070\001\073\001\074\001\255\255\076\001\075\001\
\255\255\255\255\255\255\255\255\080\001\255\255\082\001\083\001\
\084\001\255\255\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\102\001\103\001\255\255\105\001\106\001\107\001\255\255\109\001\
\255\255\111\001\112\001\113\001\005\001\115\001\007\001\255\255\
\255\255\255\255\118\001\012\001\040\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\066\001\255\255\
\255\255\069\001\070\001\255\255\255\255\255\255\255\255\075\001\
\255\255\255\255\255\255\255\255\080\001\255\255\082\001\083\001\
\084\001\255\255\086\001\255\255\061\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\001\
\255\255\255\255\075\001\076\001\255\255\255\255\079\001\255\255\
\081\001\255\255\083\001\084\001\255\255\255\255\255\255\255\255\
\255\255\255\255\118\001\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\033\001\034\001\102\001\103\001\037\001\
\105\001\255\255\005\001\255\255\007\001\255\255\255\255\255\255\
\113\001\012\001\115\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\255\255\075\001\255\255\077\001\
\255\255\255\255\080\001\081\001\255\255\083\001\084\001\085\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\255\255\255\255\
\102\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\075\001\076\001\255\255\113\001\079\001\115\001\081\001\255\255\
\083\001\084\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\102\001\103\001\255\255\105\001\255\255\
\005\001\255\255\007\001\255\255\255\255\255\255\113\001\012\001\
\115\001\040\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\066\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\255\255\075\001\255\255\255\255\255\255\
\255\255\080\001\255\255\082\001\083\001\084\001\255\255\086\001\
\061\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\075\001\076\001\
\255\255\255\255\079\001\255\255\081\001\255\255\083\001\084\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\118\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\103\001\255\255\105\001\255\255\005\001\255\255\
\007\001\255\255\255\255\255\255\113\001\012\001\115\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\075\001\076\001\255\255\255\255\
\079\001\255\255\081\001\255\255\083\001\084\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\102\001\
\103\001\255\255\105\001\255\255\005\001\255\255\007\001\255\255\
\255\255\255\255\113\001\012\001\115\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\076\001\255\255\255\255\255\255\255\255\
\081\001\255\255\083\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\102\001\103\001\255\255\
\105\001\255\255\005\001\255\255\007\001\255\255\255\255\255\255\
\113\001\012\001\115\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\255\255\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\076\001\255\255\255\255\255\255\255\255\255\255\255\255\
\083\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\033\001\034\001\255\255\
\255\255\037\001\255\255\102\001\103\001\255\255\105\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\255\255\065\001\066\001\067\001\
\255\255\069\001\070\001\071\001\072\001\255\255\255\255\075\001\
\255\255\077\001\255\255\255\255\080\001\081\001\255\255\083\001\
\084\001\085\001\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\102\001\255\255\255\255\255\255\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\113\001\012\001\115\001\
\005\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\005\001\030\001\007\001\255\255\033\001\034\001\255\255\012\001\
\037\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\066\001\076\001\255\255\
\069\001\070\001\255\255\255\255\255\255\255\255\075\001\085\001\
\077\001\255\255\255\255\080\001\081\001\255\255\083\001\084\001\
\085\001\086\001\255\255\255\255\255\255\255\255\255\255\255\255\
\102\001\103\001\255\255\105\001\255\255\255\255\255\255\255\255\
\255\255\102\001\255\255\113\001\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\255\255\113\001\255\255\115\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\103\001\255\255\105\001\255\255\005\001\255\255\
\255\255\255\255\255\255\255\255\113\001\012\001\115\001\005\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\005\001\
\030\001\255\255\255\255\033\001\034\001\255\255\012\001\037\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\066\001\076\001\255\255\069\001\
\070\001\255\255\255\255\255\255\255\255\075\001\255\255\077\001\
\255\255\255\255\080\001\081\001\255\255\083\001\084\001\085\001\
\086\001\255\255\255\255\255\255\255\255\255\255\255\255\102\001\
\103\001\255\255\105\001\255\255\255\255\255\255\255\255\255\255\
\102\001\255\255\113\001\255\255\115\001\255\255\255\255\085\001\
\255\255\255\255\255\255\113\001\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\102\001\103\001\255\255\105\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\113\001\012\001\115\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\005\001\255\255\255\255\255\255\
\255\255\065\001\066\001\067\001\076\001\069\001\070\001\071\001\
\072\001\255\255\255\255\075\001\255\255\255\255\255\255\255\255\
\080\001\255\255\082\001\083\001\084\001\030\001\086\001\255\255\
\033\001\034\001\255\255\255\255\037\001\255\255\102\001\103\001\
\255\255\105\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\113\001\255\255\115\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\255\255\255\255\118\001\255\255\
\065\001\066\001\067\001\005\001\069\001\070\001\071\001\072\001\
\255\255\255\255\075\001\255\255\077\001\255\255\255\255\080\001\
\081\001\255\255\083\001\084\001\085\001\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\033\001\
\034\001\255\255\255\255\037\001\255\255\102\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\113\001\255\255\115\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\255\255\255\255\255\255\255\255\065\001\
\066\001\067\001\005\001\069\001\070\001\071\001\072\001\255\255\
\255\255\075\001\255\255\077\001\255\255\255\255\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\255\255\255\255\033\001\034\001\
\255\255\255\255\037\001\255\255\102\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\113\001\
\255\255\115\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\255\255\255\255\255\255\255\255\065\001\066\001\
\067\001\255\255\069\001\070\001\071\001\072\001\255\255\255\255\
\075\001\255\255\077\001\255\255\255\255\080\001\081\001\255\255\
\083\001\084\001\085\001\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\102\001\255\255\255\255\255\255\255\255\
\005\001\255\255\255\255\255\255\255\255\255\255\113\001\012\001\
\115\001\005\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\030\001\255\255\255\255\033\001\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\065\001\066\001\067\001\
\255\255\069\001\070\001\071\001\072\001\255\255\255\255\075\001\
\255\255\077\001\255\255\255\255\080\001\081\001\005\001\083\001\
\084\001\085\001\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\103\001\255\255\105\001\255\255\255\255\255\255\
\255\255\255\255\102\001\255\255\113\001\255\255\115\001\030\001\
\255\255\255\255\033\001\034\001\255\255\113\001\037\001\115\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\065\001\066\001\067\001\005\001\069\001\070\001\
\071\001\072\001\255\255\255\255\075\001\255\255\077\001\255\255\
\255\255\080\001\081\001\255\255\083\001\084\001\085\001\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\033\001\034\001\255\255\255\255\037\001\255\255\102\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\113\001\255\255\115\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\255\255\255\255\255\255\255\255\
\255\255\065\001\066\001\067\001\005\001\069\001\070\001\071\001\
\072\001\255\255\255\255\075\001\255\255\077\001\255\255\255\255\
\080\001\081\001\255\255\083\001\084\001\085\001\086\001\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\033\001\034\001\255\255\255\255\037\001\255\255\102\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\113\001\255\255\115\001\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\255\255\
\065\001\066\001\067\001\005\001\069\001\070\001\255\255\255\255\
\255\255\255\255\075\001\255\255\077\001\255\255\255\255\080\001\
\081\001\255\255\083\001\084\001\085\001\086\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\033\001\
\034\001\255\255\255\255\037\001\255\255\102\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\113\001\255\255\115\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\255\255\255\255\255\255\255\255\255\255\065\001\
\066\001\067\001\005\001\069\001\070\001\255\255\255\255\255\255\
\255\255\075\001\255\255\077\001\255\255\255\255\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\255\255\255\255\033\001\034\001\
\255\255\255\255\037\001\255\255\102\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\113\001\
\255\255\115\001\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\255\255\255\255\255\255\255\255\255\255\065\001\066\001\
\067\001\005\001\069\001\070\001\255\255\255\255\255\255\255\255\
\075\001\255\255\077\001\255\255\255\255\080\001\081\001\255\255\
\083\001\084\001\085\001\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\033\001\034\001\255\255\
\255\255\037\001\255\255\102\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\065\001\066\001\067\001\
\005\001\069\001\070\001\255\255\255\255\255\255\255\255\075\001\
\255\255\077\001\255\255\255\255\080\001\081\001\255\255\083\001\
\084\001\085\001\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\033\001\034\001\255\255\255\255\
\037\001\255\255\102\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\255\255\115\001\
\053\001\054\001\055\001\056\001\057\001\058\001\255\255\255\255\
\255\255\005\001\255\255\255\255\065\001\066\001\067\001\255\255\
\069\001\070\001\255\255\255\255\255\255\255\255\075\001\255\255\
\077\001\255\255\255\255\080\001\081\001\255\255\083\001\084\001\
\085\001\086\001\030\001\255\255\255\255\033\001\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\102\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\255\255\113\001\255\255\115\001\255\255\
\255\255\255\255\005\001\255\255\255\255\065\001\066\001\067\001\
\255\255\069\001\070\001\255\255\255\255\255\255\255\255\075\001\
\255\255\077\001\255\255\255\255\080\001\081\001\255\255\083\001\
\084\001\085\001\086\001\030\001\255\255\255\255\033\001\034\001\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\102\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\255\255\115\001\
\255\255\255\255\255\255\005\001\255\255\255\255\065\001\066\001\
\067\001\255\255\069\001\070\001\255\255\255\255\255\255\255\255\
\075\001\255\255\077\001\255\255\255\255\080\001\081\001\255\255\
\083\001\084\001\085\001\086\001\030\001\255\255\255\255\033\001\
\034\001\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\102\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\113\001\255\255\
\115\001\255\255\255\255\255\255\005\001\255\255\255\255\065\001\
\066\001\067\001\255\255\069\001\070\001\255\255\255\255\255\255\
\255\255\075\001\255\255\077\001\255\255\255\255\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\030\001\255\255\255\255\
\033\001\034\001\255\255\255\255\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\102\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\113\001\
\255\255\115\001\255\255\255\255\255\255\005\001\255\255\255\255\
\255\255\066\001\067\001\255\255\069\001\070\001\255\255\255\255\
\255\255\255\255\075\001\255\255\077\001\255\255\255\255\080\001\
\081\001\005\001\083\001\084\001\085\001\086\001\030\001\255\255\
\255\255\033\001\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\102\001\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\033\001\034\001\255\255\
\113\001\037\001\115\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\066\001\067\001\255\255\069\001\070\001\255\255\
\255\255\255\255\255\255\075\001\255\255\077\001\255\255\255\255\
\080\001\081\001\005\001\083\001\084\001\085\001\086\001\255\255\
\255\255\069\001\070\001\255\255\255\255\255\255\255\255\075\001\
\255\255\077\001\255\255\255\255\080\001\081\001\102\001\083\001\
\084\001\085\001\086\001\030\001\255\255\255\255\033\001\034\001\
\255\255\113\001\037\001\115\001\255\255\255\255\255\255\255\255\
\255\255\005\001\102\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\113\001\255\255\115\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\070\001\255\255\033\001\034\001\255\255\
\075\001\037\001\077\001\255\255\255\255\080\001\081\001\255\255\
\083\001\084\001\085\001\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\102\001\255\255\255\255\255\255\255\255\
\255\255\255\255\070\001\255\255\255\255\255\255\113\001\075\001\
\115\001\077\001\255\255\255\255\080\001\081\001\255\255\083\001\
\084\001\085\001\086\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\102\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\113\001\255\255\115\001\
\255\255\255\255\038\001\039\001\040\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\255\255\064\001\065\001\255\255\255\255\
\068\001\069\001\255\255\255\255\255\255\073\001\074\001\075\001\
\076\001\013\001\078\001\079\001\080\001\081\001\255\255\083\001\
\084\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\255\255\106\001\107\001\
\255\255\109\001\255\255\111\001\112\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\255\255\065\001\066\001\067\001\
\255\255\069\001\070\001\071\001\072\001\255\255\255\255\075\001\
\255\255\255\255\255\255\079\001\080\001\255\255\082\001\083\001\
\084\001\255\255\086\001\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\106\001\107\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\118\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\255\255\078\001\079\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\106\001\
\107\001\032\001\109\001\255\255\111\001\112\001\255\255\038\001\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\255\255\064\001\065\001\255\255\255\255\068\001\069\001\255\255\
\255\255\255\255\073\001\074\001\255\255\076\001\255\255\255\255\
\255\255\080\001\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\106\001\107\001\255\255\109\001\255\255\
\111\001\112\001\038\001\039\001\040\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\255\255\064\001\065\001\255\255\255\255\
\068\001\069\001\255\255\255\255\255\255\073\001\074\001\255\255\
\076\001\255\255\078\001\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\106\001\107\001\
\255\255\109\001\255\255\111\001\112\001\038\001\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\255\255\064\001\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\073\001\074\001\255\255\076\001\255\255\078\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\106\001\107\001\255\255\109\001\255\255\111\001\112\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\074\001\255\255\076\001\255\255\
\078\001\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\106\001\107\001\255\255\109\001\
\255\255\111\001\112\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\255\255\255\255\255\255\255\255\255\255\255\255\
\083\001\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\106\001\
\107\001\255\255\109\001\255\255\111\001\112\001\255\255\255\255\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\074\001\255\255\076\001\255\255\
\255\255\255\255\080\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\106\001\107\001\255\255\109\001\
\255\255\111\001\112\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\255\255\078\001\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\106\001\
\107\001\255\255\109\001\255\255\111\001\112\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\255\255\
\064\001\065\001\255\255\255\255\068\001\069\001\255\255\255\255\
\255\255\073\001\074\001\255\255\076\001\255\255\255\255\255\255\
\080\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\106\001\107\001\255\255\109\001\255\255\111\001\
\112\001\038\001\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\255\255\255\255\064\001\065\001\255\255\255\255\068\001\
\069\001\255\255\255\255\255\255\073\001\074\001\255\255\076\001\
\255\255\255\255\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\106\001\107\001\255\255\
\109\001\255\255\111\001\112\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\255\255\064\001\065\001\
\255\255\255\255\068\001\069\001\255\255\255\255\255\255\073\001\
\074\001\255\255\076\001\255\255\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\106\001\107\001\255\255\109\001\255\255\111\001\112\001\038\001\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\255\255\064\001\065\001\255\255\255\255\068\001\069\001\255\255\
\255\255\255\255\073\001\074\001\255\255\076\001\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\106\001\107\001\255\255\109\001\255\255\
\111\001\112\001\038\001\039\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\255\255\064\001\065\001\255\255\255\255\
\068\001\069\001\255\255\255\255\255\255\073\001\074\001\255\255\
\076\001\255\255\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\106\001\107\001\
\255\255\109\001\255\255\111\001\112\001\038\001\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\255\255\064\001\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\073\001\074\001\255\255\076\001\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\106\001\107\001\255\255\109\001\255\255\111\001\112\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\255\255\064\001\065\001\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\073\001\074\001\255\255\076\001\255\255\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\106\001\107\001\255\255\109\001\
\255\255\111\001\112\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\073\001\074\001\
\255\255\076\001\255\255\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\106\001\
\107\001\033\001\109\001\255\255\111\001\112\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\255\255\
\064\001\065\001\255\255\255\255\068\001\255\255\030\001\255\255\
\255\255\033\001\255\255\075\001\076\001\255\255\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\093\001\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\255\255\
\064\001\065\001\106\001\107\001\068\001\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\076\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\093\001\065\001\066\001\
\067\001\255\255\069\001\070\001\071\001\072\001\255\255\255\255\
\075\001\255\255\106\001\107\001\079\001\080\001\040\001\082\001\
\083\001\084\001\255\255\086\001\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\255\255\065\001\
\066\001\067\001\255\255\069\001\070\001\071\001\072\001\255\255\
\255\255\075\001\255\255\118\001\255\255\079\001\080\001\040\001\
\082\001\083\001\084\001\255\255\086\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\065\001\066\001\067\001\255\255\069\001\070\001\071\001\072\001\
\255\255\255\255\075\001\255\255\118\001\255\255\040\001\080\001\
\255\255\082\001\083\001\084\001\255\255\086\001\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\255\255\065\001\
\066\001\067\001\255\255\069\001\070\001\071\001\072\001\255\255\
\255\255\075\001\255\255\040\001\255\255\118\001\080\001\255\255\
\082\001\083\001\084\001\255\255\086\001\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\255\255\255\255\255\255\255\255\065\001\066\001\067\001\255\255\
\069\001\070\001\071\001\072\001\255\255\255\255\075\001\255\255\
\040\001\255\255\255\255\080\001\118\001\082\001\083\001\084\001\
\255\255\086\001\255\255\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\255\255\255\255\255\255\
\255\255\065\001\066\001\067\001\255\255\069\001\070\001\071\001\
\072\001\255\255\255\255\075\001\255\255\040\001\255\255\255\255\
\080\001\118\001\082\001\083\001\084\001\255\255\086\001\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\255\255\255\255\255\255\255\255\065\001\066\001\
\067\001\255\255\069\001\070\001\071\001\072\001\255\255\255\255\
\075\001\255\255\040\001\255\255\255\255\080\001\118\001\082\001\
\083\001\084\001\255\255\086\001\255\255\255\255\255\255\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\255\255\255\255\
\255\255\255\255\255\255\065\001\066\001\067\001\255\255\069\001\
\070\001\071\001\072\001\255\255\255\255\075\001\255\255\040\001\
\255\255\255\255\080\001\118\001\082\001\083\001\084\001\255\255\
\086\001\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\255\255\
\065\001\066\001\067\001\255\255\069\001\070\001\071\001\072\001\
\255\255\255\255\075\001\255\255\040\001\255\255\255\255\080\001\
\118\001\082\001\083\001\084\001\255\255\086\001\255\255\255\255\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\065\001\066\001\067\001\
\255\255\069\001\070\001\255\255\255\255\255\255\255\255\075\001\
\255\255\040\001\255\255\255\255\080\001\118\001\082\001\083\001\
\084\001\255\255\086\001\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\255\255\255\255\255\255\255\255\
\255\255\255\255\065\001\066\001\067\001\255\255\069\001\070\001\
\255\255\255\255\255\255\255\255\075\001\255\255\040\001\255\255\
\255\255\080\001\118\001\082\001\083\001\084\001\255\255\086\001\
\255\255\255\255\255\255\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\255\255\255\255\255\255\040\001\255\255\065\001\
\066\001\067\001\255\255\069\001\070\001\255\255\255\255\255\255\
\255\255\075\001\053\001\054\001\255\255\255\255\080\001\118\001\
\082\001\083\001\084\001\255\255\086\001\040\001\065\001\066\001\
\067\001\255\255\069\001\070\001\255\255\255\255\255\255\255\255\
\075\001\255\255\053\001\054\001\255\255\080\001\255\255\082\001\
\083\001\084\001\255\255\086\001\040\001\255\255\065\001\066\001\
\067\001\255\255\069\001\070\001\118\001\255\255\255\255\255\255\
\075\001\053\001\054\001\255\255\255\255\080\001\255\255\082\001\
\083\001\084\001\255\255\086\001\255\255\065\001\066\001\067\001\
\255\255\069\001\070\001\118\001\255\255\255\255\255\255\075\001\
\255\255\255\255\255\255\255\255\080\001\255\255\082\001\083\001\
\084\001\255\255\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\118\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\118\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\255\255\065\001\066\001\067\001\255\255\
\069\001\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\255\255\079\001\255\255\081\001\255\255\083\001\084\001\
\255\255\086\001"

let yynames_const = "\
  EOF\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  SLASH\000\
  PERCENT\000\
  PIPE\000\
  CIRC\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COLON2\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  ELSE\000\
  LABEL__\000\
  BLOCKATTRIBUTE\000\
  PRAGMA_EOL\000\
  LGHOST\000\
  RGHOST\000\
  "

let yynames_block = "\
  SPEC\000\
  DECL\000\
  CODE_ANNOT\000\
  LOOP_ANNOT\000\
  ATTRIBUTE_ANNOT\000\
  CUSTOM_ANNOT\000\
  IDENT\000\
  CST_CHAR\000\
  CST_WCHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  NAMED_TYPE\000\
  CST_STRING\000\
  CST_WSTRING\000\
  BOOL\000\
  CHAR\000\
  INT\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  INT64\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  RESTRICT\000\
  AUTO\000\
  REGISTER\000\
  THREAD\000\
  SIZEOF\000\
  ALIGNOF\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  TILDE\000\
  AND\000\
  EXCLAM\000\
  AND_AND\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  SEMICOLON\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  TRY\000\
  EXCEPT\000\
  FINALLY\000\
  ATTRIBUTE\000\
  INLINE\000\
  ASM\000\
  TYPEOF\000\
  FUNCTION__\000\
  PRETTY_FUNCTION__\000\
  BUILTIN_VA_ARG\000\
  BUILTIN_TYPES_COMPAT\000\
  BUILTIN_OFFSETOF\000\
  DECLSPEC\000\
  MSASM\000\
  MSATTR\000\
  PRAGMA_LINE\000\
  PRAGMA\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (bool*Cabs.definition) list) in
    Obj.repr(
# 436 "src/kernel_internals/parsing/cparser.mly"
                ( _1 )
# 3141 "src/kernel_internals/parsing/cparser.ml"
               : (bool*Cabs.definition) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : (bool*Cabs.definition) list) in
    Obj.repr(
# 438 "src/kernel_internals/parsing/cparser.mly"
                    (_1)
# 3148 "src/kernel_internals/parsing/cparser.ml"
               : (bool*Cabs.definition) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 441 "src/kernel_internals/parsing/cparser.mly"
                                        ( [] )
# 3154 "src/kernel_internals/parsing/cparser.ml"
               : (bool*Cabs.definition) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : (bool*Cabs.definition) list) in
    Obj.repr(
# 442 "src/kernel_internals/parsing/cparser.mly"
                                        ( (false,_1) :: _2 )
# 3162 "src/kernel_internals/parsing/cparser.ml"
               : (bool*Cabs.definition) list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ghost_globals) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (bool*Cabs.definition) list) in
    Obj.repr(
# 443 "src/kernel_internals/parsing/cparser.mly"
                                        ( _2 @ _3 )
# 3170 "src/kernel_internals/parsing/cparser.ml"
               : (bool*Cabs.definition) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : (bool*Cabs.definition) list) in
    Obj.repr(
# 444 "src/kernel_internals/parsing/cparser.mly"
                                        ( _2 )
# 3178 "src/kernel_internals/parsing/cparser.ml"
               : (bool*Cabs.definition) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ghost_globals) in
    Obj.repr(
# 449 "src/kernel_internals/parsing/cparser.mly"
                                                      ( (true,_1)::_2 )
# 3186 "src/kernel_internals/parsing/cparser.ml"
               : 'ghost_globals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ghost_globals) in
    Obj.repr(
# 450 "src/kernel_internals/parsing/cparser.mly"
                                                      ( (true,_1)::_2 )
# 3194 "src/kernel_internals/parsing/cparser.ml"
               : 'ghost_globals))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "src/kernel_internals/parsing/cparser.mly"
                                                      ( [] )
# 3200 "src/kernel_internals/parsing/cparser.ml"
               : 'ghost_globals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.decl list) in
    Obj.repr(
# 456 "src/kernel_internals/parsing/cparser.mly"
                   ( GLOBANNOT _1 )
# 3207 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.custom_tree  * string * Cabs.cabsloc) in
    Obj.repr(
# 457 "src/kernel_internals/parsing/cparser.mly"
                   ( let (x,y,z) = _1 in CUSTOM(x,y,z) )
# 3214 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 458 "src/kernel_internals/parsing/cparser.mly"
                   ( _1 )
# 3221 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 459 "src/kernel_internals/parsing/cparser.mly"
                   ( _1 )
# 3228 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 464 "src/kernel_internals/parsing/cparser.mly"
    ( LINKAGE (fst _2, (*handleLoc*) (snd _2), [ _3 ]) )
# 3237 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : (bool*Cabs.definition) list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 466 "src/kernel_internals/parsing/cparser.mly"
    ( LINKAGE (fst _2, (*handleLoc*) (snd _2),
                 List.map
                   (fun (x,y) ->
                      if x then
                        Errorloc.parse_error "invalid ghost in extern linkage \
                                              specification"
		      else y)
                   _4)  )
# 3255 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 475 "src/kernel_internals/parsing/cparser.mly"
                                        ( GLOBASM (fst _3, (*handleLoc*) _1) )
# 3265 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma) in
    Obj.repr(
# 476 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 3272 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 481 "src/kernel_internals/parsing/cparser.mly"
    (
      let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
      (* Convert pardecl to new style *)
      let pardecl, isva = doOldParDecl _3 _5 in
      (* Make the function declarator *)
      doDeclaration None loc []
        [((_1, PROTO(JUSTBASE, pardecl,isva), 
           ["FC_OLDSTYLEPROTO",[]], loc), NO_INIT)]
    )
# 3291 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 490 "src/kernel_internals/parsing/cparser.mly"
                                (
  let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
  doDeclaration None loc []
    [((_1, PROTO(JUSTBASE,[],false),
       ["FC_OLDSTYLEPROTO",[]], loc), NO_INIT)]
)
# 3305 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 499 "src/kernel_internals/parsing/cparser.mly"
             ( _1 )
# 3312 "src/kernel_internals/parsing/cparser.ml"
               : 'id_or_typename_as_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 500 "src/kernel_internals/parsing/cparser.mly"
                  ( _1 )
# 3319 "src/kernel_internals/parsing/cparser.ml"
               : 'id_or_typename_as_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename_as_id) in
    Obj.repr(
# 504 "src/kernel_internals/parsing/cparser.mly"
                          ( _1 )
# 3326 "src/kernel_internals/parsing/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 508 "src/kernel_internals/parsing/cparser.mly"
                                        ( () )
# 3332 "src/kernel_internals/parsing/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 509 "src/kernel_internals/parsing/cparser.mly"
                                        ( () )
# 3338 "src/kernel_internals/parsing/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 515 "src/kernel_internals/parsing/cparser.mly"
         ( make_expr (VARIABLE _1) )
# 3345 "src/kernel_internals/parsing/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant * cabsloc) in
    Obj.repr(
# 516 "src/kernel_internals/parsing/cparser.mly"
                   (
  let (v,expr_loc) = _1 in { expr_loc; expr_node = CONSTANT v } )
# 3353 "src/kernel_internals/parsing/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 519 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (PAREN (smooth_expression _1)) )
# 3360 "src/kernel_internals/parsing/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 520 "src/kernel_internals/parsing/cparser.mly"
                       ( make_expr (GNU_BODY (fst3 _2)) )
# 3368 "src/kernel_internals/parsing/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 524 "src/kernel_internals/parsing/cparser.mly"
                     ( _1 )
# 3375 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 526 "src/kernel_internals/parsing/cparser.mly"
      (make_expr (INDEX (_1, smooth_expression _2)))
# 3383 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 527 "src/kernel_internals/parsing/cparser.mly"
                                             (make_expr (CALL (_1, _3)))
# 3392 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 529 "src/kernel_internals/parsing/cparser.mly"
      ( let b, d = _5 in
        let loc = Parsing.rhs_start_pos 5, Parsing.rhs_end_pos 5 in
        let loc_f = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
        make_expr
          (CALL
             ({ expr_loc = loc_f;
                expr_node = VARIABLE "__builtin_va_arg"},
              [_3; { expr_loc = loc;
                     expr_node = TYPE_SIZEOF (b, d)}]))
      )
# 3411 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 540 "src/kernel_internals/parsing/cparser.mly"
      ( let b1,d1 = _3 in
        let b2,d2 = _5 in
        let loc_f = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
        let loc1 = Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 3 in
        let loc2 = Parsing.rhs_start_pos 5, Parsing.rhs_end_pos 5 in
        make_expr
          (CALL
             ({expr_loc = loc_f;
               expr_node = VARIABLE "__builtin_types_compatible_p"},
              [ { expr_loc = loc1; expr_node = TYPE_SIZEOF(b1,d1)};
                { expr_loc = loc2; expr_node = TYPE_SIZEOF(b2,d2)}]))
      )
# 3432 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    Obj.repr(
# 553 "src/kernel_internals/parsing/cparser.mly"
      ( transformOffsetOf _3 _5 )
# 3442 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 554 "src/kernel_internals/parsing/cparser.mly"
                                        ( make_expr (MEMBEROF (_1, _3)))
# 3450 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 555 "src/kernel_internals/parsing/cparser.mly"
                                          ( make_expr (MEMBEROFPTR (_1, _3)) )
# 3458 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 556 "src/kernel_internals/parsing/cparser.mly"
                               ( make_expr (UNARY (POSINCR, _1)) )
# 3466 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 557 "src/kernel_internals/parsing/cparser.mly"
                                 ( make_expr (UNARY (POSDECR, _1)) )
# 3474 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 560 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (CAST(_2, COMPOUND_INIT _5)) )
# 3485 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 564 "src/kernel_internals/parsing/cparser.mly"
                  ( make_expr (VARIABLE _1) )
# 3492 "src/kernel_internals/parsing/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'offsetof_member_designator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 566 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (MEMBEROF (_1, _3)) )
# 3500 "src/kernel_internals/parsing/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 568 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (INDEX (_1, smooth_expression _2)) )
# 3508 "src/kernel_internals/parsing/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 573 "src/kernel_internals/parsing/cparser.mly"
                        ( _1 )
# 3515 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 575 "src/kernel_internals/parsing/cparser.mly"
          (make_expr (UNARY (PREINCR, _2)))
# 3523 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 577 "src/kernel_internals/parsing/cparser.mly"
          (make_expr (UNARY (PREDECR, _2)))
# 3531 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 579 "src/kernel_internals/parsing/cparser.mly"
          (make_expr (EXPR_SIZEOF _2))
# 3539 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 581 "src/kernel_internals/parsing/cparser.mly"
          (let b, d = _3 in make_expr (TYPE_SIZEOF (b, d)) )
# 3548 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 583 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (EXPR_ALIGNOF _2) )
# 3556 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 585 "src/kernel_internals/parsing/cparser.mly"
          (let b, d = _3 in make_expr (TYPE_ALIGNOF (b, d)) )
# 3565 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 587 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (UNARY (PLUS, _2)) )
# 3573 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 589 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (UNARY (MINUS, _2)) )
# 3581 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 591 "src/kernel_internals/parsing/cparser.mly"
          (make_expr (UNARY (MEMOF, _2)) )
# 3589 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 593 "src/kernel_internals/parsing/cparser.mly"
          (make_expr (UNARY (ADDROF, _2)))
# 3597 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 595 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (UNARY (NOT, _2)) )
# 3605 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 597 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (UNARY (BNOT, _2)) )
# 3613 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename_as_id) in
    Obj.repr(
# 599 "src/kernel_internals/parsing/cparser.mly"
                                             ( make_expr (LABELADDR _2) )
# 3621 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 603 "src/kernel_internals/parsing/cparser.mly"
                   ( _1 )
# 3628 "src/kernel_internals/parsing/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 605 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (CAST(_2, SINGLE_INIT _4)) )
# 3637 "src/kernel_internals/parsing/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 609 "src/kernel_internals/parsing/cparser.mly"
                  ( _1 )
# 3644 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 611 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (BINARY(MUL, _1, _3)) )
# 3653 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 613 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (BINARY(DIV, _1, _3)) )
# 3661 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 615 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (BINARY(MOD, _1, _3)) )
# 3669 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 619 "src/kernel_internals/parsing/cparser.mly"
                                          ( _1 )
# 3676 "src/kernel_internals/parsing/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 621 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(ADD, _1, _3)) )
# 3685 "src/kernel_internals/parsing/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 623 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(SUB, _1, _3)) )
# 3694 "src/kernel_internals/parsing/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 627 "src/kernel_internals/parsing/cparser.mly"
                                    ( _1 )
# 3701 "src/kernel_internals/parsing/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 629 "src/kernel_internals/parsing/cparser.mly"
   (make_expr (BINARY(SHL, _1, _3)) )
# 3709 "src/kernel_internals/parsing/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 631 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(SHR, _1, _3)) )
# 3717 "src/kernel_internals/parsing/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 636 "src/kernel_internals/parsing/cparser.mly"
                                 ( _1 )
# 3724 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 638 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(LT, _1, _3)) )
# 3732 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 640 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(GT, _1, _3)) )
# 3740 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 642 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(LE, _1, _3)) )
# 3748 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 644 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(GE, _1, _3)) )
# 3756 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 648 "src/kernel_internals/parsing/cparser.mly"
                        ( _1 )
# 3763 "src/kernel_internals/parsing/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 650 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (BINARY(EQ, _1, _3)) )
# 3771 "src/kernel_internals/parsing/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 652 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (BINARY(NE, _1, _3)) )
# 3779 "src/kernel_internals/parsing/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 656 "src/kernel_internals/parsing/cparser.mly"
                                    ( _1 )
# 3786 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 658 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(BAND, _1, _3)) )
# 3795 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 662 "src/kernel_internals/parsing/cparser.mly"
                                       ( _1 )
# 3802 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 664 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(XOR, _1, _3)) )
# 3810 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 668 "src/kernel_internals/parsing/cparser.mly"
                                       ( _1 )
# 3817 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 670 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(BOR, _1, _3)) )
# 3825 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 674 "src/kernel_internals/parsing/cparser.mly"
                                      ( _1 )
# 3832 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 676 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(AND, _1, _3)) )
# 3841 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 680 "src/kernel_internals/parsing/cparser.mly"
                                       ( _1 )
# 3848 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 682 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(OR, _1, _3)) )
# 3856 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_expression) in
    Obj.repr(
# 686 "src/kernel_internals/parsing/cparser.mly"
                        ( _1 )
# 3863 "src/kernel_internals/parsing/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 688 "src/kernel_internals/parsing/cparser.mly"
      ( make_expr (QUESTION (_1, _3, _5)) )
# 3872 "src/kernel_internals/parsing/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 695 "src/kernel_internals/parsing/cparser.mly"
                                       ( _1 )
# 3879 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 697 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(ASSIGN, _1, _3)) )
# 3887 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 699 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(ADD_ASSIGN, _1, _3)) )
# 3895 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 701 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(SUB_ASSIGN, _1, _3)) )
# 3903 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 703 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(MUL_ASSIGN, _1, _3)) )
# 3911 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 705 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(DIV_ASSIGN, _1, _3)) )
# 3919 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 707 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(MOD_ASSIGN, _1, _3)) )
# 3927 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 709 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(BAND_ASSIGN, _1, _3)) )
# 3935 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 711 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(BOR_ASSIGN, _1, _3)) )
# 3943 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 713 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(XOR_ASSIGN, _1, _3)) )
# 3951 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 715 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(SHL_ASSIGN, _1, _3)) )
# 3959 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 717 "src/kernel_internals/parsing/cparser.mly"
   ( make_expr (BINARY(SHR_ASSIGN, _1, _3)))
# 3967 "src/kernel_internals/parsing/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 721 "src/kernel_internals/parsing/cparser.mly"
                                      ( _1 )
# 3974 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 726 "src/kernel_internals/parsing/cparser.mly"
               (CONST_INT (fst _1), snd _1)
# 3981 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 727 "src/kernel_internals/parsing/cparser.mly"
                 (CONST_FLOAT (fst _1), snd _1)
# 3988 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 728 "src/kernel_internals/parsing/cparser.mly"
                (CONST_CHAR (fst _1), snd _1)
# 3995 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 729 "src/kernel_internals/parsing/cparser.mly"
                 (CONST_WCHAR (fst _1), snd _1)
# 4002 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 730 "src/kernel_internals/parsing/cparser.mly"
                             (CONST_STRING (fst _1), snd _1)
# 4009 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 731 "src/kernel_internals/parsing/cparser.mly"
                   (CONST_WSTRING (fst _1), snd _1)
# 4016 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 737 "src/kernel_internals/parsing/cparser.mly"
                                        ( intlist_to_string (fst _1), snd _1 )
# 4023 "src/kernel_internals/parsing/cparser.ml"
               : string * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 741 "src/kernel_internals/parsing/cparser.mly"
                                        ( intlist_to_string (fst _1) )
# 4030 "src/kernel_internals/parsing/cparser.ml"
               : 'one_string_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 744 "src/kernel_internals/parsing/cparser.mly"
                                        ( fst _1, snd _1 )
# 4037 "src/kernel_internals/parsing/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 745 "src/kernel_internals/parsing/cparser.mly"
                                        ( merge_string _1 _2 )
# 4045 "src/kernel_internals/parsing/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 749 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 4052 "src/kernel_internals/parsing/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 750 "src/kernel_internals/parsing/cparser.mly"
                                        ( merge_string _1 _2 )
# 4060 "src/kernel_internals/parsing/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 751 "src/kernel_internals/parsing/cparser.mly"
                                        ( merge_string _1 _2 )
# 4068 "src/kernel_internals/parsing/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 752 "src/kernel_internals/parsing/cparser.mly"
                                        ( merge_string _1 _2 )
# 4076 "src/kernel_internals/parsing/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 756 "src/kernel_internals/parsing/cparser.mly"
                  (_1)
# 4083 "src/kernel_internals/parsing/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 757 "src/kernel_internals/parsing/cparser.mly"
                                        ((Cabshelper.explodeStringToInts
					    !currentFunctionName), _1)
# 4091 "src/kernel_internals/parsing/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 759 "src/kernel_internals/parsing/cparser.mly"
                                        ((Cabshelper.explodeStringToInts
					    !currentFunctionName), _1)
# 4099 "src/kernel_internals/parsing/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 764 "src/kernel_internals/parsing/cparser.mly"
                        ( SINGLE_INIT _1 )
# 4106 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 766 "src/kernel_internals/parsing/cparser.mly"
   ( COMPOUND_INIT _2)
# 4115 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat * Cabs.init_expression) in
    Obj.repr(
# 769 "src/kernel_internals/parsing/cparser.mly"
                                                   ( [_1] )
# 4122 "src/kernel_internals/parsing/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat * Cabs.init_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initializer_list_opt) in
    Obj.repr(
# 770 "src/kernel_internals/parsing/cparser.mly"
                                                   ( _1 :: _3 )
# 4130 "src/kernel_internals/parsing/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 773 "src/kernel_internals/parsing/cparser.mly"
                                            ( [] )
# 4136 "src/kernel_internals/parsing/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.initwhat * Cabs.init_expression) list) in
    Obj.repr(
# 774 "src/kernel_internals/parsing/cparser.mly"
                                            ( _1 )
# 4143 "src/kernel_internals/parsing/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'eq_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 777 "src/kernel_internals/parsing/cparser.mly"
                                            ( (_1, _3) )
# 4152 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gcc_init_designators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 778 "src/kernel_internals/parsing/cparser.mly"
                                         ( (_1, _2) )
# 4160 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 779 "src/kernel_internals/parsing/cparser.mly"
                                        ( (NEXT_INIT, _1) )
# 4167 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 782 "src/kernel_internals/parsing/cparser.mly"
                             ( () )
# 4173 "src/kernel_internals/parsing/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 784 "src/kernel_internals/parsing/cparser.mly"
                                 ( () )
# 4179 "src/kernel_internals/parsing/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 787 "src/kernel_internals/parsing/cparser.mly"
                                                 ( INFIELD_INIT(_2, _3) )
# 4187 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 788 "src/kernel_internals/parsing/cparser.mly"
                                                       ( ATINDEX_INIT(_2, _4) )
# 4195 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 790 "src/kernel_internals/parsing/cparser.mly"
        ( ATINDEXRANGE_INIT(_2, _4) )
# 4203 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    Obj.repr(
# 793 "src/kernel_internals/parsing/cparser.mly"
                                        ( NEXT_INIT )
# 4209 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 794 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 4216 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    Obj.repr(
# 798 "src/kernel_internals/parsing/cparser.mly"
                                        ( INFIELD_INIT(_1, NEXT_INIT) )
# 4223 "src/kernel_internals/parsing/cparser.ml"
               : 'gcc_init_designators))
; (fun __caml_parser_env ->
    Obj.repr(
# 802 "src/kernel_internals/parsing/cparser.mly"
                                    ( [] )
# 4229 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 803 "src/kernel_internals/parsing/cparser.mly"
                                    ( _1 )
# 4236 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 807 "src/kernel_internals/parsing/cparser.mly"
                     (make_expr NOTHING)
# 4242 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 808 "src/kernel_internals/parsing/cparser.mly"
                           (smooth_expression _1 )
# 4249 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 812 "src/kernel_internals/parsing/cparser.mly"
                                           ( [_1] )
# 4256 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 813 "src/kernel_internals/parsing/cparser.mly"
                                                  ( _1 :: _3 )
# 4264 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 817 "src/kernel_internals/parsing/cparser.mly"
                                    ( make_expr NOTHING )
# 4270 "src/kernel_internals/parsing/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 818 "src/kernel_internals/parsing/cparser.mly"
                                    ( smooth_expression _1 )
# 4277 "src/kernel_internals/parsing/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 822 "src/kernel_internals/parsing/cparser.mly"
                                                   ( _2 )
# 4285 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 826 "src/kernel_internals/parsing/cparser.mly"
                                                       ( _2 )
# 4292 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'block_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block_attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 833 "src/kernel_internals/parsing/cparser.mly"
      (!Lexerhack.pop_context();
       { blabels = _2;
         battrs = _3;
         bstmts = _4 },
       _1, _5
      )
# 4308 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 841 "src/kernel_internals/parsing/cparser.mly"
            ( !Lexerhack.push_context (); _1 )
# 4315 "src/kernel_internals/parsing/cparser.ml"
               : 'block_begin))
; (fun __caml_parser_env ->
    Obj.repr(
# 845 "src/kernel_internals/parsing/cparser.mly"
                                                            ( [] )
# 4321 "src/kernel_internals/parsing/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 847 "src/kernel_internals/parsing/cparser.mly"
                                        ( [("__blockattribute__", _2)] )
# 4328 "src/kernel_internals/parsing/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annot_list_opt) in
    Obj.repr(
# 852 "src/kernel_internals/parsing/cparser.mly"
                                                        ( _1 )
# 4335 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annot_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 854 "src/kernel_internals/parsing/cparser.mly"
        ( _1 @ no_ghost_stmt (DEFINITION(_2)) :: _3 )
# 4344 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annot_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 856 "src/kernel_internals/parsing/cparser.mly"
            ( _1 @ _2 @ _3 )
# 4353 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annot_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 857 "src/kernel_internals/parsing/cparser.mly"
                                                        ( _1 @ _3 )
# 4362 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'annot_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename_as_id) in
    Obj.repr(
# 860 "src/kernel_internals/parsing/cparser.mly"
    ( let loc = Parsing.rhs_start_pos 2, Parsing.rhs_end_pos 3 in
      _1 @ no_ghost [LABEL (_2, no_ghost_stmt (NOP loc), loc)] )
# 4371 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 865 "src/kernel_internals/parsing/cparser.mly"
                    ( [] )
# 4377 "src/kernel_internals/parsing/cparser.ml"
               : 'annot_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annot_list) in
    Obj.repr(
# 866 "src/kernel_internals/parsing/cparser.mly"
                    ( _1 )
# 4384 "src/kernel_internals/parsing/cparser.ml"
               : 'annot_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Logic_ptree.code_annot * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'annot_list_opt) in
    Obj.repr(
# 870 "src/kernel_internals/parsing/cparser.mly"
                             ( no_ghost [Cabs.CODE_ANNOT _1] @ _2)
# 4392 "src/kernel_internals/parsing/cparser.ml"
               : 'annot_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annot_list_opt) in
    Obj.repr(
# 872 "src/kernel_internals/parsing/cparser.mly"
       ( (in_ghost _2) @ _4 )
# 4400 "src/kernel_internals/parsing/cparser.ml"
               : 'annot_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 876 "src/kernel_internals/parsing/cparser.mly"
                                                     ( [] )
# 4406 "src/kernel_internals/parsing/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 877 "src/kernel_internals/parsing/cparser.mly"
                                                     ( _2 @ _4 )
# 4415 "src/kernel_internals/parsing/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename_as_id) in
    Obj.repr(
# 880 "src/kernel_internals/parsing/cparser.mly"
                                                     ( [ _1 ] )
# 4422 "src/kernel_internals/parsing/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_or_typename_as_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 881 "src/kernel_internals/parsing/cparser.mly"
                                                     ( _1 :: _3 )
# 4430 "src/kernel_internals/parsing/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 886 "src/kernel_internals/parsing/cparser.mly"
              ( _1 )
# 4437 "src/kernel_internals/parsing/cparser.ml"
               : 'annotated_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'annot_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 887 "src/kernel_internals/parsing/cparser.mly"
                         ( _1 @ _2 )
# 4445 "src/kernel_internals/parsing/cparser.ml"
               : 'annotated_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 891 "src/kernel_internals/parsing/cparser.mly"
               ( no_ghost [NOP _1] )
# 4452 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Lexing.position * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 893 "src/kernel_internals/parsing/cparser.mly"
      (
        let bs = _2 in
        match Logic_lexer.spec _1 with
        | Some (loc',spec) ->
          let spec = no_ghost [Cabs.CODE_SPEC (spec, (fst _1, loc'))] in
          spec @ _2
        | None -> bs
      )
# 4467 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 902 "src/kernel_internals/parsing/cparser.mly"
   ( let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
            no_ghost [COMPUTATION (smooth_expression _1,loc)])
# 4476 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 904 "src/kernel_internals/parsing/cparser.mly"
          ( let (x,y,z) = _1 in no_ghost [BLOCK (x, y, z)])
# 4483 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 906 "src/kernel_internals/parsing/cparser.mly"
        ( let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
          no_ghost [IF (smooth_expression _2,
                       in_block _3, no_ghost_stmt (NOP loc), loc)])
# 4494 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'annotated_statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 910 "src/kernel_internals/parsing/cparser.mly"
 ( let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
          no_ghost
            [IF (smooth_expression _2, in_block _3, in_block _5, loc)])
# 4506 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 914 "src/kernel_internals/parsing/cparser.mly"
        ( let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
          no_ghost [SWITCH (smooth_expression _2, in_block _3, loc)])
# 4516 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'opt_loop_annotations) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 918 "src/kernel_internals/parsing/cparser.mly"
    ( let loc = Parsing.rhs_start_pos 2, Parsing.symbol_end_pos () in
      no_ghost [WHILE (_1, smooth_expression _3, in_block _4, loc)] )
# 4527 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'opt_loop_annotations) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'annotated_statement) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 922 "src/kernel_internals/parsing/cparser.mly"
    ( let loc = Parsing.rhs_start_pos 2, Parsing.symbol_end_pos () in
      no_ghost [DOWHILE (_1, smooth_expression _5, in_block _3, loc)])
# 4540 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'opt_loop_annotations) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'for_clause) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 927 "src/kernel_internals/parsing/cparser.mly"
    ( let loc = Parsing.rhs_start_pos 2, Parsing.symbol_end_pos () in
      no_ghost [FOR (_1, _4, _5, _7, in_block _9, loc)])
# 4555 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename_as_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 930 "src/kernel_internals/parsing/cparser.mly"
 ((* The only attribute that should appear here
            is "unused". For now, we drop this on the
            floor, since unused labels are usually
            removed anyways by Rmtmps. *)
          let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 2 in
          no_ghost [LABEL (_1, in_block _4, loc)])
# 4569 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 937 "src/kernel_internals/parsing/cparser.mly"
     ( let loc = Parsing.symbol_start_pos (), Parsing.rhs_end_pos 3 in
              no_ghost [CASE (_2, in_block _4, loc)])
# 4579 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 940 "src/kernel_internals/parsing/cparser.mly"
     ( let loc = Parsing.symbol_start_pos (), Parsing.rhs_end_pos 5 in
              no_ghost [CASERANGE (_2, _4, in_block _6, loc)])
# 4590 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_statement) in
    Obj.repr(
# 943 "src/kernel_internals/parsing/cparser.mly"
        ( let loc = Parsing.symbol_start_pos(), Parsing.symbol_end_pos () in
              no_ghost [DEFAULT (in_block _3, loc)])
# 4599 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 945 "src/kernel_internals/parsing/cparser.mly"
                     (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [RETURN ({ expr_loc = loc; expr_node = NOTHING}, loc)]
    )
# 4610 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 949 "src/kernel_internals/parsing/cparser.mly"
                                      (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [RETURN (smooth_expression _2, loc)]
    )
# 4622 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 953 "src/kernel_internals/parsing/cparser.mly"
                        (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [BREAK loc]
    )
# 4633 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 957 "src/kernel_internals/parsing/cparser.mly"
                        (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [CONTINUE loc]
    )
# 4644 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename_as_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 961 "src/kernel_internals/parsing/cparser.mly"
                                        (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [GOTO (_2, loc)]
    )
# 4656 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 965 "src/kernel_internals/parsing/cparser.mly"
                                         (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [COMPGOTO (smooth_expression _3, loc) ]
    )
# 4669 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 969 "src/kernel_internals/parsing/cparser.mly"
                                                                    (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [ASM (_3, _5, _6, loc)]
    )
# 4685 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 973 "src/kernel_internals/parsing/cparser.mly"
                                                               (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      no_ghost [ASM (_2, _4, _5, loc)]
    )
# 4700 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 977 "src/kernel_internals/parsing/cparser.mly"
            ( no_ghost [ASM ([], [fst _1], None, snd _1)])
# 4707 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 978 "src/kernel_internals/parsing/cparser.mly"
                                                  (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      let loc_e = Parsing.rhs_start_pos 4, Parsing.rhs_end_pos 4 in
      let b, _, _ = _2 in
      let h, _, _ = _5 in
      if not !Cprint.msvcMode then
        Errorloc.parse_error "try/except in GCC code";
      no_ghost
        [TRY_EXCEPT (b, {expr_loc = loc_e; expr_node = COMMA _4}, h, loc)]
    )
# 4727 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 988 "src/kernel_internals/parsing/cparser.mly"
                            (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos () in
      let b, _, _ = _2 in
      let h, _, _ = _4 in
      if not !Cprint.msvcMode then
        Errorloc.parse_error "try/finally in GCC code";
      no_ghost [TRY_FINALLY (b, h, loc)]
    )
# 4744 "src/kernel_internals/parsing/cparser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 999 "src/kernel_internals/parsing/cparser.mly"
                ( [] )
# 4750 "src/kernel_internals/parsing/cparser.ml"
               : 'opt_loop_annotations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_annotations) in
    Obj.repr(
# 1000 "src/kernel_internals/parsing/cparser.mly"
                   ( _1 )
# 4757 "src/kernel_internals/parsing/cparser.ml"
               : 'opt_loop_annotations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_annotation) in
    Obj.repr(
# 1004 "src/kernel_internals/parsing/cparser.mly"
                  ( _1 )
# 4764 "src/kernel_internals/parsing/cparser.ml"
               : 'loop_annotations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Logic_ptree.code_annot list * Cabs.cabsloc) in
    Obj.repr(
# 1016 "src/kernel_internals/parsing/cparser.mly"
               ( fst _1 )
# 4771 "src/kernel_internals/parsing/cparser.ml"
               : 'loop_annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1020 "src/kernel_internals/parsing/cparser.mly"
                                 ( FC_EXP _1 )
# 4779 "src/kernel_internals/parsing/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 1021 "src/kernel_internals/parsing/cparser.mly"
                                 ( FC_DECL _1 )
# 4786 "src/kernel_internals/parsing/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1026 "src/kernel_internals/parsing/cparser.mly"
      ( doDeclaration None ((snd _1)) (fst _1) _2 )
# 4795 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1028 "src/kernel_internals/parsing/cparser.mly"
      ( doDeclaration None ((snd _1)) (fst _1) [] )
# 4803 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Lexing.position * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1030 "src/kernel_internals/parsing/cparser.mly"
          ( doDeclaration (Some _1) ((snd _2)) (fst _2) _3 )
# 4813 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lexing.position * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1032 "src/kernel_internals/parsing/cparser.mly"
      ( doDeclaration (Some _1) ((snd _2)) (fst _2) [] )
# 4822 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 1036 "src/kernel_internals/parsing/cparser.mly"
                                                 ( [_1] )
# 4829 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.init_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name list) in
    Obj.repr(
# 1037 "src/kernel_internals/parsing/cparser.mly"
                                                 ( _1 :: _3 )
# 4837 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1041 "src/kernel_internals/parsing/cparser.mly"
                                        ( (_1, NO_INIT) )
# 4844 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 1043 "src/kernel_internals/parsing/cparser.mly"
                                        ( (_1, _3) )
# 4852 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1048 "src/kernel_internals/parsing/cparser.mly"
                     ( SpecTypedef, _1  )
# 4859 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1049 "src/kernel_internals/parsing/cparser.mly"
                     ( SpecStorage EXTERN, _1 )
# 4866 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1050 "src/kernel_internals/parsing/cparser.mly"
                     ( SpecStorage STATIC, _1 )
# 4873 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1051 "src/kernel_internals/parsing/cparser.mly"
                     ( SpecStorage AUTO, _1 )
# 4880 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1052 "src/kernel_internals/parsing/cparser.mly"
                     ( SpecStorage REGISTER, _1)
# 4887 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1054 "src/kernel_internals/parsing/cparser.mly"
                     ( SpecInline, _1 )
# 4894 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.spec_elem * cabsloc) in
    Obj.repr(
# 1055 "src/kernel_internals/parsing/cparser.mly"
                     ( _1 )
# 4901 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1056 "src/kernel_internals/parsing/cparser.mly"
                     ( SpecAttr (fst _1), snd _1 )
# 4908 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_wo_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_spec_wo_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1060 "src/kernel_internals/parsing/cparser.mly"
                                       ( fst _1 :: _2, snd _1 )
# 4916 "src/kernel_internals/parsing/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 1061 "src/kernel_internals/parsing/cparser.mly"
                                        ( SpecType(fst _1) :: _2, snd _1 )
# 4924 "src/kernel_internals/parsing/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_spec_wo_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 1064 "src/kernel_internals/parsing/cparser.mly"
                                                ( fst _1 :: _2, snd _1 )
# 4932 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_list_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 1065 "src/kernel_internals/parsing/cparser.mly"
                                        ( SpecType(fst _1) :: _2, snd _1 )
# 4940 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_list_no_named))
; (fun __caml_parser_env ->
    Obj.repr(
# 1070 "src/kernel_internals/parsing/cparser.mly"
                                        ( [] )
# 4946 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1071 "src/kernel_internals/parsing/cparser.mly"
                                        ( fst _1 )
# 4953 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1078 "src/kernel_internals/parsing/cparser.mly"
                                        ( [] )
# 4959 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_no_named) in
    Obj.repr(
# 1079 "src/kernel_internals/parsing/cparser.mly"
                                                 ( fst _1 )
# 4966 "src/kernel_internals/parsing/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1082 "src/kernel_internals/parsing/cparser.mly"
                    ( Tvoid, _1)
# 4973 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1083 "src/kernel_internals/parsing/cparser.mly"
                    ( Tchar, _1 )
# 4980 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1084 "src/kernel_internals/parsing/cparser.mly"
                    ( Tbool, _1 )
# 4987 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1085 "src/kernel_internals/parsing/cparser.mly"
                    ( Tshort, _1 )
# 4994 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1086 "src/kernel_internals/parsing/cparser.mly"
                    ( Tint, _1 )
# 5001 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1087 "src/kernel_internals/parsing/cparser.mly"
                    ( Tlong, _1 )
# 5008 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1088 "src/kernel_internals/parsing/cparser.mly"
                    ( Tint64, _1 )
# 5015 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1089 "src/kernel_internals/parsing/cparser.mly"
                    ( Tfloat, _1 )
# 5022 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1090 "src/kernel_internals/parsing/cparser.mly"
                    ( Tdouble, _1 )
# 5029 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1091 "src/kernel_internals/parsing/cparser.mly"
                    ( Tsigned, _1 )
# 5036 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1092 "src/kernel_internals/parsing/cparser.mly"
                    ( Tunsigned, _1 )
# 5043 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1094 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tstruct (_2, None,    []), _1 )
# 5051 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1096 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tstruct (_3, None,    _2), _1 )
# 5060 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1098 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tstruct (_2, Some _4, []), _1 )
# 5071 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1100 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tstruct ("", Some _3, []), _1 )
# 5081 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1102 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tstruct (_3, Some _5, _2), _1 )
# 5093 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1104 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tstruct ("", Some _4, _2), _1 )
# 5104 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1106 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tunion  (_2, None,    []), _1 )
# 5112 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1108 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tunion  (_2, Some _4, []), _1 )
# 5123 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1110 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tunion  ("", Some _3, []), _1 )
# 5133 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1112 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tunion  (_3, Some _5, _2), _1 )
# 5145 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1114 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tunion  ("", Some _4, _2), _1 )
# 5156 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1116 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tenum   (_2, None,    []), _1 )
# 5164 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1118 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tenum   (_2, Some _4, []), _1 )
# 5176 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1120 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tenum   ("", Some _3, []), _1 )
# 5187 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1122 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tenum   (_3, Some _5, _2), _1 )
# 5200 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1124 "src/kernel_internals/parsing/cparser.mly"
                                                   ( Tenum   ("", Some _4, _2), _1 )
# 5212 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1125 "src/kernel_internals/parsing/cparser.mly"
                    (
      (Tnamed _1, (Parsing.symbol_start_pos (), Parsing.symbol_end_pos()))
      )
# 5221 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 1128 "src/kernel_internals/parsing/cparser.mly"
                                        ( TtypeofE _3, _1 )
# 5230 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1129 "src/kernel_internals/parsing/cparser.mly"
                                        ( let s, d = _3 in
                                          TtypeofT (s, d), _1 )
# 5240 "src/kernel_internals/parsing/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1135 "src/kernel_internals/parsing/cparser.mly"
                                         ( [] )
# 5246 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1137 "src/kernel_internals/parsing/cparser.mly"
                                         ( FIELD (fst _1,
                                            [(missingFieldDecl, None)]) :: _3 )
# 5256 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1141 "src/kernel_internals/parsing/cparser.mly"
                                         ( _2 )
# 5264 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (Cabs.name * expression option) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1143 "src/kernel_internals/parsing/cparser.mly"
                                          ( FIELD (fst _1, _2)
                                            :: _4 )
# 5275 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1146 "src/kernel_internals/parsing/cparser.mly"
                                          ( _2 )
# 5283 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name * expression option) in
    Obj.repr(
# 1150 "src/kernel_internals/parsing/cparser.mly"
                                         ( [_1] )
# 5290 "src/kernel_internals/parsing/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name * expression option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.name * expression option) list) in
    Obj.repr(
# 1151 "src/kernel_internals/parsing/cparser.mly"
                                         ( _1 :: _3 )
# 5298 "src/kernel_internals/parsing/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1154 "src/kernel_internals/parsing/cparser.mly"
                                    ( (_1, None) )
# 5305 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1156 "src/kernel_internals/parsing/cparser.mly"
                                    ( let (n,decl,al,loc) = _1 in
                                      let al' = al @ _4 in
                                     ((n,decl,al',loc), Some _3) )
# 5316 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1159 "src/kernel_internals/parsing/cparser.mly"
                                    ( (missingFieldDecl, Some _2) )
# 5323 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1163 "src/kernel_internals/parsing/cparser.mly"
                  ([_1])
# 5330 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1164 "src/kernel_internals/parsing/cparser.mly"
                                       (_1 @ [_3])
# 5338 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1167 "src/kernel_internals/parsing/cparser.mly"
            (
      let loc = Parsing.symbol_start_pos (), Parsing.symbol_end_pos() in
      (_1, { expr_node = NOTHING; expr_loc = loc }, loc)
    )
# 5348 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression) in
    Obj.repr(
# 1171 "src/kernel_internals/parsing/cparser.mly"
                         (
      (_1, _3, (Parsing.symbol_start_pos (),Parsing.symbol_end_pos()))
    )
# 5358 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1178 "src/kernel_internals/parsing/cparser.mly"
                                               (
     let (n, decl) = _2 in (n, applyPointer (fst _1) decl, _3, (snd _1))
   )
# 5369 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comma_expression_opt) in
    Obj.repr(
# 1185 "src/kernel_internals/parsing/cparser.mly"
                                  ( _1,_2 )
# 5377 "src/kernel_internals/parsing/cparser.ml"
               : 'attributes_or_static))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 1186 "src/kernel_internals/parsing/cparser.mly"
                                               (
    fst _1::_2  @ ["static",[]], smooth_expression _4
  )
# 5389 "src/kernel_internals/parsing/cparser.ml"
               : 'attributes_or_static))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 1189 "src/kernel_internals/parsing/cparser.mly"
                                     (
    ("static",[]) :: _2, smooth_expression _3
  )
# 5400 "src/kernel_internals/parsing/cparser.ml"
               : 'attributes_or_static))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1197 "src/kernel_internals/parsing/cparser.mly"
                                   ( (_1, JUSTBASE) )
# 5407 "src/kernel_internals/parsing/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name) in
    Obj.repr(
# 1200 "src/kernel_internals/parsing/cparser.mly"
                                   ( let (n,decl,al,_) = _3 in
                                     (n, PARENTYPE(_2,decl,al)) )
# 5417 "src/kernel_internals/parsing/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attributes_or_static) in
    Obj.repr(
# 1204 "src/kernel_internals/parsing/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (attrs, size) = _3 in
                                     (n, ARRAY(decl, attrs, size)) )
# 5427 "src/kernel_internals/parsing/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1207 "src/kernel_internals/parsing/cparser.mly"
                              (
   let (n,decl) = _1 in (n, PROTO(decl,[],false))
  )
# 5437 "src/kernel_internals/parsing/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1211 "src/kernel_internals/parsing/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     (n, PROTO(decl, params, isva))
                                   )
# 5450 "src/kernel_internals/parsing/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1218 "src/kernel_internals/parsing/cparser.mly"
                                   ( !Lexerhack.push_context () )
# 5457 "src/kernel_internals/parsing/cparser.ml"
               : 'parameter_list_startscope))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1221 "src/kernel_internals/parsing/cparser.mly"
                                   ( let (params, isva) = _2 in
                                     (_1 :: params, isva)
                                   )
# 5467 "src/kernel_internals/parsing/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1226 "src/kernel_internals/parsing/cparser.mly"
                                        ( ([], false) )
# 5473 "src/kernel_internals/parsing/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1227 "src/kernel_internals/parsing/cparser.mly"
                                        ( ([], true) )
# 5479 "src/kernel_internals/parsing/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1228 "src/kernel_internals/parsing/cparser.mly"
                                        ( let (params, isva) = _3 in
                                          (_2 :: params, isva)
                                        )
# 5489 "src/kernel_internals/parsing/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1235 "src/kernel_internals/parsing/cparser.mly"
                                          ( (fst _1, _2) )
# 5497 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1236 "src/kernel_internals/parsing/cparser.mly"
                                          ( let d, a = _2 in
                                            (fst _1, ("", d, a, (*CEA*) cabslu)) )
# 5506 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1238 "src/kernel_internals/parsing/cparser.mly"
                                          ( (fst _1, ("", JUSTBASE, [], (*CEA*) cabslu)) )
# 5513 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    Obj.repr(
# 1239 "src/kernel_internals/parsing/cparser.mly"
                                          ( _2 )
# 5521 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_old_proto_decl) in
    Obj.repr(
# 1244 "src/kernel_internals/parsing/cparser.mly"
                                      ( let (n, decl, a) = _2 in
                                        (n, applyPointer (fst _1) decl,
                                         a, snd _1)
                                      )
# 5532 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1252 "src/kernel_internals/parsing/cparser.mly"
                                                                  (
    let par_decl, isva = doOldParDecl _3 _5 in
    let n, decl = _1 in
    (n, PROTO(decl, par_decl, isva), ["FC_OLDSTYLEPROTO",[]])
  )
# 5546 "src/kernel_internals/parsing/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1268 "src/kernel_internals/parsing/cparser.mly"
                                               ( [_1] )
# 5553 "src/kernel_internals/parsing/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1269 "src/kernel_internals/parsing/cparser.mly"
                                               ( _1::_3 )
# 5561 "src/kernel_internals/parsing/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1273 "src/kernel_internals/parsing/cparser.mly"
                                          ( ([], false) )
# 5567 "src/kernel_internals/parsing/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1275 "src/kernel_internals/parsing/cparser.mly"
                                          ( ([(fst _1, _2)], true) )
# 5576 "src/kernel_internals/parsing/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1277 "src/kernel_internals/parsing/cparser.mly"
                                          ( let rest, isva = _4 in
                                            ((fst _1, _2) :: rest, isva)
                                          )
# 5588 "src/kernel_internals/parsing/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1283 "src/kernel_internals/parsing/cparser.mly"
                                          ( [_1] )
# 5595 "src/kernel_internals/parsing/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 1284 "src/kernel_internals/parsing/cparser.mly"
                                          ( _1 :: _3 )
# 5603 "src/kernel_internals/parsing/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1289 "src/kernel_internals/parsing/cparser.mly"
                                ( _2 :: fst _3, _1 )
# 5612 "src/kernel_internals/parsing/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1292 "src/kernel_internals/parsing/cparser.mly"
                                 ( let l = Errorloc.currentLoc () in
                                   ([], l) )
# 5619 "src/kernel_internals/parsing/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1294 "src/kernel_internals/parsing/cparser.mly"
                                 ( _1 )
# 5626 "src/kernel_internals/parsing/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1298 "src/kernel_internals/parsing/cparser.mly"
                               ( let d, a = _2 in
                                 if a <> [] then
                                   Errorloc.parse_error
                                     "attributes in type name";
                                 (fst _1, d)
                               )
# 5639 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1304 "src/kernel_internals/parsing/cparser.mly"
                               ( (fst _1, JUSTBASE) )
# 5646 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1307 "src/kernel_internals/parsing/cparser.mly"
                                          ( applyPointer (fst _1) _2, _3 )
# 5655 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1308 "src/kernel_internals/parsing/cparser.mly"
                                          ( applyPointer (fst _1) JUSTBASE, [] )
# 5662 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1315 "src/kernel_internals/parsing/cparser.mly"
                                   ( let d, a = _3 in
                                     PARENTYPE (_2, d, a)
                                   )
# 5673 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1320 "src/kernel_internals/parsing/cparser.mly"
                                   ( ARRAY(_1, [], _3) )
# 5681 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1323 "src/kernel_internals/parsing/cparser.mly"
                                   ( let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     PROTO (_1, params, isva)
                                   )
# 5693 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1327 "src/kernel_internals/parsing/cparser.mly"
                                ( PROTO (_1, [], false) )
# 5701 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type) in
    Obj.repr(
# 1331 "src/kernel_internals/parsing/cparser.mly"
                                    ( _1 )
# 5708 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1332 "src/kernel_internals/parsing/cparser.mly"
                                    ( JUSTBASE )
# 5714 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lexing.position * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1336 "src/kernel_internals/parsing/cparser.mly"
          (
            let (loc, specs, decl) = _2 in
            let spec_loc =
              let loc = fst _1 in
              Extlib.opt_map
                (fun (loc', spec) -> spec, (loc, loc'))
                (Logic_lexer.spec _1)
            in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by
                                    * announceFunctionName *)
            doFunctionDef spec_loc loc (trd3 _3) specs decl (fst3 _3)
          )
# 5735 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1350 "src/kernel_internals/parsing/cparser.mly"
          ( let (loc, specs, decl) = _1 in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by
                                    * announceFunctionName *)
            (*OCAMLYACC BUG??? Format.printf "%a@." d_cabsloc (trd3 $2);*)
            doFunctionDef None ((*handleLoc*) loc) (trd3 _2) specs decl (fst3 _2)
          )
# 5749 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1361 "src/kernel_internals/parsing/cparser.mly"
                            ( announceFunctionName _2;
                              (fourth4 _2, fst _1, _2)
                            )
# 5759 "src/kernel_internals/parsing/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1367 "src/kernel_internals/parsing/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5769 "src/kernel_internals/parsing/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1372 "src/kernel_internals/parsing/cparser.mly"
    ( let (params, isva) = _3 in
      let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
      let fdec =
        (_1, PROTO(JUSTBASE, params, isva), [], loc) in
      announceFunctionName fdec;
      (* Default is int type *)
      let defSpec = [SpecType Tint] in (loc, defSpec, fdec)
    )
# 5785 "src/kernel_internals/parsing/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1383 "src/kernel_internals/parsing/cparser.mly"
    ( (* Convert pardecl to new style *)
      let pardecl, isva = doOldParDecl _3 _5 in
      let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
      (* Make the function declarator *)
      let fdec = (_1, PROTO(JUSTBASE, pardecl,isva), [], loc) in
      announceFunctionName fdec;
      (* Default is int type *)
      (loc, [SpecType Tint], fdec)
    )
# 5803 "src/kernel_internals/parsing/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1393 "src/kernel_internals/parsing/cparser.mly"
  (
    let loc = Parsing.rhs_start_pos 1, Parsing.rhs_start_pos 1 in
    let fdec = (_1, PROTO(JUSTBASE,[],false),[],loc) in
    announceFunctionName fdec;
    (loc, [SpecType Tint], fdec)
  )
# 5816 "src/kernel_internals/parsing/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1403 "src/kernel_internals/parsing/cparser.mly"
                             ( SpecCV(CV_CONST), _1 )
# 5823 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1404 "src/kernel_internals/parsing/cparser.mly"
                             ( SpecCV(CV_VOLATILE), _1 )
# 5830 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1405 "src/kernel_internals/parsing/cparser.mly"
                             ( SpecCV(CV_RESTRICT), _1 )
# 5837 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1406 "src/kernel_internals/parsing/cparser.mly"
                             ( let annot, loc = _1 in
			       SpecCV(CV_ATTRIBUTE_ANNOT annot), loc )
# 5845 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1412 "src/kernel_internals/parsing/cparser.mly"
                   ( [])
# 5851 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1413 "src/kernel_internals/parsing/cparser.mly"
                                 ( fst _1 :: _2 )
# 5859 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1419 "src/kernel_internals/parsing/cparser.mly"
                                        ( [] )
# 5865 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1420 "src/kernel_internals/parsing/cparser.mly"
                                        ( fst _1 :: _2 )
# 5873 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1421 "src/kernel_internals/parsing/cparser.mly"
                                                 (
      let loc = Parsing.rhs_start_pos 3, Parsing.rhs_end_pos 3 in
      ("__asm__",
       [{ expr_node = CONSTANT(CONST_STRING (fst _3)); expr_loc = loc}])
      :: _5
    )
# 5888 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1432 "src/kernel_internals/parsing/cparser.mly"
                                        ( ("__attribute__", _3), _1 )
# 5897 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1433 "src/kernel_internals/parsing/cparser.mly"
                                        ( ("__declspec", _2), _1 )
# 5905 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1434 "src/kernel_internals/parsing/cparser.mly"
                                        ( (fst _1, []), snd _1 )
# 5912 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1436 "src/kernel_internals/parsing/cparser.mly"
                                        ( ("__thread",[]), _1 )
# 5919 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    Obj.repr(
# 1440 "src/kernel_internals/parsing/cparser.mly"
                   ( [])
# 5925 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv_list) in
    Obj.repr(
# 1441 "src/kernel_internals/parsing/cparser.mly"
                                        ( fst _1 :: _2 )
# 5933 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1446 "src/kernel_internals/parsing/cparser.mly"
                          ( _1 )
# 5940 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1447 "src/kernel_internals/parsing/cparser.mly"
                          ( ("const", []), _1 )
# 5947 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1448 "src/kernel_internals/parsing/cparser.mly"
                          ( ("restrict",[]), _1 )
# 5954 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1449 "src/kernel_internals/parsing/cparser.mly"
                          ( ("volatile",[]), _1 )
# 5961 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1450 "src/kernel_internals/parsing/cparser.mly"
                          ( let annot, loc = _1 in
			    ("$annot:" ^ annot, []), loc )
# 5969 "src/kernel_internals/parsing/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1459 "src/kernel_internals/parsing/cparser.mly"
                                        ( ("__attribute__", _3) )
# 5978 "src/kernel_internals/parsing/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1460 "src/kernel_internals/parsing/cparser.mly"
                                        ( ("__declspec", _2) )
# 5986 "src/kernel_internals/parsing/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'just_attribute) in
    Obj.repr(
# 1466 "src/kernel_internals/parsing/cparser.mly"
                                        ( [_1] )
# 5993 "src/kernel_internals/parsing/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'just_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'just_attributes) in
    Obj.repr(
# 1467 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 :: _2 )
# 6001 "src/kernel_internals/parsing/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1472 "src/kernel_internals/parsing/cparser.mly"
                             (
    PRAGMA (make_expr (VARIABLE ("")), _1)
  )
# 6010 "src/kernel_internals/parsing/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1475 "src/kernel_internals/parsing/cparser.mly"
                          ( PRAGMA (_2, _1) )
# 6018 "src/kernel_internals/parsing/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1476 "src/kernel_internals/parsing/cparser.mly"
                                   ( PRAGMA (_2, _1) )
# 6027 "src/kernel_internals/parsing/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1477 "src/kernel_internals/parsing/cparser.mly"
                                        (
    PRAGMA (make_expr (VARIABLE (fst _1)), snd _1)
  )
# 6036 "src/kernel_internals/parsing/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1485 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (VARIABLE _1) )
# 6043 "src/kernel_internals/parsing/cparser.ml"
               : 'var_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1486 "src/kernel_internals/parsing/cparser.mly"
               ( make_expr (VARIABLE _1) )
# 6050 "src/kernel_internals/parsing/cparser.ml"
               : 'var_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1487 "src/kernel_internals/parsing/cparser.mly"
                          ( make_expr (VARIABLE ("default:" ^ fst _3)) )
# 6058 "src/kernel_internals/parsing/cparser.ml"
               : 'var_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1489 "src/kernel_internals/parsing/cparser.mly"
          ( make_expr (VARIABLE "aconst") )
# 6065 "src/kernel_internals/parsing/cparser.ml"
               : 'var_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1491 "src/kernel_internals/parsing/cparser.mly"
             ( make_expr (VARIABLE ("__noreturn__")) )
# 6072 "src/kernel_internals/parsing/cparser.ml"
               : 'var_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1492 "src/kernel_internals/parsing/cparser.mly"
                               ( make_expr (VARIABLE (fst _1 ^ ":" ^ fst _3)) )
# 6080 "src/kernel_internals/parsing/cparser.ml"
               : 'var_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1496 "src/kernel_internals/parsing/cparser.mly"
            ( make_expr (CONSTANT(CONST_INT (fst _1))) )
# 6087 "src/kernel_internals/parsing/cparser.ml"
               : 'basic_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1497 "src/kernel_internals/parsing/cparser.mly"
              ( make_expr (CONSTANT(CONST_FLOAT(fst _1))) )
# 6094 "src/kernel_internals/parsing/cparser.ml"
               : 'basic_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_attr) in
    Obj.repr(
# 1498 "src/kernel_internals/parsing/cparser.mly"
             ( _1 )
# 6101 "src/kernel_internals/parsing/cparser.ml"
               : 'basic_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basic_attr) in
    Obj.repr(
# 1501 "src/kernel_internals/parsing/cparser.mly"
                  ( [_1] )
# 6108 "src/kernel_internals/parsing/cparser.ml"
               : 'basic_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'basic_attr_list_ne) in
    Obj.repr(
# 1502 "src/kernel_internals/parsing/cparser.mly"
                                  ( _1::_2 )
# 6116 "src/kernel_internals/parsing/cparser.ml"
               : 'basic_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basic_attr_list_ne) in
    Obj.repr(
# 1506 "src/kernel_internals/parsing/cparser.mly"
                         ( _1 )
# 6123 "src/kernel_internals/parsing/cparser.ml"
               : 'parameter_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_attr_list_ne) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1507 "src/kernel_internals/parsing/cparser.mly"
                                       (
      _1 @ [make_expr (CONSTANT(CONST_STRING (fst _2)))]
    )
# 6133 "src/kernel_internals/parsing/cparser.ml"
               : 'parameter_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'basic_attr_list_ne) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_attr_list_ne) in
    Obj.repr(
# 1510 "src/kernel_internals/parsing/cparser.mly"
                                                              (
      _1 @ ([make_expr (CONSTANT(CONST_STRING (fst _2)))] @ _3)
    )
# 6144 "src/kernel_internals/parsing/cparser.ml"
               : 'parameter_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_attr_list_ne) in
    Obj.repr(
# 1515 "src/kernel_internals/parsing/cparser.mly"
                           ( _1 )
# 6151 "src/kernel_internals/parsing/cparser.ml"
               : 'param_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1516 "src/kernel_internals/parsing/cparser.mly"
                    ( [make_expr (CONSTANT(CONST_STRING (fst _1)))] )
# 6158 "src/kernel_internals/parsing/cparser.ml"
               : 'param_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basic_attr) in
    Obj.repr(
# 1519 "src/kernel_internals/parsing/cparser.mly"
               ( _1 )
# 6165 "src/kernel_internals/parsing/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1520 "src/kernel_internals/parsing/cparser.mly"
                       ( _2 )
# 6173 "src/kernel_internals/parsing/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1521 "src/kernel_internals/parsing/cparser.mly"
                    ( make_expr (CONSTANT(CONST_STRING (fst _1))) )
# 6180 "src/kernel_internals/parsing/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_attr) in
    Obj.repr(
# 1524 "src/kernel_internals/parsing/cparser.mly"
                 ( _1 )
# 6187 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename_as_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1525 "src/kernel_internals/parsing/cparser.mly"
                                            (
        let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
        make_expr (CALL({ expr_loc = loc; expr_node = VARIABLE _1}, _2)) )
# 6197 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_or_typename_as_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1529 "src/kernel_internals/parsing/cparser.mly"
                                        (
      let loc1 = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
      let loc2 = Parsing.rhs_start_pos 2, Parsing.rhs_end_pos 3 in
      let f = { expr_node = VARIABLE _1; expr_loc = loc1 } in
      let arg = { expr_node = VARIABLE ""; expr_loc = loc2 } in
      make_expr (CALL(f, [arg]))
    )
# 6211 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_attr_list_ne) in
    Obj.repr(
# 1538 "src/kernel_internals/parsing/cparser.mly"
                                   (
      let loc = Parsing.rhs_start_pos 1, Parsing.rhs_end_pos 1 in
      make_expr (CALL({ expr_node = VARIABLE ""; expr_loc = loc}, _1::_2)) )
# 6221 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1542 "src/kernel_internals/parsing/cparser.mly"
                                        ( make_expr (MEMBEROFPTR (_1, _3)))
# 6229 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1543 "src/kernel_internals/parsing/cparser.mly"
                                        ( make_expr (MEMBEROF (_1, _3)) )
# 6237 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1544 "src/kernel_internals/parsing/cparser.mly"
                                        ( make_expr (INDEX (_1, _3)) )
# 6245 "src/kernel_internals/parsing/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_attr) in
    Obj.repr(
# 1551 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6252 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1552 "src/kernel_internals/parsing/cparser.mly"
                                        ( make_expr (EXPR_SIZEOF _2) )
# 6260 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1554 "src/kernel_internals/parsing/cparser.mly"
                          (let b, d = _3 in
                                         make_expr (TYPE_SIZEOF (b, d)) )
# 6270 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1557 "src/kernel_internals/parsing/cparser.mly"
                                        (make_expr (EXPR_ALIGNOF _2) )
# 6278 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1558 "src/kernel_internals/parsing/cparser.mly"
                                        (let b, d = _3 in
                                         make_expr (TYPE_ALIGNOF (b, d)) )
# 6288 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1560 "src/kernel_internals/parsing/cparser.mly"
                                        (make_expr (UNARY (PLUS, _2)))
# 6296 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1561 "src/kernel_internals/parsing/cparser.mly"
                                        (make_expr (UNARY (MINUS, _2)) )
# 6304 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1562 "src/kernel_internals/parsing/cparser.mly"
                            (make_expr (UNARY (MEMOF, _2)) )
# 6312 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1564 "src/kernel_internals/parsing/cparser.mly"
                                 ( make_expr (UNARY (ADDROF, _2)) )
# 6320 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1565 "src/kernel_internals/parsing/cparser.mly"
                                 ( make_expr (UNARY (NOT, _2)) )
# 6328 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1566 "src/kernel_internals/parsing/cparser.mly"
                                        ( make_expr (UNARY (BNOT, _2)) )
# 6336 "src/kernel_internals/parsing/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_attr) in
    Obj.repr(
# 1570 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6343 "src/kernel_internals/parsing/cparser.ml"
               : 'cast_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1574 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6350 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1575 "src/kernel_internals/parsing/cparser.mly"
                                        (make_expr (BINARY(MUL ,_1 , _3)))
# 6359 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1576 "src/kernel_internals/parsing/cparser.mly"
                                        (make_expr (BINARY(DIV ,_1 , _3)))
# 6367 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1577 "src/kernel_internals/parsing/cparser.mly"
                                          (make_expr (BINARY(MOD ,_1 , _3)))
# 6375 "src/kernel_internals/parsing/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1582 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6382 "src/kernel_internals/parsing/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1583 "src/kernel_internals/parsing/cparser.mly"
                                            (make_expr (BINARY(ADD ,_1 , _3)))
# 6391 "src/kernel_internals/parsing/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1584 "src/kernel_internals/parsing/cparser.mly"
                                            (make_expr (BINARY(SUB ,_1 , _3)))
# 6400 "src/kernel_internals/parsing/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1588 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6407 "src/kernel_internals/parsing/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1589 "src/kernel_internals/parsing/cparser.mly"
                                     (make_expr (BINARY(SHL ,_1 , _3)))
# 6415 "src/kernel_internals/parsing/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1590 "src/kernel_internals/parsing/cparser.mly"
                                     (make_expr (BINARY(SHR ,_1 , _3)))
# 6423 "src/kernel_internals/parsing/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1594 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6430 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1595 "src/kernel_internals/parsing/cparser.mly"
                                   (make_expr (BINARY(LT ,_1 , _3)))
# 6438 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1596 "src/kernel_internals/parsing/cparser.mly"
                                   (make_expr (BINARY(GT ,_1 , _3)))
# 6446 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1597 "src/kernel_internals/parsing/cparser.mly"
                                      (make_expr (BINARY(LE ,_1 , _3)))
# 6454 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1598 "src/kernel_internals/parsing/cparser.mly"
                                      (make_expr (BINARY(GE ,_1 , _3)))
# 6462 "src/kernel_internals/parsing/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1602 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6469 "src/kernel_internals/parsing/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1603 "src/kernel_internals/parsing/cparser.mly"
                                            (make_expr (BINARY(EQ ,_1 , _3)))
# 6477 "src/kernel_internals/parsing/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1604 "src/kernel_internals/parsing/cparser.mly"
                                            (make_expr (BINARY(NE ,_1 , _3)))
# 6485 "src/kernel_internals/parsing/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1609 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6492 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1610 "src/kernel_internals/parsing/cparser.mly"
                                       (make_expr (BINARY(BAND ,_1 , _3)))
# 6501 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1614 "src/kernel_internals/parsing/cparser.mly"
                                           ( _1 )
# 6508 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1615 "src/kernel_internals/parsing/cparser.mly"
                                           (make_expr (BINARY(XOR ,_1 , _3)))
# 6516 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1619 "src/kernel_internals/parsing/cparser.mly"
                                          ( _1 )
# 6523 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1620 "src/kernel_internals/parsing/cparser.mly"
                                          (make_expr (BINARY(BOR ,_1 , _3)))
# 6531 "src/kernel_internals/parsing/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1624 "src/kernel_internals/parsing/cparser.mly"
                                                ( _1 )
# 6538 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1626 "src/kernel_internals/parsing/cparser.mly"
        (make_expr (BINARY(AND ,_1 , _3)))
# 6547 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1630 "src/kernel_internals/parsing/cparser.mly"
                                               ( _1 )
# 6554 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1632 "src/kernel_internals/parsing/cparser.mly"
        (make_expr (BINARY(OR ,_1 , _3)))
# 6562 "src/kernel_internals/parsing/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_attr) in
    Obj.repr(
# 1636 "src/kernel_internals/parsing/cparser.mly"
                                           ( _1 )
# 6569 "src/kernel_internals/parsing/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'attr_test) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_attr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1638 "src/kernel_internals/parsing/cparser.mly"
    ( make_expr (QUESTION(_1, _4, _6)) )
# 6579 "src/kernel_internals/parsing/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1641 "src/kernel_internals/parsing/cparser.mly"
                                         ( _1 )
# 6586 "src/kernel_internals/parsing/cparser.ml"
               : 'assign_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1642 "src/kernel_internals/parsing/cparser.mly"
                                         ( make_expr (BINARY(ASSIGN,_1,_3)) )
# 6594 "src/kernel_internals/parsing/cparser.ml"
               : 'assign_attr))
; (fun __caml_parser_env ->
    Obj.repr(
# 1646 "src/kernel_internals/parsing/cparser.mly"
              ( Cabshelper.push_attr_test () )
# 6600 "src/kernel_internals/parsing/cparser.ml"
               : 'attr_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assign_attr) in
    Obj.repr(
# 1648 "src/kernel_internals/parsing/cparser.mly"
                                        ( _1 )
# 6607 "src/kernel_internals/parsing/cparser.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 1652 "src/kernel_internals/parsing/cparser.mly"
                                         ( [_1] )
# 6614 "src/kernel_internals/parsing/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1653 "src/kernel_internals/parsing/cparser.mly"
                                         ( _1 :: _3 )
# 6622 "src/kernel_internals/parsing/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1657 "src/kernel_internals/parsing/cparser.mly"
                                         ( [] )
# 6628 "src/kernel_internals/parsing/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1658 "src/kernel_internals/parsing/cparser.mly"
                                         ( _1 )
# 6635 "src/kernel_internals/parsing/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list_ne) in
    Obj.repr(
# 1661 "src/kernel_internals/parsing/cparser.mly"
                                         ( _2 )
# 6643 "src/kernel_internals/parsing/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list) in
    Obj.repr(
# 1664 "src/kernel_internals/parsing/cparser.mly"
                                         ( _2 )
# 6651 "src/kernel_internals/parsing/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1668 "src/kernel_internals/parsing/cparser.mly"
                                        ( [] )
# 6657 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1669 "src/kernel_internals/parsing/cparser.mly"
                                        ( ("volatile", []) :: _2 )
# 6665 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1670 "src/kernel_internals/parsing/cparser.mly"
                                        ( ("const", []) :: _2 )
# 6673 "src/kernel_internals/parsing/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1673 "src/kernel_internals/parsing/cparser.mly"
                                                 ( [_1] )
# 6680 "src/kernel_internals/parsing/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'one_string_constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmtemplate) in
    Obj.repr(
# 1674 "src/kernel_internals/parsing/cparser.mly"
                                                 ( _1 :: _2 )
# 6688 "src/kernel_internals/parsing/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    Obj.repr(
# 1677 "src/kernel_internals/parsing/cparser.mly"
                        ( None )
# 6694 "src/kernel_internals/parsing/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asminputs) in
    Obj.repr(
# 1679 "src/kernel_internals/parsing/cparser.mly"
                        ( let (ins, (clobs,labels)) = _3 in
                          Some {aoutputs = _2; ainputs = ins; aclobbers = clobs;
				alabels = labels } )
# 6704 "src/kernel_internals/parsing/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1684 "src/kernel_internals/parsing/cparser.mly"
                                        ( [] )
# 6710 "src/kernel_internals/parsing/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperandsne) in
    Obj.repr(
# 1685 "src/kernel_internals/parsing/cparser.mly"
                                        ( List.rev _1 )
# 6717 "src/kernel_internals/parsing/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1688 "src/kernel_internals/parsing/cparser.mly"
                                        ( [_1] )
# 6724 "src/kernel_internals/parsing/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asmoperandsne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1689 "src/kernel_internals/parsing/cparser.mly"
                                        ( _3 :: _1 )
# 6732 "src/kernel_internals/parsing/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    Obj.repr(
# 1692 "src/kernel_internals/parsing/cparser.mly"
                                                           ( (_1, fst _2, _4) )
# 6742 "src/kernel_internals/parsing/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    Obj.repr(
# 1695 "src/kernel_internals/parsing/cparser.mly"
                        ( ([], ([],[])) )
# 6748 "src/kernel_internals/parsing/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobber) in
    Obj.repr(
# 1697 "src/kernel_internals/parsing/cparser.mly"
                        ( (_2, _3) )
# 6756 "src/kernel_internals/parsing/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1700 "src/kernel_internals/parsing/cparser.mly"
                                        ( None )
# 6762 "src/kernel_internals/parsing/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1701 "src/kernel_internals/parsing/cparser.mly"
                                        ( Some _2 )
# 6769 "src/kernel_internals/parsing/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    Obj.repr(
# 1705 "src/kernel_internals/parsing/cparser.mly"
                                        ( [],[] )
# 6775 "src/kernel_internals/parsing/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmlabels) in
    Obj.repr(
# 1706 "src/kernel_internals/parsing/cparser.mly"
                                        ( [],_2 )
# 6782 "src/kernel_internals/parsing/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmcloberlst_ne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmlabels) in
    Obj.repr(
# 1707 "src/kernel_internals/parsing/cparser.mly"
                                        ( _2,_3 )
# 6790 "src/kernel_internals/parsing/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1710 "src/kernel_internals/parsing/cparser.mly"
                                        ( [_1] )
# 6797 "src/kernel_internals/parsing/cparser.ml"
               : 'asmcloberlst_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'one_string_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1711 "src/kernel_internals/parsing/cparser.mly"
                                                 ( _1 :: _3 )
# 6805 "src/kernel_internals/parsing/cparser.ml"
               : 'asmcloberlst_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1714 "src/kernel_internals/parsing/cparser.mly"
                                       ( [] )
# 6811 "src/kernel_internals/parsing/cparser.ml"
               : 'asmlabels))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1715 "src/kernel_internals/parsing/cparser.mly"
                                       ( _2 )
# 6818 "src/kernel_internals/parsing/cparser.ml"
               : 'asmlabels))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (bool*Cabs.definition) list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : (bool*Cabs.definition) list)
;;
