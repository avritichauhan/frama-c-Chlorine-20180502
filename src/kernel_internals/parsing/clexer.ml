# 49 "src/kernel_internals/parsing/clexer.mll"
 
open Cparser
module H = Hashtbl
module E = Errorloc

let currentLoc () = E.currentLoc ()

let one_line_ghost = ref false
let is_oneline_ghost () = !one_line_ghost
let enter_oneline_ghost () = one_line_ghost := true
let exit_oneline_ghost () = one_line_ghost := false

let ghost_code = ref false
let is_ghost_code () = !ghost_code
let enter_ghost_code () = ghost_code := true
let exit_ghost_code () = ghost_code := false

let ghost_annot = ref false
let is_ghost_annot () = !ghost_annot
let enter_ghost_annot () = ghost_annot := true
let exit_ghost_annot () = ghost_annot := false

let addComment c = Cabshelper.Comments.add (currentLoc()) c

(* Some debugging support for line numbers *)
let dbgToken (t: token) =
  if false then begin
    let dprintf fmt = Kernel.debug fmt in
    (match t with
         IDENT n -> dprintf "IDENT(%s)\n" n
       | LBRACE l -> dprintf "LBRACE(%d)\n" (fst l).Lexing.pos_lnum
       | RBRACE l -> dprintf "RBRACE(%d)\n" (fst l).Lexing.pos_lnum
       | IF l -> dprintf "IF(%d)\n" (fst l).Lexing.pos_lnum
       | SWITCH l -> dprintf "SWITCH(%d)\n" (fst l).Lexing.pos_lnum
       | RETURN l -> dprintf "RETURN(%d)\n" (fst l).Lexing.pos_lnum
       | _ -> ()) ;
    t
  end else
    t

(*
** Keyword hashtable
*)
let lexicon = H.create 211
let init_lexicon _ =
  H.clear lexicon;
  Logic_env.reset_typenames ();
  Logic_env.builtin_types_as_typenames ();
  List.iter
    (fun (key, builder) -> H.add lexicon key builder)
    [ ("auto", fun loc -> AUTO loc);
      ("const", fun loc -> CONST loc);
      ("__const", fun loc -> CONST loc);
      ("__const__", fun loc -> CONST loc);
      ("static", fun loc -> STATIC loc);
      ("extern", fun loc -> EXTERN loc);
      ("long", fun loc -> LONG loc);
      ("short", fun loc -> SHORT loc);
      ("register", fun loc -> REGISTER loc);
      ("signed", fun loc -> SIGNED loc);
      ("__signed", fun loc -> SIGNED loc);
      ("unsigned", fun loc -> UNSIGNED loc);
      ("volatile", fun loc -> VOLATILE loc);
      ("__volatile", fun loc -> VOLATILE loc);
      (* WW: see /usr/include/sys/cdefs.h for why __signed and __volatile
       * are accepted GCC-isms *)
      ("char", fun loc -> CHAR loc);
      ("_Bool", fun loc -> BOOL loc);
      ("int", fun loc -> INT loc);
      ("float", fun loc -> FLOAT loc);
      ("double", fun loc -> DOUBLE loc);
      ("void", fun loc -> VOID loc);
      ("enum", fun loc -> ENUM loc);
      ("struct", fun loc -> STRUCT loc);
      ("typedef", fun loc -> TYPEDEF loc);
      ("union", fun loc -> UNION loc);
      ("break", fun loc -> BREAK loc);
      ("continue", fun loc -> CONTINUE loc);
      ("goto", fun loc -> GOTO loc);
      ("return", fun loc -> dbgToken (RETURN loc));
      ("switch", fun loc -> dbgToken (SWITCH loc));
      ("case", fun loc -> CASE loc);
      ("default", fun loc -> DEFAULT loc);
      ("while", fun loc -> WHILE loc);
      ("do", fun loc -> DO loc);
      ("for", fun loc -> FOR loc);
      ("if", fun loc -> dbgToken (IF loc));
      ("else", fun _ -> ELSE);
      (*** Implementation specific keywords ***)
      ("__signed__", fun loc -> SIGNED loc);
      ("__inline__", fun loc -> INLINE loc);
      ("inline", fun loc -> INLINE loc);
      ("__inline", fun loc -> INLINE loc);
      ("_inline", fun loc ->
                      if !Cprint.msvcMode then
                        INLINE loc
                      else
                        IDENT ("_inline"));
      ("__attribute__", fun loc -> ATTRIBUTE loc);
      ("__attribute", fun loc -> ATTRIBUTE loc);
      ("__blockattribute__", fun _ -> BLOCKATTRIBUTE);
      ("__blockattribute", fun _ -> BLOCKATTRIBUTE);
      ("__asm__", fun loc -> ASM loc);
      ("asm", fun loc -> ASM loc);
      ("__typeof__", fun loc -> TYPEOF loc);
      ("__typeof", fun loc -> TYPEOF loc);
      ("typeof", fun loc -> TYPEOF loc);
      ("__alignof", fun loc -> ALIGNOF loc);
      ("__alignof__", fun loc -> ALIGNOF loc);
      ("__volatile__", fun loc -> VOLATILE loc);
      ("__volatile", fun loc -> VOLATILE loc);

      ("__FUNCTION__", fun loc -> FUNCTION__ loc);
      ("__func__", fun loc -> FUNCTION__ loc); (* ISO 6.4.2.2 *)
      ("__PRETTY_FUNCTION__", fun loc -> PRETTY_FUNCTION__ loc);
      ("__label__", fun _ -> LABEL__);
      (*** weimer: GCC arcana ***)
      ("__restrict", fun loc -> RESTRICT loc);
      ("restrict", fun loc -> RESTRICT loc);
(*      ("__extension__", EXTENSION); *)
      (**** MS VC ***)
      ("__int64", fun _ -> INT64 (currentLoc ()));
      ("__int32", fun loc -> INT loc);
      ("_cdecl",  fun _ -> MSATTR ("_cdecl", currentLoc ()));
      ("__cdecl", fun _ -> MSATTR ("__cdecl", currentLoc ()));
      ("_stdcall", fun _ -> MSATTR ("_stdcall", currentLoc ()));
      ("__stdcall", fun _ -> MSATTR ("__stdcall", currentLoc ()));
      ("_fastcall", fun _ -> MSATTR ("_fastcall", currentLoc ()));
      ("__fastcall", fun _ -> MSATTR ("__fastcall", currentLoc ()));
      ("__w64", fun _ -> MSATTR("__w64", currentLoc ()));
      ("__declspec", fun loc -> DECLSPEC loc);
      ("__forceinline", fun loc -> INLINE loc); (* !! we turn forceinline
                                                 * into inline *)
      ("__try", fun loc -> TRY loc);
      ("__except", fun loc -> EXCEPT loc);
      ("__finally", fun loc -> FINALLY loc);
      (* weimer: some files produced by 'GCC -E' expect this type to be
       * defined *)
      ("__builtin_va_list",
       fun _ -> NAMED_TYPE "__builtin_va_list");
      ("__builtin_va_arg", fun loc -> BUILTIN_VA_ARG loc);
      ("__builtin_types_compatible_p", fun loc -> BUILTIN_TYPES_COMPAT loc);
      ("__builtin_offsetof", fun loc -> BUILTIN_OFFSETOF loc);
      (* On some versions of GCC __thread is a regular identifier *)
      ("__thread",
       (fun loc ->
          if Cil.theMachine.Cil.theMachine.Cil_types.__thread_is_keyword then
            THREAD loc
          else
            IDENT "__thread"));
    ]


let is_c_keyword s = Hashtbl.mem lexicon s

(* Mark an identifier as a type name. The old mapping is preserved and will
 * be reinstated when we exit this context *)
let add_type name =
   (* ignore (print_string ("adding type name " ^ name ^ "\n"));  *)
  H.add lexicon name (fun _ -> NAMED_TYPE name);
  Logic_env.add_typename name

let context : string list list ref = ref [ [] ]

let push_context _ = context := []::!context

let pop_context _ =
  match !context with
    [] -> Kernel.fatal "Empty context stack"
  | con::sub ->
		(context := sub;
		List.iter (fun name ->
                            (* Format.eprintf
                              "removing lexicon for %s@." name; *)
                             H.remove lexicon name;
                             Logic_env.remove_typename name
                          ) con)

(* Mark an identifier as a variable name. The old mapping is preserved and
 * will be reinstated when we exit this context  *)
let add_identifier name =
  match !context with
    [] -> Kernel.fatal "Empty context stack"
  | con::sub ->
      (context := (name::con)::sub;
       (*Format.eprintf "adding IDENT for %s@." name;*)
       H.add lexicon name (fun _ -> dbgToken (IDENT name));
       Logic_env.hide_typename name
      )


(*
** Useful primitives
*)
let scan_ident id =
  let here = currentLoc () in
  try (H.find lexicon id) here
  (* default to variable name, as opposed to type *)
  with Not_found -> dbgToken (IDENT id)


(*
** Buffer processor
*)


let init ~(filename: string) : Lexing.lexbuf =
  init_lexicon ();
  (* Initialize the pointer in Errormsg *)
  Lexerhack.add_type := add_type;
  Lexerhack.push_context := push_context;
  Lexerhack.pop_context := pop_context;
  Lexerhack.add_identifier := add_identifier;
  E.startParsing filename


let finish () =
  E.finishParsing ();
  Logic_env.reset_typenames ()


(*** escape character management ***)
let scan_escape (char: char) : int64 =
  let result = match char with
    'n' -> '\n'
  | 'r' -> '\r'
  | 't' -> '\t'
  | 'b' -> '\b'
  | 'f' -> '\012'  (* ASCII code 12 *)
  | 'v' -> '\011'  (* ASCII code 11 *)
  | 'a' -> '\007'  (* ASCII code 7 *)
  | 'e' | 'E' -> '\027'  (* ASCII code 27. This is a GCC extension *)
  | '\'' -> '\''
  | '"'-> '"'     (* '"' *)
  | '?' -> '?'
  | '(' when not !Cprint.msvcMode -> '('
  | '{' when not !Cprint.msvcMode -> '{'
  | '[' when not !Cprint.msvcMode -> '['
  | '%' when not !Cprint.msvcMode -> '%'
  | '\\' -> '\\'
  | other ->
    E.parse_error "Unrecognized escape sequence: \\%c" other
  in
  Int64.of_int (Char.code result)

let scan_hex_escape str =
  let radix = Int64.of_int 16 in
  let the_value = ref Int64.zero in
  (* start at character 2 to skip the \x *)
  for i = 2 to (String.length str) - 1 do
    let thisDigit = Cabshelper.valueOfDigit (String.get str i) in
    (* the_value := !the_value * 16 + thisDigit *)
    the_value := Int64.add (Int64.mul !the_value radix) thisDigit
  done;
  !the_value

let scan_oct_escape str =
  let radix = Int64.of_int 8 in
  let the_value = ref Int64.zero in
  (* start at character 1 to skip the \x *)
  for i = 1 to (String.length str) - 1 do
    let thisDigit = Cabshelper.valueOfDigit (String.get str i) in
    (* the_value := !the_value * 8 + thisDigit *)
    the_value := Int64.add (Int64.mul !the_value radix) thisDigit
  done;
  !the_value

let lex_hex_escape remainder lexbuf =
  let prefix = scan_hex_escape (Lexing.lexeme lexbuf) in
  prefix :: remainder lexbuf

let lex_oct_escape remainder lexbuf =
  let prefix = scan_oct_escape (Lexing.lexeme lexbuf) in
  prefix :: remainder lexbuf

let lex_simple_escape remainder lexbuf =
  let lexchar = Lexing.lexeme_char lexbuf 1 in
  let prefix = scan_escape lexchar in
  prefix :: remainder lexbuf

let lex_unescaped remainder lexbuf =
  let prefix = Int64.of_int (Char.code (Lexing.lexeme_char lexbuf 0)) in
  prefix :: remainder lexbuf

let lex_comment remainder buffer lexbuf =
  let s = Lexing.lexeme lexbuf in
  if s = "\n" then E.newline() ;
  (match buffer with None -> () | Some b -> Buffer.add_string b s) ;
  remainder buffer lexbuf

let do_lex_comment ?(first_string="") remainder lexbuf =
  let buffer =
    if Kernel.PrintComments.get () then begin
      let b = Buffer.create 80 in
      Buffer.add_string b first_string;
      Some b
    end else None
  in remainder buffer lexbuf ;
  match buffer with
    | Some b -> addComment (Buffer.contents b)
    | None -> ()


(* ISO standard locale-specific function to convert a wide character
 * into a sequence of normal characters. Here we work on strings.
 * We convert L"Hi" to "H\000i\000"
  matth: this seems unused.
let wbtowc wstr =
  let len = String.length wstr in
  let dest = String.make (len * 2) '\000' in
  for i = 0 to len-1 do
    dest.[i*2] <- wstr.[i] ;
  done ;
  dest
*)

(* This function converts the "Hi" in L"Hi" to { L'H', L'i', L'\0' }
  matth: this seems unused.
let wstr_to_warray wstr =
  let len = String.length wstr in
  let res = ref "{ " in
  for i = 0 to len-1 do
    res := !res ^ (Printf.sprintf "L'%c', " wstr.[i])
  done ;
  res := !res ^ "}" ;
  !res
*)

(* Pragmas get explicit end-of-line tokens.
 * Elsewhere they are silently discarded as whitespace. *)
let pragmaLine = ref false

let annot_char = ref '@'

let () =
  Kernel.ReadAnnot.add_set_hook
    (fun _ x ->
      (* prevent the C lexer interpretation of comments *)
      annot_char := if x then '@' else '\000')

let annot_start_pos = ref Cabshelper.cabslu
let buf = Buffer.create 1024

let save_current_pos () =
  annot_start_pos := currentLoc ()

let annot_lex initial rule lexbuf =
  try
    save_current_pos ();
    Buffer.clear buf;
    rule lexbuf
  with Parsing.Parse_error ->
    let source = Lexing.lexeme_start_p lexbuf in
    Kernel.warning ~wkey:Kernel.wkey_annot_error ~source "skipping annotation";
    initial lexbuf

let make_annot ~one_line default lexbuf s =
  let start = snd !annot_start_pos in
  match Logic_lexer.annot (start, s) with
  | Some (stop, token) ->
    lexbuf.Lexing.lex_curr_p <- stop;
    (* The filename has already been normalized, so we must reuse it "as is". *)
    E.setCurrentFile ~normalize:false stop.Lexing.pos_fname;
    E.setCurrentLine stop.Lexing.pos_lnum;
    if one_line then E.newline ();
    (match token with
     | Logic_ptree.Adecl d -> DECL d
     | Logic_ptree.Aspec -> SPEC (start,s)
     (* At this point, we only have identified a function spec. Complete
           parsing of the annotation will only occur in the cparser.mly rule.
     *)
     | Logic_ptree.Acode_annot (loc,a) -> CODE_ANNOT (a, loc)
     | Logic_ptree.Aloop_annot (loc,a) -> LOOP_ANNOT (a,loc)
     | Logic_ptree.Aattribute_annot (loc,a) -> ATTRIBUTE_ANNOT (a, loc)
     | Logic_ptree.Acustom(loc,id, a) -> CUSTOM_ANNOT(a, id, loc))
  | None -> (* error occured and annotation is discarded. Find a normal token. *)
    default lexbuf


# 382 "src/kernel_internals/parsing/clexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\178\255\179\255\091\000\192\000\186\255\187\255\188\255\
    \189\255\192\255\193\255\196\255\197\255\198\255\002\000\200\255\
    \035\000\067\000\093\000\070\000\094\000\091\000\072\000\169\000\
    \173\000\074\000\013\001\025\001\063\001\243\255\136\001\245\255\
    \223\001\076\000\248\255\001\000\250\255\074\001\093\001\209\255\
    \231\255\173\000\092\001\254\255\059\000\255\255\252\255\094\000\
    \253\255\249\255\005\000\194\255\230\255\247\255\054\002\141\002\
    \228\002\059\003\146\003\233\003\064\004\151\004\238\004\069\005\
    \156\005\243\005\074\006\161\006\248\006\079\007\166\007\253\007\
    \084\008\171\008\002\009\089\009\176\009\007\010\094\010\181\010\
    \012\011\242\255\244\255\101\000\089\011\117\011\127\011\082\000\
    \052\001\062\001\139\011\161\011\131\000\156\011\158\011\173\011\
    \183\000\077\001\076\001\058\001\166\000\098\001\153\011\175\011\
    \199\011\168\000\241\255\004\012\014\012\043\012\053\012\212\001\
    \082\012\130\002\092\012\217\002\153\012\191\012\167\000\146\000\
    \008\001\163\011\121\012\005\013\229\012\038\013\048\003\071\013\
    \135\003\239\255\138\000\148\000\117\000\174\000\078\012\173\000\
    \240\000\020\001\165\011\240\255\168\000\156\000\125\000\183\000\
    \190\000\235\255\221\255\121\000\134\000\134\000\003\000\236\255\
    \215\255\234\255\213\255\214\255\233\255\232\255\204\255\229\255\
    \205\255\228\255\227\255\191\255\195\255\220\255\222\000\226\255\
    \219\255\225\000\225\255\222\255\190\255\115\013\202\013\033\014\
    \120\014\207\014\241\000\255\255\030\001\253\255\254\255\038\001\
    \255\255\188\001\253\255\254\255\041\001\255\255\065\015\249\255\
    \250\255\048\001\252\255\253\255\086\002\255\255\251\255\070\015\
    \249\255\233\000\246\000\080\015\009\004\255\255\043\001\124\001\
    \065\001\175\011\253\255\064\001\023\001\255\000\072\001\026\001\
    \042\001\252\255\058\001\055\001\056\001\072\001\096\004\129\015\
    \063\001\068\001\128\001\095\001\082\001\112\001\116\001\169\001\
    \181\001\215\001\186\001\187\001\171\001\204\001\210\001\206\001\
    \214\001\251\255\212\001\024\002\249\001\242\001\237\001\001\002\
    \241\001\008\002\003\002\005\002\000\002\012\002\034\002\036\002\
    \038\002\047\002\055\002\084\002\099\002\102\002\086\002\098\002\
    \093\002\095\002\132\002\132\002\132\002\130\002\127\002\174\002\
    \191\002\186\002\168\002\173\002\180\002\194\002\183\002\218\002\
    \237\002\226\002\225\002\216\002\001\003\014\003\008\003\008\003\
    \022\003\024\003\014\003\028\003\036\003\050\003\049\003\048\003\
    \040\003\077\003\103\003\091\003\107\003\110\003\092\003\104\003\
    \099\003\127\003\124\013\251\255\189\011\183\004\255\255\252\255\
    \105\015\134\015\136\015\253\255\026\004\253\255\254\255\255\255\
    \027\004\254\255\255\255\151\010\250\255\251\255\177\012\255\255\
    \252\255\058\005\153\015\208\015\145\005\253\255\147\010\250\255\
    \251\255\231\015\255\255\252\255\232\005\246\015\058\016\063\006\
    \253\255\037\013\253\255\254\255\193\006\155\003\254\255\255\255\
    \011\011\253\255\143\003\255\255\142\003\125\003\133\003\254\255\
    \007\004\253\255\254\255\166\003\160\003\160\003\163\003\255\255\
    \028\004\252\255\253\255\254\255\249\003\255\255\021\004\255\255\
    \094\004\254\255\221\003\218\003\242\003\242\003\255\255\114\004\
    \254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\075\000\075\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\056\000\255\255\
    \037\000\039\000\038\000\054\000\052\000\053\000\045\000\044\000\
    \043\000\049\000\070\000\018\000\018\000\255\255\075\000\255\255\
    \075\000\048\000\255\255\077\000\255\255\004\000\047\000\255\255\
    \255\255\002\000\000\000\255\255\001\000\255\255\255\255\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\075\000\075\000\
    \075\000\075\000\075\000\075\000\009\000\075\000\075\000\075\000\
    \075\000\072\000\075\000\075\000\075\000\075\000\073\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \074\000\255\255\255\255\255\255\255\255\255\255\014\000\255\255\
    \018\000\018\000\018\000\017\000\255\255\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\255\255\018\000\018\000\018\000\
    \018\000\255\255\255\255\255\255\014\000\255\255\014\000\255\255\
    \014\000\255\255\014\000\255\255\255\255\016\000\255\255\016\000\
    \016\000\016\000\255\255\255\255\255\255\014\000\255\255\014\000\
    \255\255\255\255\016\000\016\000\016\000\255\255\015\000\255\255\
    \015\000\015\000\015\000\255\255\015\000\015\000\015\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\031\000\255\255\
    \255\255\032\000\255\255\255\255\255\255\075\000\075\000\075\000\
    \075\000\071\000\001\000\255\255\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\006\000\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\006\000\006\000\002\000\001\000\255\255\255\255\002\000\
    \002\000\002\000\255\255\002\000\002\000\002\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\005\000\255\255\
    \255\255\002\000\003\000\001\000\002\000\255\255\255\255\255\255\
    \255\255\005\000\255\255\255\255\002\000\003\000\001\000\002\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\255\255\001\000\255\255\
    \002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\000\000\255\255\039\000\000\000\
    \000\000\046\000\043\000\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\181\000\000\000\000\000\255\255\
    \000\000\186\000\000\000\000\000\255\255\000\000\191\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\200\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\051\001\000\000\056\001\255\255\000\000\000\000\
    \056\001\056\001\056\001\000\000\061\001\000\000\000\000\000\000\
    \065\001\000\000\000\000\068\001\000\000\000\000\072\001\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\079\001\000\000\
    \000\000\083\001\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\090\001\000\000\000\000\255\255\094\001\000\000\000\000\
    \097\001\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \113\001\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\128\001\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\037\000\036\000\049\000\037\000\037\000\050\000\049\000\
    \000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
    \037\000\025\000\029\000\034\000\151\000\033\000\020\000\031\000\
    \008\000\007\000\022\000\024\000\005\000\023\000\026\000\038\000\
    \028\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\014\000\006\000\018\000\016\000\017\000\015\000\
    \172\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\030\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\010\000\035\000\009\000\019\000\032\000\
    \171\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\004\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\012\000\021\000\011\000\013\000\003\000\
    \168\000\169\000\164\000\162\000\160\000\157\000\053\000\146\000\
    \105\000\052\000\051\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\134\000\134\000\163\000\
    \159\000\166\000\165\000\161\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\045\000\255\255\
    \045\000\100\000\003\000\147\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\155\000\158\000\
    \152\000\048\000\096\000\048\000\101\000\133\000\131\000\129\000\
    \129\000\129\000\129\000\143\000\003\000\086\000\156\000\154\000\
    \139\000\139\000\153\000\139\000\145\000\047\000\148\000\149\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\150\000\118\000\085\000\139\000\132\000\129\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\167\000\085\000\139\000\170\000\003\000\
    \179\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\173\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\144\000\141\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\086\000\
    \183\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\037\000\130\000\184\000\037\000\037\000\
    \189\000\135\000\198\000\218\000\142\000\129\000\085\000\215\000\
    \140\000\214\000\086\000\210\000\037\000\089\000\255\255\255\255\
    \086\000\139\000\037\000\210\000\086\000\086\000\088\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\027\000\
    \027\000\085\000\086\000\086\000\210\000\129\000\085\000\085\000\
    \103\000\083\000\087\000\085\000\085\000\090\000\255\255\042\000\
    \216\000\139\000\102\000\089\000\041\000\211\000\088\000\217\000\
    \086\000\085\000\085\000\101\000\088\000\210\000\210\000\084\000\
    \096\000\085\000\040\000\219\000\044\000\087\000\220\000\085\000\
    \104\000\083\000\096\000\085\000\085\000\221\000\096\000\085\000\
    \087\000\222\000\081\000\090\000\003\000\255\255\044\001\082\000\
    \031\001\085\000\085\000\101\000\088\000\210\000\210\000\084\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\096\000\024\001\010\001\001\001\187\000\085\000\
    \212\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\001\252\000\206\000\188\000\003\000\
    \213\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\110\000\110\000\110\000\110\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\247\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\244\000\243\000\236\000\242\000\237\000\182\000\235\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\055\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\238\000\239\000\240\000\241\000\054\000\241\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\241\000\255\255\255\255\245\000\196\000\
    \246\000\241\000\196\000\196\000\248\000\249\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \196\000\250\000\251\000\241\000\253\000\254\000\196\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\000\241\000\241\000\002\001\003\000\003\001\063\000\
    \003\000\003\000\003\000\061\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\062\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\187\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\001\
    \005\001\006\001\007\001\008\001\009\001\241\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \011\001\012\001\013\001\014\001\003\000\015\001\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\056\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\016\001\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\017\001\018\001\
    \019\001\020\001\021\001\022\001\023\001\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\241\000\
    \025\001\026\001\027\001\003\000\028\001\057\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\125\000\029\001\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\030\001\241\000\032\001\
    \033\001\034\001\035\001\036\001\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\037\001\038\001\
    \039\001\040\001\003\000\041\001\003\000\003\000\003\000\003\000\
    \003\000\003\000\058\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\042\001\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\043\001\241\000\045\001\046\001\
    \047\001\048\001\049\001\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\241\000\100\001\101\001\
    \102\001\003\000\103\001\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\059\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\108\001\109\001\
    \106\001\105\001\204\000\110\001\106\001\204\000\204\000\111\001\
    \095\001\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\204\000\063\001\066\001\114\001\106\001\
    \117\001\204\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\119\001\123\001\116\001\106\001\
    \003\000\124\001\060\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\125\001\126\001\121\001\
    \000\000\223\000\000\000\121\001\223\000\223\000\107\001\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\223\000\000\000\129\001\000\000\121\001\000\000\
    \223\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\000\000\000\000\121\001\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \053\001\000\000\000\000\053\001\053\001\122\001\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\053\001\000\000\000\000\000\000\000\000\000\000\053\001\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\071\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\062\001\255\255\115\001\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \066\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\076\001\076\001\076\001\076\001\076\001\076\001\
    \076\001\076\001\255\255\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \064\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\077\001\077\001\077\001\077\001\077\001\077\001\077\001\
    \077\001\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\065\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \087\001\087\001\087\001\087\001\087\001\087\001\087\001\087\001\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\088\001\
    \088\001\088\001\088\001\088\001\088\001\088\001\088\001\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\067\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\092\001\000\000\000\000\092\001\092\001\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\092\001\000\000\000\000\000\000\000\000\
    \000\000\092\001\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \068\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\069\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \070\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\072\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\073\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\074\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\075\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\076\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\077\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\078\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\071\001\082\001\000\000\000\000\079\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\081\001\
    \000\000\000\000\000\000\070\001\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\080\000\099\001\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\099\001\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\098\001\003\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\116\000\
    \099\001\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \117\000\117\000\117\000\080\001\000\000\000\000\000\000\069\001\
    \000\000\000\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \115\000\000\000\115\000\000\000\000\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\086\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \000\000\000\000\000\000\000\000\107\000\106\000\255\255\086\000\
    \000\000\255\255\086\000\106\000\086\000\000\000\000\000\086\000\
    \085\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\027\000\027\000\086\000\000\000\086\000\085\000\055\001\
    \101\000\085\000\000\000\085\000\107\000\106\000\085\000\000\000\
    \098\000\000\000\097\000\106\000\057\001\094\000\101\000\000\000\
    \085\000\000\000\085\000\096\000\085\000\086\000\093\000\102\000\
    \129\000\000\000\139\000\101\000\000\000\000\000\085\000\000\000\
    \101\000\085\000\096\000\085\000\210\000\092\000\085\000\000\000\
    \099\000\000\000\092\000\255\255\085\000\095\000\101\000\130\000\
    \000\000\140\000\085\000\096\000\085\000\000\000\093\000\000\000\
    \129\000\097\000\139\000\211\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\096\000\000\000\210\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\085\000\000\000\000\000\113\000\
    \000\000\113\000\000\000\101\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\109\000\106\000\000\000\111\000\000\000\
    \111\000\000\000\106\000\110\000\110\000\110\000\110\000\110\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\110\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\000\000\
    \000\000\000\000\000\000\109\000\106\000\000\000\000\000\000\000\
    \000\000\000\000\106\000\106\000\000\000\000\000\134\000\134\000\
    \000\000\106\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\000\000\000\000\
    \106\000\000\000\137\000\106\000\000\000\000\000\106\000\000\000\
    \000\000\106\000\106\000\136\000\128\000\000\000\128\000\000\000\
    \106\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\000\000\000\000\000\000\000\000\135\000\
    \106\000\000\000\138\000\000\000\000\000\255\255\106\000\000\000\
    \000\000\000\000\106\000\136\000\000\000\000\000\000\000\000\000\
    \106\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \000\000\073\001\073\001\073\001\073\001\073\001\073\001\073\001\
    \073\001\000\000\000\000\000\000\000\000\123\000\000\000\117\000\
    \117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \117\000\000\000\123\000\123\000\123\000\123\000\123\000\123\000\
    \117\000\117\000\117\000\117\000\117\000\117\000\000\000\000\000\
    \000\000\074\001\000\000\120\000\000\000\000\000\000\000\122\000\
    \126\000\000\000\126\000\000\000\119\000\125\000\125\000\125\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\000\000\
    \117\000\117\000\117\000\117\000\117\000\117\000\000\000\000\000\
    \118\000\074\001\000\000\121\000\000\000\000\000\092\001\122\000\
    \000\000\092\001\092\001\000\000\119\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\092\001\
    \000\000\000\000\000\000\000\000\000\000\092\001\123\000\123\000\
    \123\000\123\000\123\000\123\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\124\000\125\000\125\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\106\000\000\000\000\000\000\000\
    \000\000\000\000\106\000\000\000\000\000\124\000\000\000\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\000\000\000\000\000\000\000\000\053\001\054\001\000\000\
    \053\001\053\001\000\000\000\000\106\000\106\000\000\000\000\000\
    \000\000\000\000\106\000\106\000\000\000\000\000\053\001\003\000\
    \000\000\000\000\000\000\000\000\053\001\000\000\052\001\000\000\
    \091\001\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\106\000\000\000\000\000\
    \000\000\255\255\000\000\106\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\174\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\255\255\000\000\000\000\
    \000\000\003\000\000\000\003\000\003\000\003\000\003\000\175\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\255\255\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \176\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\177\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\196\000\197\000\000\000\196\000\196\000\204\000\
    \205\000\000\000\204\000\204\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\196\000\000\000\000\000\000\000\000\000\
    \204\000\196\000\000\000\192\000\000\000\000\000\204\000\000\000\
    \000\000\195\000\194\000\000\000\000\000\000\000\000\000\000\000\
    \193\000\000\000\255\255\000\000\000\000\255\255\203\000\203\000\
    \203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
    \203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
    \203\000\203\000\223\000\055\001\000\000\223\000\223\000\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\000\000\000\000\
    \057\001\000\000\000\000\223\000\208\000\000\000\000\000\000\000\
    \000\000\223\000\000\000\000\000\000\000\207\000\000\000\000\000\
    \055\001\000\000\059\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\202\000\000\000\000\000\058\001\201\000\058\001\
    \000\000\206\000\000\000\000\000\209\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\207\000\000\000\000\000\
    \233\000\075\001\075\001\075\001\075\001\075\001\075\001\075\001\
    \075\001\075\001\075\001\000\000\000\000\226\000\000\000\000\000\
    \000\000\000\000\075\001\075\001\075\001\075\001\075\001\075\001\
    \000\000\000\000\229\000\000\000\000\000\000\000\000\000\000\000\
    \225\000\000\000\232\000\000\000\000\000\224\000\000\000\000\000\
    \230\000\000\000\000\000\227\000\231\000\000\000\228\000\000\000\
    \234\000\000\000\075\001\075\001\075\001\075\001\075\001\075\001\
    \075\001\075\001\075\001\075\001\075\001\075\001\075\001\075\001\
    \075\001\075\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\075\001\075\001\075\001\075\001\075\001\075\001\084\001\
    \084\001\084\001\084\001\084\001\084\001\084\001\084\001\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\086\001\086\001\
    \086\001\086\001\086\001\086\001\086\001\086\001\086\001\086\001\
    \000\000\075\001\075\001\075\001\075\001\075\001\075\001\086\001\
    \086\001\086\001\086\001\086\001\086\001\000\000\000\000\085\001\
    \000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\001\
    \086\001\086\001\086\001\086\001\086\001\000\000\000\000\085\001\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\086\001\086\001\086\001\086\001\086\001\086\001\
    \086\001\086\001\086\001\086\001\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\086\001\086\001\086\001\086\001\086\001\
    \086\001\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\086\001\086\001\086\001\086\001\086\001\
    \086\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\035\000\000\000\000\000\035\000\050\000\
    \255\255\255\255\050\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\150\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \017\000\017\000\018\000\019\000\020\000\022\000\033\000\025\000\
    \087\000\033\000\033\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\083\000\083\000\018\000\
    \021\000\018\000\018\000\020\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\044\000\041\000\
    \044\000\092\000\003\000\025\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\023\000\021\000\
    \024\000\047\000\100\000\047\000\105\000\118\000\119\000\130\000\
    \131\000\132\000\133\000\135\000\004\000\096\000\023\000\023\000\
    \141\000\142\000\024\000\143\000\144\000\041\000\147\000\148\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\149\000\119\000\096\000\140\000\119\000\130\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\166\000\096\000\140\000\169\000\004\000\
    \178\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\026\000\136\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\027\000\
    \180\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\037\000\120\000\183\000\037\000\037\000\
    \188\000\136\000\193\000\201\000\136\000\120\000\027\000\202\000\
    \137\000\206\000\088\000\212\000\037\000\027\000\042\000\038\000\
    \099\000\137\000\037\000\213\000\089\000\028\000\027\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\088\000\098\000\097\000\214\000\120\000\027\000\099\000\
    \088\000\028\000\027\000\089\000\028\000\027\000\042\000\038\000\
    \215\000\137\000\089\000\028\000\038\000\208\000\027\000\216\000\
    \101\000\098\000\097\000\089\000\028\000\211\000\208\000\028\000\
    \098\000\088\000\038\000\218\000\042\000\088\000\219\000\099\000\
    \088\000\028\000\097\000\089\000\028\000\220\000\099\000\101\000\
    \028\000\221\000\030\000\028\000\030\000\041\000\224\000\030\000\
    \225\000\098\000\097\000\089\000\028\000\211\000\208\000\028\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\097\000\226\000\227\000\228\000\185\000\101\000\
    \207\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\229\000\230\000\207\000\185\000\030\000\
    \207\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\032\000\111\000\111\000\111\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\111\000\231\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\232\000\233\000\234\000\235\000\236\000\180\000\234\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\237\000\238\000\239\000\240\000\032\000\242\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\054\000\243\000\042\000\038\000\244\000\196\000\
    \245\000\246\000\196\000\196\000\247\000\248\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \196\000\249\000\250\000\251\000\252\000\253\000\196\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\254\000\255\000\000\001\001\001\054\000\002\001\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\055\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\185\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\003\001\
    \004\001\005\001\006\001\007\001\008\001\009\001\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \010\001\011\001\012\001\013\001\055\000\014\001\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \056\000\115\000\115\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\015\001\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\016\001\017\001\
    \018\001\019\001\020\001\021\001\022\001\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\023\001\
    \024\001\025\001\026\001\056\000\027\001\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\057\000\
    \126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
    \126\000\126\000\028\001\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\029\001\030\001\031\001\
    \032\001\033\001\034\001\035\001\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\036\001\037\001\
    \038\001\039\001\057\000\040\001\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\058\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\041\001\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\042\001\043\001\044\001\045\001\
    \046\001\047\001\048\001\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\049\001\098\001\100\001\
    \101\001\058\000\102\001\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\059\000\107\001\108\001\
    \104\001\104\001\204\000\109\001\104\001\204\000\204\000\110\001\
    \093\001\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\204\000\060\001\064\001\112\001\104\001\
    \116\001\204\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\118\001\122\001\112\001\104\001\
    \059\000\123\001\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\060\000\124\001\125\001\120\001\
    \255\255\222\000\255\255\120\001\222\000\222\000\104\001\255\255\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\222\000\255\255\127\001\255\255\120\001\255\255\
    \222\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\093\001\255\255\255\255\120\001\060\000\
    \255\255\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\061\000\255\255\255\255\255\255\255\255\
    \053\001\255\255\255\255\053\001\053\001\120\001\255\255\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\053\001\255\255\255\255\255\255\255\255\255\255\053\001\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\255\255\255\255\255\255\255\255\061\000\255\255\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\062\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\060\001\064\001\112\001\255\255\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\255\255\255\255\255\255\255\255\062\000\255\255\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\063\000\073\001\073\001\073\001\073\001\073\001\073\001\
    \073\001\073\001\127\001\255\255\255\255\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \255\255\255\255\255\255\255\255\063\000\255\255\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \064\000\076\001\076\001\076\001\076\001\076\001\076\001\076\001\
    \076\001\255\255\255\255\255\255\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\255\255\
    \255\255\255\255\255\255\064\000\255\255\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\065\000\
    \084\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
    \255\255\255\255\255\255\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\255\255\255\255\
    \255\255\255\255\065\000\255\255\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\066\000\087\001\
    \087\001\087\001\087\001\087\001\087\001\087\001\087\001\255\255\
    \255\255\255\255\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\255\255\255\255\255\255\
    \255\255\066\000\255\255\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\067\000\255\255\255\255\
    \255\255\255\255\092\001\255\255\255\255\092\001\092\001\255\255\
    \255\255\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\092\001\255\255\255\255\255\255\255\255\
    \255\255\092\001\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\255\255\255\255\255\255\255\255\
    \067\000\255\255\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\068\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\255\255\255\255\255\255\255\255\068\000\
    \255\255\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\069\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\255\255\255\255\255\255\255\255\069\000\255\255\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\070\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\255\255\255\255\255\255\255\255\070\000\255\255\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\071\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \255\255\255\255\255\255\255\255\071\000\255\255\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \072\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\255\255\
    \255\255\255\255\255\255\072\000\255\255\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\255\255\255\255\
    \255\255\255\255\073\000\255\255\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\074\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\255\255\255\255\255\255\
    \255\255\074\000\255\255\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\075\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\255\255\255\255\255\255\255\255\
    \075\000\255\255\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\076\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\255\255\255\255\255\255\255\255\076\000\
    \255\255\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\077\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\255\255\255\255\255\255\255\255\077\000\255\255\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\078\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\067\001\078\001\255\255\255\255\078\000\255\255\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\079\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\078\001\
    \255\255\255\255\255\255\067\001\255\255\255\255\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \255\255\255\255\255\255\255\255\079\000\096\001\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \080\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\096\001\255\255\
    \255\255\255\255\255\255\255\255\255\255\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\255\255\
    \255\255\255\255\096\001\080\000\255\255\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\084\000\
    \096\001\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\078\001\255\255\255\255\255\255\067\001\
    \255\255\255\255\084\000\084\000\084\000\084\000\084\000\084\000\
    \085\000\255\255\085\000\255\255\255\255\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\090\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \255\255\255\255\255\255\255\255\086\000\086\000\052\001\102\000\
    \255\255\052\001\093\000\086\000\094\000\255\255\255\255\091\000\
    \090\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\095\000\255\255\103\000\102\000\052\001\
    \090\000\093\000\255\255\094\000\086\000\086\000\091\000\255\255\
    \093\000\255\255\094\000\086\000\052\001\091\000\102\000\255\255\
    \090\000\255\255\095\000\094\000\103\000\104\000\091\000\090\000\
    \121\000\255\255\138\000\103\000\255\255\255\255\102\000\255\255\
    \090\000\093\000\095\000\094\000\209\000\093\000\091\000\255\255\
    \093\000\255\255\091\000\096\001\104\000\091\000\102\000\121\000\
    \255\255\138\000\095\000\094\000\103\000\255\255\091\000\255\255\
    \121\000\095\000\138\000\209\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\095\000\255\255\209\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\104\000\255\255\255\255\107\000\
    \255\255\107\000\255\255\104\000\107\000\107\000\107\000\107\000\
    \107\000\107\000\107\000\107\000\107\000\107\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\108\000\108\000\255\255\109\000\255\255\
    \109\000\255\255\108\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\109\000\109\000\110\000\110\000\110\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\255\255\
    \255\255\255\255\255\255\108\000\108\000\255\255\255\255\255\255\
    \255\255\255\255\108\000\110\000\255\255\255\255\134\000\134\000\
    \255\255\110\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\255\255\255\255\
    \112\000\255\255\134\000\110\000\255\255\255\255\112\000\255\255\
    \255\255\110\000\114\000\134\000\122\000\255\255\122\000\255\255\
    \114\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\255\255\255\255\255\255\255\255\134\000\
    \112\000\255\255\134\000\255\255\255\255\052\001\112\000\255\255\
    \255\255\255\255\114\000\134\000\255\255\255\255\255\255\255\255\
    \114\000\116\000\116\000\116\000\116\000\116\000\116\000\116\000\
    \116\000\116\000\116\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\116\000\116\000\116\000\116\000\116\000\116\000\
    \255\255\070\001\070\001\070\001\070\001\070\001\070\001\070\001\
    \070\001\255\255\255\255\255\255\255\255\117\000\255\255\117\000\
    \117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \117\000\255\255\116\000\116\000\116\000\116\000\116\000\116\000\
    \117\000\117\000\117\000\117\000\117\000\117\000\255\255\255\255\
    \255\255\070\001\255\255\117\000\255\255\255\255\255\255\117\000\
    \124\000\255\255\124\000\255\255\117\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\255\255\
    \117\000\117\000\117\000\117\000\117\000\117\000\255\255\255\255\
    \117\000\070\001\255\255\117\000\255\255\255\255\089\001\117\000\
    \255\255\089\001\089\001\255\255\117\000\123\000\123\000\123\000\
    \123\000\123\000\123\000\123\000\123\000\123\000\123\000\089\001\
    \255\255\255\255\255\255\255\255\255\255\089\001\123\000\123\000\
    \123\000\123\000\123\000\123\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\123\000\125\000\125\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\123\000\123\000\
    \123\000\123\000\123\000\123\000\125\000\255\255\255\255\255\255\
    \255\255\255\255\125\000\255\255\255\255\123\000\255\255\127\000\
    \127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\255\255\255\255\255\255\255\255\050\001\050\001\255\255\
    \050\001\050\001\255\255\255\255\125\000\127\000\255\255\255\255\
    \255\255\255\255\125\000\127\000\255\255\255\255\050\001\173\000\
    \255\255\255\255\255\255\255\255\050\001\255\255\050\001\255\255\
    \089\001\255\255\255\255\173\000\173\000\173\000\173\000\173\000\
    \173\000\173\000\173\000\173\000\173\000\127\000\255\255\255\255\
    \255\255\070\001\255\255\127\000\173\000\173\000\173\000\173\000\
    \173\000\173\000\173\000\173\000\173\000\173\000\173\000\173\000\
    \173\000\173\000\173\000\173\000\173\000\173\000\173\000\173\000\
    \173\000\173\000\173\000\173\000\173\000\173\000\255\255\255\255\
    \255\255\255\255\173\000\255\255\173\000\173\000\173\000\173\000\
    \173\000\173\000\173\000\173\000\173\000\173\000\173\000\173\000\
    \173\000\173\000\173\000\173\000\173\000\173\000\173\000\173\000\
    \173\000\173\000\173\000\173\000\173\000\173\000\174\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\174\000\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\089\001\255\255\255\255\
    \255\255\174\000\255\255\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\174\000\175\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\175\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\175\000\050\001\255\255\255\255\255\255\
    \175\000\255\255\175\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
    \175\000\175\000\175\000\175\000\176\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\255\255\255\255\255\255\255\255\176\000\
    \255\255\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
    \176\000\176\000\176\000\177\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\177\000\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\255\255\255\255\255\255\255\255\177\000\255\255\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
    \177\000\177\000\190\000\190\000\255\255\190\000\190\000\199\000\
    \199\000\255\255\199\000\199\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\190\000\255\255\255\255\255\255\255\255\
    \199\000\190\000\255\255\190\000\255\255\255\255\199\000\255\255\
    \255\255\190\000\190\000\255\255\255\255\255\255\255\255\255\255\
    \190\000\255\255\056\001\255\255\255\255\056\001\199\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
    \203\000\203\000\223\000\056\001\255\255\223\000\223\000\057\001\
    \255\255\058\001\057\001\255\255\058\001\255\255\255\255\255\255\
    \056\001\255\255\255\255\223\000\203\000\255\255\255\255\255\255\
    \255\255\223\000\255\255\255\255\255\255\203\000\255\255\255\255\
    \057\001\255\255\058\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\199\000\255\255\255\255\057\001\199\000\058\001\
    \255\255\203\000\255\255\255\255\203\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\203\000\255\255\255\255\
    \223\000\074\001\074\001\074\001\074\001\074\001\074\001\074\001\
    \074\001\074\001\074\001\255\255\255\255\223\000\255\255\255\255\
    \255\255\255\255\074\001\074\001\074\001\074\001\074\001\074\001\
    \255\255\255\255\223\000\255\255\255\255\255\255\255\255\255\255\
    \223\000\255\255\223\000\255\255\255\255\223\000\255\255\255\255\
    \223\000\255\255\255\255\223\000\223\000\255\255\223\000\255\255\
    \223\000\255\255\074\001\074\001\074\001\074\001\074\001\074\001\
    \075\001\075\001\075\001\075\001\075\001\075\001\075\001\075\001\
    \075\001\075\001\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\075\001\075\001\075\001\075\001\075\001\075\001\081\001\
    \081\001\081\001\081\001\081\001\081\001\081\001\081\001\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\085\001\085\001\
    \085\001\085\001\085\001\085\001\085\001\085\001\085\001\085\001\
    \255\255\075\001\075\001\075\001\075\001\075\001\075\001\085\001\
    \085\001\085\001\085\001\085\001\085\001\255\255\255\255\081\001\
    \255\255\190\000\255\255\255\255\255\255\255\255\199\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\085\001\
    \085\001\085\001\085\001\085\001\085\001\255\255\255\255\081\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\056\001\086\001\086\001\086\001\086\001\086\001\086\001\
    \086\001\086\001\086\001\086\001\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\086\001\086\001\086\001\086\001\086\001\
    \086\001\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
    \058\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\086\001\086\001\086\001\086\001\086\001\
    \086\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\081\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\
    \001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\222\000\255\255\223\000\222\000\222\000\223\000\223\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\222\000\255\255\223\000\255\255\255\255\255\255\
    \222\000\255\255\223\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_code =
   "\255\001\255\255\000\001\255";
}

let rec initial lexbuf =
   __ocaml_lex_initial_rec lexbuf 0
and __ocaml_lex_initial_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 485 "src/kernel_internals/parsing/clexer.mll"
                            suf
# 1870 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 487 "src/kernel_internals/parsing/clexer.mll"
      (
        do_lex_comment ~first_string:suf comment lexbuf ;
        initial lexbuf
      )
# 1877 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
let
# 492 "src/kernel_internals/parsing/clexer.mll"
                        c
# 1883 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 493 "src/kernel_internals/parsing/clexer.mll"
    ( if c = !annot_char then begin
        annot_lex initial annot_first_token lexbuf
      end else
	begin
	  do_lex_comment ~first_string:(String.make 1 c) comment lexbuf ;
          initial lexbuf
	end
    )
# 1894 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
let
# 502 "src/kernel_internals/parsing/clexer.mll"
                            suf
# 1900 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 503 "src/kernel_internals/parsing/clexer.mll"
    ( 
      do_lex_comment ~first_string:suf onelinecomment lexbuf ;
      E.newline();
      if is_oneline_ghost () then begin
        exit_oneline_ghost ();
        RGHOST
      end else begin
        initial lexbuf
      end
    )
# 1913 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
let
# 514 "src/kernel_internals/parsing/clexer.mll"
                    c
# 1919 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 515 "src/kernel_internals/parsing/clexer.mll"
    ( if c = !annot_char then begin
        annot_lex initial annot_one_line lexbuf
      end else
	begin
	  do_lex_comment ~first_string:(String.make 1 c) onelinecomment lexbuf;
	  E.newline();
	  if is_oneline_ghost () then
	    begin
              exit_oneline_ghost ();
              RGHOST
	    end
	  else
	    begin
              initial lexbuf
	    end
	end
    )
# 1939 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 532 "src/kernel_internals/parsing/clexer.mll"
           (initial lexbuf)
# 1944 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 533 "src/kernel_internals/parsing/clexer.mll"
                                        ( E.newline ();
                                          if !pragmaLine then
                                            begin
                                              pragmaLine := false;
                                              PRAGMA_EOL
                                            end
                                          else if is_oneline_ghost () then
                                            begin
                                              exit_oneline_ghost ();
                                              RGHOST
                                            end
                                          else begin
                                            initial lexbuf
                                          end )
# 1962 "src/kernel_internals/parsing/clexer.ml"

  | 6 ->
# 547 "src/kernel_internals/parsing/clexer.mll"
                                        ( E.newline ();
                                          initial lexbuf
                                        )
# 1969 "src/kernel_internals/parsing/clexer.ml"

  | 7 ->
# 550 "src/kernel_internals/parsing/clexer.mll"
         ( hash lexbuf)
# 1974 "src/kernel_internals/parsing/clexer.ml"

  | 8 ->
# 551 "src/kernel_internals/parsing/clexer.mll"
          ( hash lexbuf)
# 1979 "src/kernel_internals/parsing/clexer.ml"

  | 9 ->
# 552 "src/kernel_internals/parsing/clexer.mll"
                                   ( PRAGMA (currentLoc ()) )
# 1984 "src/kernel_internals/parsing/clexer.ml"

  | 10 ->
# 553 "src/kernel_internals/parsing/clexer.mll"
          (
      let start = Lexing.lexeme_start_p lexbuf in
      let content = chr lexbuf in
      let last = Lexing.lexeme_end_p lexbuf in
      CST_CHAR (content, (start,last))
    )
# 1994 "src/kernel_internals/parsing/clexer.ml"

  | 11 ->
# 559 "src/kernel_internals/parsing/clexer.mll"
          (
      let start = Lexing.lexeme_start_p lexbuf in
      let content = chr lexbuf in
      let last = Lexing.lexeme_end_p lexbuf in
      CST_WCHAR (content, (start,last))
    )
# 2004 "src/kernel_internals/parsing/clexer.ml"

  | 12 ->
# 565 "src/kernel_internals/parsing/clexer.mll"
         (
      let start = Lexing.lexeme_start_p lexbuf in
      let content = str lexbuf in
      let last = Lexing.lexeme_end_p lexbuf in
      CST_STRING (content, (start,last))
    )
# 2014 "src/kernel_internals/parsing/clexer.ml"

  | 13 ->
# 571 "src/kernel_internals/parsing/clexer.mll"
           (
      let start = Lexing.lexeme_start_p lexbuf in
      let content = str lexbuf in
      let last = Lexing.lexeme_end_p lexbuf in
      CST_WSTRING(content, (start,last))
    )
# 2024 "src/kernel_internals/parsing/clexer.ml"

  | 14 ->
# 577 "src/kernel_internals/parsing/clexer.mll"
             (CST_FLOAT (Lexing.lexeme lexbuf, currentLoc ()))
# 2029 "src/kernel_internals/parsing/clexer.ml"

  | 15 ->
# 578 "src/kernel_internals/parsing/clexer.mll"
                           ( (* GCC Extension for binary numbers *) 
                                          CST_INT (Lexing.lexeme lexbuf, currentLoc ()))
# 2035 "src/kernel_internals/parsing/clexer.ml"

  | 16 ->
# 580 "src/kernel_internals/parsing/clexer.mll"
            (CST_INT (Lexing.lexeme lexbuf, currentLoc ()))
# 2040 "src/kernel_internals/parsing/clexer.ml"

  | 17 ->
# 581 "src/kernel_internals/parsing/clexer.mll"
            (CST_INT (Lexing.lexeme lexbuf, currentLoc ()))
# 2045 "src/kernel_internals/parsing/clexer.ml"

  | 18 ->
# 582 "src/kernel_internals/parsing/clexer.mll"
            (CST_INT (Lexing.lexeme lexbuf, currentLoc ()))
# 2050 "src/kernel_internals/parsing/clexer.ml"

  | 19 ->
# 583 "src/kernel_internals/parsing/clexer.mll"
             (EOF)
# 2055 "src/kernel_internals/parsing/clexer.ml"

  | 20 ->
# 584 "src/kernel_internals/parsing/clexer.mll"
           (ELLIPSIS)
# 2060 "src/kernel_internals/parsing/clexer.ml"

  | 21 ->
# 585 "src/kernel_internals/parsing/clexer.mll"
          (PLUS_EQ)
# 2065 "src/kernel_internals/parsing/clexer.ml"

  | 22 ->
# 586 "src/kernel_internals/parsing/clexer.mll"
          (MINUS_EQ)
# 2070 "src/kernel_internals/parsing/clexer.ml"

  | 23 ->
# 587 "src/kernel_internals/parsing/clexer.mll"
          (STAR_EQ)
# 2075 "src/kernel_internals/parsing/clexer.ml"

  | 24 ->
# 588 "src/kernel_internals/parsing/clexer.mll"
          (SLASH_EQ)
# 2080 "src/kernel_internals/parsing/clexer.ml"

  | 25 ->
# 589 "src/kernel_internals/parsing/clexer.mll"
          (PERCENT_EQ)
# 2085 "src/kernel_internals/parsing/clexer.ml"

  | 26 ->
# 590 "src/kernel_internals/parsing/clexer.mll"
          (PIPE_EQ)
# 2090 "src/kernel_internals/parsing/clexer.ml"

  | 27 ->
# 591 "src/kernel_internals/parsing/clexer.mll"
          (AND_EQ)
# 2095 "src/kernel_internals/parsing/clexer.ml"

  | 28 ->
# 592 "src/kernel_internals/parsing/clexer.mll"
          (CIRC_EQ)
# 2100 "src/kernel_internals/parsing/clexer.ml"

  | 29 ->
# 593 "src/kernel_internals/parsing/clexer.mll"
           (INF_INF_EQ)
# 2105 "src/kernel_internals/parsing/clexer.ml"

  | 30 ->
# 594 "src/kernel_internals/parsing/clexer.mll"
           (SUP_SUP_EQ)
# 2110 "src/kernel_internals/parsing/clexer.ml"

  | 31 ->
# 595 "src/kernel_internals/parsing/clexer.mll"
          (INF_INF)
# 2115 "src/kernel_internals/parsing/clexer.ml"

  | 32 ->
# 596 "src/kernel_internals/parsing/clexer.mll"
          (SUP_SUP)
# 2120 "src/kernel_internals/parsing/clexer.ml"

  | 33 ->
# 597 "src/kernel_internals/parsing/clexer.mll"
           (EQ_EQ)
# 2125 "src/kernel_internals/parsing/clexer.ml"

  | 34 ->
# 598 "src/kernel_internals/parsing/clexer.mll"
           (EXCLAM_EQ)
# 2130 "src/kernel_internals/parsing/clexer.ml"

  | 35 ->
# 599 "src/kernel_internals/parsing/clexer.mll"
          (INF_EQ)
# 2135 "src/kernel_internals/parsing/clexer.ml"

  | 36 ->
# 600 "src/kernel_internals/parsing/clexer.mll"
          (SUP_EQ)
# 2140 "src/kernel_internals/parsing/clexer.ml"

  | 37 ->
# 601 "src/kernel_internals/parsing/clexer.mll"
         (EQ)
# 2145 "src/kernel_internals/parsing/clexer.ml"

  | 38 ->
# 602 "src/kernel_internals/parsing/clexer.mll"
         (INF)
# 2150 "src/kernel_internals/parsing/clexer.ml"

  | 39 ->
# 603 "src/kernel_internals/parsing/clexer.mll"
         (SUP)
# 2155 "src/kernel_internals/parsing/clexer.ml"

  | 40 ->
# 604 "src/kernel_internals/parsing/clexer.mll"
          (PLUS_PLUS (currentLoc ()))
# 2160 "src/kernel_internals/parsing/clexer.ml"

  | 41 ->
# 605 "src/kernel_internals/parsing/clexer.mll"
          (MINUS_MINUS (currentLoc ()))
# 2165 "src/kernel_internals/parsing/clexer.ml"

  | 42 ->
# 606 "src/kernel_internals/parsing/clexer.mll"
          (ARROW)
# 2170 "src/kernel_internals/parsing/clexer.ml"

  | 43 ->
# 607 "src/kernel_internals/parsing/clexer.mll"
         (PLUS (currentLoc ()))
# 2175 "src/kernel_internals/parsing/clexer.ml"

  | 44 ->
# 608 "src/kernel_internals/parsing/clexer.mll"
         (MINUS (currentLoc ()))
# 2180 "src/kernel_internals/parsing/clexer.ml"

  | 45 ->
# 610 "src/kernel_internals/parsing/clexer.mll"
                    ( if is_ghost_code () then might_end_ghost lexbuf
                      else
                        STAR (currentLoc ()))
# 2187 "src/kernel_internals/parsing/clexer.ml"

  | 46 ->
let
# 613 "src/kernel_internals/parsing/clexer.mll"
                   c
# 2193 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 614 "src/kernel_internals/parsing/clexer.mll"
   ( if c = !annot_char then
       if is_ghost_code () || is_oneline_ghost () then begin
         enter_ghost_annot();
         annot_lex initial annot_first_token lexbuf
       end else
         E.parse_error "This kind of annotation is valid only inside ghost code"
     else begin
       lexbuf.Lexing.lex_curr_pos <- lexbuf.Lexing.lex_curr_pos - 1;
       SLASH
     end )
# 2206 "src/kernel_internals/parsing/clexer.ml"

  | 47 ->
# 624 "src/kernel_internals/parsing/clexer.mll"
                                        (SLASH)
# 2211 "src/kernel_internals/parsing/clexer.ml"

  | 48 ->
# 625 "src/kernel_internals/parsing/clexer.mll"
         (PERCENT)
# 2216 "src/kernel_internals/parsing/clexer.ml"

  | 49 ->
# 626 "src/kernel_internals/parsing/clexer.mll"
         (EXCLAM (currentLoc ()))
# 2221 "src/kernel_internals/parsing/clexer.ml"

  | 50 ->
# 627 "src/kernel_internals/parsing/clexer.mll"
          (AND_AND (currentLoc ()))
# 2226 "src/kernel_internals/parsing/clexer.ml"

  | 51 ->
# 628 "src/kernel_internals/parsing/clexer.mll"
          (PIPE_PIPE)
# 2231 "src/kernel_internals/parsing/clexer.ml"

  | 52 ->
# 629 "src/kernel_internals/parsing/clexer.mll"
         (AND (currentLoc ()))
# 2236 "src/kernel_internals/parsing/clexer.ml"

  | 53 ->
# 630 "src/kernel_internals/parsing/clexer.mll"
         (PIPE)
# 2241 "src/kernel_internals/parsing/clexer.ml"

  | 54 ->
# 631 "src/kernel_internals/parsing/clexer.mll"
         (CIRC)
# 2246 "src/kernel_internals/parsing/clexer.ml"

  | 55 ->
# 632 "src/kernel_internals/parsing/clexer.mll"
         (QUEST)
# 2251 "src/kernel_internals/parsing/clexer.ml"

  | 56 ->
# 634 "src/kernel_internals/parsing/clexer.mll"
  ( if Cabshelper.is_attr_test () then begin
        Cabshelper.pop_attr_test (); COLON2
      end else COLON
  )
# 2259 "src/kernel_internals/parsing/clexer.ml"

  | 57 ->
# 638 "src/kernel_internals/parsing/clexer.mll"
                (TILDE (currentLoc ()))
# 2264 "src/kernel_internals/parsing/clexer.ml"

  | 58 ->
# 640 "src/kernel_internals/parsing/clexer.mll"
               (dbgToken (LBRACE (currentLoc ())))
# 2269 "src/kernel_internals/parsing/clexer.ml"

  | 59 ->
# 641 "src/kernel_internals/parsing/clexer.mll"
               (dbgToken (RBRACE (currentLoc ())))
# 2274 "src/kernel_internals/parsing/clexer.ml"

  | 60 ->
# 642 "src/kernel_internals/parsing/clexer.mll"
                (dbgToken (LBRACE (currentLoc ())))
# 2279 "src/kernel_internals/parsing/clexer.ml"

  | 61 ->
# 643 "src/kernel_internals/parsing/clexer.mll"
                (dbgToken (RBRACE (currentLoc ())))
# 2284 "src/kernel_internals/parsing/clexer.ml"

  | 62 ->
# 644 "src/kernel_internals/parsing/clexer.mll"
          (LBRACKET)
# 2289 "src/kernel_internals/parsing/clexer.ml"

  | 63 ->
# 645 "src/kernel_internals/parsing/clexer.mll"
          (RBRACKET)
# 2294 "src/kernel_internals/parsing/clexer.ml"

  | 64 ->
# 646 "src/kernel_internals/parsing/clexer.mll"
           (LBRACKET)
# 2299 "src/kernel_internals/parsing/clexer.ml"

  | 65 ->
# 647 "src/kernel_internals/parsing/clexer.mll"
           (RBRACKET)
# 2304 "src/kernel_internals/parsing/clexer.ml"

  | 66 ->
# 648 "src/kernel_internals/parsing/clexer.mll"
               (dbgToken (LPAREN (currentLoc ())) )
# 2309 "src/kernel_internals/parsing/clexer.ml"

  | 67 ->
# 649 "src/kernel_internals/parsing/clexer.mll"
          (RPAREN)
# 2314 "src/kernel_internals/parsing/clexer.ml"

  | 68 ->
# 650 "src/kernel_internals/parsing/clexer.mll"
               (dbgToken (SEMICOLON (currentLoc ())) )
# 2319 "src/kernel_internals/parsing/clexer.ml"

  | 69 ->
# 651 "src/kernel_internals/parsing/clexer.mll"
          (COMMA)
# 2324 "src/kernel_internals/parsing/clexer.ml"

  | 70 ->
# 652 "src/kernel_internals/parsing/clexer.mll"
          (DOT)
# 2329 "src/kernel_internals/parsing/clexer.ml"

  | 71 ->
# 653 "src/kernel_internals/parsing/clexer.mll"
             (SIZEOF (currentLoc ()))
# 2334 "src/kernel_internals/parsing/clexer.ml"

  | 72 ->
# 654 "src/kernel_internals/parsing/clexer.mll"
                                        ( if !Cprint.msvcMode then
                                             MSASM (msasm lexbuf, currentLoc ())
                                          else (ASM (currentLoc ())) )
# 2341 "src/kernel_internals/parsing/clexer.ml"

  | 73 ->
# 659 "src/kernel_internals/parsing/clexer.mll"
                                        ( let _ = matchingpars 0 lexbuf in
                                          initial lexbuf
                                        )
# 2348 "src/kernel_internals/parsing/clexer.ml"

  | 74 ->
# 665 "src/kernel_internals/parsing/clexer.mll"
                                        (initial lexbuf )
# 2353 "src/kernel_internals/parsing/clexer.ml"

  | 75 ->
# 666 "src/kernel_internals/parsing/clexer.mll"
                                        (scan_ident (Lexing.lexeme lexbuf))
# 2358 "src/kernel_internals/parsing/clexer.ml"

  | 76 ->
# 668 "src/kernel_internals/parsing/clexer.mll"
  ( if is_oneline_ghost() then begin
      exit_oneline_ghost (); RGHOST
    end
    else EOF
  )
# 2367 "src/kernel_internals/parsing/clexer.ml"

  | 77 ->
let
# 673 "src/kernel_internals/parsing/clexer.mll"
                     c
# 2373 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 674 "src/kernel_internals/parsing/clexer.mll"
  ( if is_ghost_code() && c = '@' then initial lexbuf
    else E.parse_error "Invalid symbol"
  )
# 2379 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_initial_rec lexbuf __ocaml_lex_state

and might_end_ghost lexbuf =
   __ocaml_lex_might_end_ghost_rec lexbuf 178
and __ocaml_lex_might_end_ghost_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 678 "src/kernel_internals/parsing/clexer.mll"
        ( exit_ghost_code(); RGHOST )
# 2391 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 679 "src/kernel_internals/parsing/clexer.mll"
       ( STAR (currentLoc()) )
# 2396 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_might_end_ghost_rec lexbuf __ocaml_lex_state

and comment buffer lexbuf =
   __ocaml_lex_comment_rec buffer lexbuf 180
and __ocaml_lex_comment_rec buffer lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 682 "src/kernel_internals/parsing/clexer.mll"
                (  )
# 2408 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 683 "src/kernel_internals/parsing/clexer.mll"
                ( E.parse_error "Unterminated C comment" )
# 2413 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 684 "src/kernel_internals/parsing/clexer.mll"
                ( lex_comment comment buffer lexbuf )
# 2418 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec buffer lexbuf __ocaml_lex_state

and onelinecomment buffer lexbuf =
   __ocaml_lex_onelinecomment_rec buffer lexbuf 185
and __ocaml_lex_onelinecomment_rec buffer lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 687 "src/kernel_internals/parsing/clexer.mll"
                ( if is_ghost_code () then
                      (* end of multiline comment *)
                      lexbuf.Lexing.lex_curr_pos <-
                          lexbuf.Lexing.lex_curr_pos - 2
                  else
                      lex_comment onelinecomment buffer lexbuf
                )
# 2436 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 694 "src/kernel_internals/parsing/clexer.mll"
                (  )
# 2441 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 695 "src/kernel_internals/parsing/clexer.mll"
                ( lex_comment onelinecomment buffer lexbuf )
# 2446 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_onelinecomment_rec buffer lexbuf __ocaml_lex_state

and matchingpars parsopen lexbuf =
   __ocaml_lex_matchingpars_rec parsopen lexbuf 190
and __ocaml_lex_matchingpars_rec parsopen lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 698 "src/kernel_internals/parsing/clexer.mll"
                ( E.newline (); matchingpars parsopen lexbuf )
# 2458 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 699 "src/kernel_internals/parsing/clexer.mll"
                ( matchingpars parsopen lexbuf )
# 2463 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 700 "src/kernel_internals/parsing/clexer.mll"
                ( matchingpars (parsopen + 1) lexbuf )
# 2468 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 701 "src/kernel_internals/parsing/clexer.mll"
                ( if parsopen > 1 then
                    matchingpars (parsopen - 1) lexbuf
                )
# 2475 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 704 "src/kernel_internals/parsing/clexer.mll"
         ( do_lex_comment comment lexbuf ;
                  matchingpars parsopen lexbuf )
# 2481 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 706 "src/kernel_internals/parsing/clexer.mll"
        ( let _ = str lexbuf in
                  matchingpars parsopen lexbuf )
# 2487 "src/kernel_internals/parsing/clexer.ml"

  | 6 ->
# 708 "src/kernel_internals/parsing/clexer.mll"
                ( matchingpars parsopen lexbuf )
# 2492 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_matchingpars_rec parsopen lexbuf __ocaml_lex_state

and hash lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1); __ocaml_lex_hash_rec lexbuf 199
and __ocaml_lex_hash_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 712 "src/kernel_internals/parsing/clexer.mll"
        ( E.newline (); initial lexbuf)
# 2504 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 713 "src/kernel_internals/parsing/clexer.mll"
         ( hash lexbuf)
# 2509 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 714 "src/kernel_internals/parsing/clexer.mll"
         ( (* We are seeing a line number. This is the number for the
                   * next line *)
                 let s = Lexing.lexeme lexbuf in
                 let lineno = try
                   int_of_string s
                 with Failure _ ->
                   (* the int is too big. *)
                   Kernel.warning "Bad line number in preprocessed file: %s" s;
                   (-1)
                 in
                 E.setCurrentLine (lineno - 1);
                  (* A file name may follow *)
		  file lexbuf )
# 2526 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 727 "src/kernel_internals/parsing/clexer.mll"
                ( hash lexbuf )
# 2531 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
let
# 730 "src/kernel_internals/parsing/clexer.mll"
                                     pragmaName
# 2537 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 731 "src/kernel_internals/parsing/clexer.mll"
                ( let here = currentLoc () in
                  PRAGMA_LINE (pragmaName ^ pragma lexbuf, here)
                )
# 2543 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 734 "src/kernel_internals/parsing/clexer.mll"
                ( pragmaLine := true; PRAGMA (currentLoc ()) )
# 2548 "src/kernel_internals/parsing/clexer.ml"

  | 6 ->
# 735 "src/kernel_internals/parsing/clexer.mll"
            ( endline lexbuf)
# 2553 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_hash_rec lexbuf __ocaml_lex_state

and file lexbuf =
   __ocaml_lex_file_rec lexbuf 306
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 738 "src/kernel_internals/parsing/clexer.mll"
                      (E.newline (); initial lexbuf)
# 2565 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 739 "src/kernel_internals/parsing/clexer.mll"
          (file lexbuf)
# 2570 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
let
# 742 "src/kernel_internals/parsing/clexer.mll"
                                     d
# 2576 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -3) in
# 742 "src/kernel_internals/parsing/clexer.mll"
                                               (
        E.setCurrentWorkingDirectory d;
                                 endline lexbuf )
# 2582 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
let
# 745 "src/kernel_internals/parsing/clexer.mll"
                               f
# 2588 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 745 "src/kernel_internals/parsing/clexer.mll"
                                      (
                                 E.setCurrentFile f;
				 endline lexbuf)
# 2594 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 749 "src/kernel_internals/parsing/clexer.mll"
      (endline lexbuf)
# 2599 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
   __ocaml_lex_endline_rec lexbuf 316
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 752 "src/kernel_internals/parsing/clexer.mll"
                ( E.newline (); initial lexbuf)
# 2611 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 753 "src/kernel_internals/parsing/clexer.mll"
                                ( EOF )
# 2616 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 754 "src/kernel_internals/parsing/clexer.mll"
      ( endline lexbuf)
# 2621 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

and pragma lexbuf =
   __ocaml_lex_pragma_rec lexbuf 320
and __ocaml_lex_pragma_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 757 "src/kernel_internals/parsing/clexer.mll"
                        ( E.newline (); "" )
# 2633 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 758 "src/kernel_internals/parsing/clexer.mll"
                        ( let cur = Lexing.lexeme lexbuf in
                          cur ^ (pragma lexbuf) )
# 2639 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_pragma_rec lexbuf __ocaml_lex_state

and str lexbuf =
   __ocaml_lex_str_rec lexbuf 323
and __ocaml_lex_str_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 762 "src/kernel_internals/parsing/clexer.mll"
                        ([])
# 2651 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 763 "src/kernel_internals/parsing/clexer.mll"
             (lex_hex_escape str lexbuf)
# 2656 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 764 "src/kernel_internals/parsing/clexer.mll"
             (lex_oct_escape str lexbuf)
# 2661 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 765 "src/kernel_internals/parsing/clexer.mll"
          (lex_simple_escape str lexbuf)
# 2666 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 766 "src/kernel_internals/parsing/clexer.mll"
                        (E.parse_error "unterminated string" )
# 2671 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 767 "src/kernel_internals/parsing/clexer.mll"
     (lex_unescaped str lexbuf)
# 2676 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_str_rec lexbuf __ocaml_lex_state

and chr lexbuf =
   __ocaml_lex_chr_rec lexbuf 334
and __ocaml_lex_chr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 770 "src/kernel_internals/parsing/clexer.mll"
              ([])
# 2688 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 771 "src/kernel_internals/parsing/clexer.mll"
             (lex_hex_escape chr lexbuf)
# 2693 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 772 "src/kernel_internals/parsing/clexer.mll"
             (lex_oct_escape chr lexbuf)
# 2698 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 773 "src/kernel_internals/parsing/clexer.mll"
          (lex_simple_escape chr lexbuf)
# 2703 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 774 "src/kernel_internals/parsing/clexer.mll"
                        ( E.parse_error "unterminated char" )
# 2708 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 775 "src/kernel_internals/parsing/clexer.mll"
     (lex_unescaped chr lexbuf)
# 2713 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_chr_rec lexbuf __ocaml_lex_state

and msasm lexbuf =
   __ocaml_lex_msasm_rec lexbuf 345
and __ocaml_lex_msasm_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 778 "src/kernel_internals/parsing/clexer.mll"
                        ( msasm lexbuf )
# 2725 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 779 "src/kernel_internals/parsing/clexer.mll"
                        ( msasminbrace lexbuf )
# 2730 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 780 "src/kernel_internals/parsing/clexer.mll"
                        ( let cur = Lexing.lexeme lexbuf in
                          cur ^ (msasmnobrace lexbuf) )
# 2736 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_msasm_rec lexbuf __ocaml_lex_state

and msasminbrace lexbuf =
   __ocaml_lex_msasminbrace_rec lexbuf 349
and __ocaml_lex_msasminbrace_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 784 "src/kernel_internals/parsing/clexer.mll"
                        ( "" )
# 2748 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 785 "src/kernel_internals/parsing/clexer.mll"
                        ( let cur = Lexing.lexeme lexbuf in
                          cur ^ (msasminbrace lexbuf) )
# 2754 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_msasminbrace_rec lexbuf __ocaml_lex_state

and msasmnobrace lexbuf =
   __ocaml_lex_msasmnobrace_rec lexbuf 352
and __ocaml_lex_msasmnobrace_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 788 "src/kernel_internals/parsing/clexer.mll"
                        ( lexbuf.Lexing.lex_curr_pos <-
                               lexbuf.Lexing.lex_curr_pos - 1;
                          "" )
# 2768 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 791 "src/kernel_internals/parsing/clexer.mll"
                        ( lexbuf.Lexing.lex_curr_pos <-
                               lexbuf.Lexing.lex_curr_pos - 5;
                          "" )
# 2775 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 794 "src/kernel_internals/parsing/clexer.mll"
                        ( let cur = Lexing.lexeme lexbuf in

                          cur ^ (msasmnobrace lexbuf) )
# 2782 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_msasmnobrace_rec lexbuf __ocaml_lex_state

and annot_first_token lexbuf =
   __ocaml_lex_annot_first_token_rec lexbuf 360
and __ocaml_lex_annot_first_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 799 "src/kernel_internals/parsing/clexer.mll"
            (
      if is_oneline_ghost () then E.parse_error "nested ghost code";
      Buffer.clear buf;
      enter_ghost_code ();
      LGHOST
    )
# 2799 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
let
# 805 "src/kernel_internals/parsing/clexer.mll"
                         c
# 2805 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 805 "src/kernel_internals/parsing/clexer.mll"
                           ( Buffer.add_char buf c; annot_first_token lexbuf )
# 2809 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 806 "src/kernel_internals/parsing/clexer.mll"
         ( E.newline(); Buffer.add_char buf '\n'; annot_first_token lexbuf )
# 2814 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 807 "src/kernel_internals/parsing/clexer.mll"
       ( annot_token lexbuf )
# 2819 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_first_token_rec lexbuf __ocaml_lex_state

and annot_token lexbuf =
   __ocaml_lex_annot_token_rec lexbuf 368
and __ocaml_lex_annot_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 809 "src/kernel_internals/parsing/clexer.mll"
         ( if is_ghost_annot () then
             E.parse_error "Ghost multi-line annotation not terminated";
           let s = Buffer.contents buf in
           make_annot ~one_line:false initial lexbuf s )
# 2834 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 813 "src/kernel_internals/parsing/clexer.mll"
         ( E.parse_error "Unterminated annotation" )
# 2839 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 814 "src/kernel_internals/parsing/clexer.mll"
         (E.newline(); Buffer.add_char buf '\n'; annot_token lexbuf )
# 2844 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
let
# 815 "src/kernel_internals/parsing/clexer.mll"
         c
# 2850 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 815 "src/kernel_internals/parsing/clexer.mll"
           ( if is_ghost_annot () && c = !annot_char then
               might_end_ghost_annot lexbuf
             else (Buffer.add_char buf c; annot_token lexbuf) )
# 2856 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_token_rec lexbuf __ocaml_lex_state

and might_end_ghost_annot lexbuf =
   __ocaml_lex_might_end_ghost_annot_rec lexbuf 374
and __ocaml_lex_might_end_ghost_annot_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 819 "src/kernel_internals/parsing/clexer.mll"
        ( exit_ghost_annot ();
          let s = Buffer.contents buf in
          make_annot ~one_line:false initial lexbuf s )
# 2870 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 822 "src/kernel_internals/parsing/clexer.mll"
       ( Buffer.add_char buf !annot_char; annot_token lexbuf )
# 2875 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_might_end_ghost_annot_rec lexbuf __ocaml_lex_state

and annot_one_line lexbuf =
   __ocaml_lex_annot_one_line_rec lexbuf 376
and __ocaml_lex_annot_one_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 824 "src/kernel_internals/parsing/clexer.mll"
            (
      if is_oneline_ghost () then E.parse_error "nested ghost code";
      enter_oneline_ghost (); LGHOST
    )
# 2890 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
let
# 828 "src/kernel_internals/parsing/clexer.mll"
                         c
# 2896 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 828 "src/kernel_internals/parsing/clexer.mll"
                           ( Buffer.add_char buf c; annot_one_line lexbuf )
# 2900 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 829 "src/kernel_internals/parsing/clexer.mll"
       ( annot_one_line_logic lexbuf )
# 2905 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_one_line_rec lexbuf __ocaml_lex_state

and annot_one_line_logic lexbuf =
   __ocaml_lex_annot_one_line_logic_rec lexbuf 383
and __ocaml_lex_annot_one_line_logic_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 831 "src/kernel_internals/parsing/clexer.mll"
         ( make_annot ~one_line:true initial lexbuf (Buffer.contents buf) )
# 2917 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
let
# 832 "src/kernel_internals/parsing/clexer.mll"
         c
# 2923 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 832 "src/kernel_internals/parsing/clexer.mll"
           ( Buffer.add_char buf c; annot_one_line_logic lexbuf )
# 2927 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_one_line_logic_rec lexbuf __ocaml_lex_state

;;

# 834 "src/kernel_internals/parsing/clexer.mll"
 

  (* Catch the exceptions raised by the lexer itself *)
  let initial lexbuf =
    try initial lexbuf
    with Failure _ -> raise Parsing.Parse_error 


# 2943 "src/kernel_internals/parsing/clexer.ml"
